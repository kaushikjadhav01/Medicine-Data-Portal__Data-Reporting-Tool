{"version":3,"sources":["assets/images/w-logo.png","assets/images/logo-white.png","assets/images/logo.png","assets/images/dashboard/under-development.svg","assets/images/dashboard/hold.svg","assets/images/dashboard/dropped.svg","assets/images/dashboard/filed.svg","assets/images/dashboard/approved.svg","assets/images/loader.svg","assets/images/mpp_logo_white.png","util/config.js","util/IntlMessages.js","appRedux/reducers/Settings.js","constants/ThemeSetting.js","constants/ActionTypes.js","appRedux/reducers/Common.js","constants/app.constants.js","constants/auth.constants.js","constants/loader.constants.js","constants/admin-products.constants.js","constants/admin-partner.constants.js","constants/product-development-timeline.constants.js","constants/filing-plans.constants.js","constants/sales-report.constants.js","constants/partner-dashboard.constants.js","constants/admin-dashboard.constants.js","appRedux/reducers/Loader.js","appRedux/reducers/AdminProducts.js","appRedux/reducers/AdminPartner.js","appRedux/reducers/PartnerDashboard.js","appRedux/reducers/ProductDevelopmentTimeline.js","appRedux/reducers/FilingPlans.js","appRedux/reducers/SalesReport.js","appRedux/reducers/UserAuthentication.js","appRedux/reducers/AdminDashboard.js","appRedux/store/index.js","lngProvider/entries/en-US.js","lngProvider/entries/zh-Hans-CN.js","lngProvider/entries/ar_SA.js","lngProvider/entries/it_IT.js","lngProvider/entries/es_ES.js","lngProvider/index.js","lngProvider/entries/fr_FR.js","util/CustomScrollbars.js","appRedux/actions/Setting.js","containers/Sidebar/SidebarLogo.js","helpers/history.js","helpers/auth-header.js","helpers/message.js","helpers/util.js","helpers/sample-response.js","containers/Sidebar/SidebarContent.js","containers/Sidebar/index.js","containers/Topbar/languageData.js","components/SearchBox/index.js","components/UserInfo/index.js","components/AppNotification/NotificationItem.js","components/AppNotification/data.js","util/Auxiliary.js","components/AppNotification/index.js","components/MailNotification/NotificationItem.js","components/MailNotification/data.js","components/MailNotification/index.js","containers/Topbar/HorizontalNav.js","containers/Topbar/HorizontalDefault/index.js","containers/Topbar/HorizontalDark/index.js","containers/Topbar/InsideHeader/index.js","containers/Topbar/AboveHeader/index.js","containers/Topbar/BelowHeader/index.js","containers/Topbar/index.js","helpers/auth.js","services/handle-response.js","services/Auth.js","services/ProductDevTimeline.js","services/SalesReport.js","services/AdminDashboard.js","appRedux/actions/Loader.js","appRedux/actions/AdminDashboard.js","components/Widget/index.js","components/dashboardCountProjects/DashboardCountProjects.js","routes/pages/dashboard/dashboard-tables/project-wise/project-count.js","components/dashboardProductWiseCompany/DashboardProductWiseCompany.js","routes/pages/dashboard/dashboard-tables/product-wise/product-company-count.js","components/dashboardProductWiseCountry/DashboardProductWiseCountry.js","routes/pages/dashboard/dashboard-tables/product-wise/product-country-count.js","components/dashboardCompanyWiseStatus/DashboardCompanyWiseStatus.js","routes/pages/dashboard/dashboard-tables/company-wise/company-count.js","components/dashboardCountryWiseProduct/DashboardCountryWiseProduct.js","routes/pages/dashboard/dashboard-tables/country-wise/country-product.js","components/dashboardSalesProductWiseCompany/DashboardSalesProductWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-company-sales.js","components/dashboardSalesProductWisePeriod/DashboardSalesProductWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-period-sales.js","components/dashboardSalesProductWiseCountry/DashboardSalesProductWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-country-sales.js","components/dashboardSalesCompanyWiseProduct/DashboardCompanyWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-product-sales.js","components/dashboardSalesCompanyWisePeriod/DashboardSalesCompanyWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-period-sales.js","components/dashboardSalesCompanyWiseCountry/DashboardSalesCompanyWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-country-sales.js","components/dashboardSalesCountryWiseProduct/DashboardSalesCountryWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-product-sales.js","components/dashboardSalesCountryWisePeriod/DashboardSalesCountryWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-period-sales.js","components/dashboardSalesCountryWiseCompany/DashboardSalesCountryWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-company-sales.js","components/dashboardSalesPeriodWiseProduct/DashboardSalesPeriodWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-product-sales.js","components/dashboardSalesPeriodWiseCompany/DashboardSalesPeriodWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-company-sales.js","components/dashboardSalesPeriodWiseCountry/DashboardSalesPeriodWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-country-sales.js","components/dashboardSalesPricePerPack/DashboardSalesPricePerPack.js","routes/pages/dashboard/dashboard-tables/sales-wise/price-per-pack.js","components/dashboardSalesPricePerTreatment/DashboardSalesPricePerTreatment.js","routes/pages/dashboard/dashboard-tables/sales-wise/price-per-treatment.js","routes/pages/dashboard/dashboard-tables/admin-dashboard-summary.js","routes/pages/dashboard/adminDashboard.js","appRedux/actions/PartnerDashboard.js","services/PartnerDashboard.js","components/TemplateTile/index.js","routes/pages/partner-dashboard/index.js","appRedux/actions/AdminPartner.js","services/AdminPartner.js","routes/pages/partner-list-new/index.js","routes/pages/partner-peformance/index.js","appRedux/actions/Auth.js","appRedux/actions/AdminProducts.js","services/AdminProduct.js","appRedux/actions/ProductDevelopmentTimeline.js","appRedux/actions/FilingPlans.js","services/FilingPlans.js","appRedux/actions/SalesReport.js","routes/pages/product-list/index.js","components/AdminNotifications/NotificationItem.js","components/AdminNotifications/index.js","routes/pages/development-timeline/index.js","routes/pages/filing-plans/index.js","routes/pages/sales-report/searchSelect.js","routes/pages/sales-report/sales-report-util.js","routes/pages/sales-report/productVerificationModal.js","routes/pages/sales-report/countrySelect.js","routes/pages/sales-report/index.js","routes/pages/change-password/index.js","routes/pages/add-partner/index.js","routes/pages/add-product/index.js","routes/pages/report-pdt/index.js","routes/pages/report-filing-plans/index.js","routes/pages/report-sales-report/index.js","components/profile-userInfo/AboutItem.js","components/profile-userInfo/index.js","routes/pages/profile/index.js","routes/pages/admin-settings/index.js","routes/index.js","containers/App/MainApp.js","containers/Login.js","containers/Logout.js","containers/ResetPassword.js","components/CircularProgress/index.js","containers/SetPassword.js","containers/App/index.js","util/asyncComponent.js","components/loader/index.js","NextApp.js","appRedux/reducers/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","footerText","injectIntl","props","withRef","initialSettings","navCollapsed","navStyle","layoutType","themeType","colorSelection","pathname","width","window","innerWidth","isDirectionRTL","locale","languageId","name","icon","settings","state","action","type","payload","location","INIT_STATE","error","loading","message","config","process","authConstants","roleConstants","loaderConstants","adminProductConstants","adminPartnerConstants","pdtConstants","filingPlansConstants","salesReportConstants","partnerDashboardConstants","adminDashboardConstants","showLoader","Loader","isProductAdded","isProductEdited","isProductLoaded","productList","productItem","productDetails","isLoaded","AdminProducts","data","isLoisProductLoadedaded","isPartnerAdded","isPartnerEdited","isPartnerDeleted","setCutoffSuccess","partnerList","countryList","partnerDetails","cutOffDate","AdminPartner","partnerDashboard","pdtList","pdtReportData","ProductDevelopmentTimeline","plansList","plansReportData","FilingPlans","apiSalesList","fdfSalesList","apiSalesReportData","fdfSalesReportData","SalesReport","productVerificationList","isUserLoggedIn","changePasswordSuccess","validateTokenSuccess","setPasswordSuccess","isMailSend","UserAuthentication","project_count","isProjectCountLoaded","product_company_count","isProductCompanyCountLoaded","product_country_count","isProductCountryCountLoaded","product_country_quarter_count","future_quarters","isProductCountryQuarterCountLoaded","company_count","isCompanyCountLoaded","country_product_count","isCountryProductLoaded","product_company_sales","isProductCompanySalesLoaded","product_period_sales","isProductPeriodSalesLoaded","product_country_sales","isProductCountrySalesLoaded","company_product_sales","isCompanyProductSalesLoaded","company_period_sales","isCompanyPeriodSalesLoaded","company_country_sales","isCompanyCountrySalesLoaded","country_product_sales","isCountryProductSalesLoaded","country_period_sales","isCountryPeriodSalesLoaded","country_company_sales","isCountryCompanySalesLoaded","period_product_sales","isPeriodProductSalesLoaded","period_country_sales","isPeriodCountrySalesLoaded","period_company_sales","isPeriodCompanySalesLoaded","pack_period_sales","isPackPeriodSalesLoaded","treatment_period_sales","isTreatmentPeriodSalesLoaded","admin_dashboard_summary","isAdminDashboardSummaryLoaded","setBulkReminderSuccess","AdminDashboard","isCountryProductstatusLoaded","isCountryProductStatusLoaded","history","createBrowserHistory","require","routeMiddleware","routerMiddleware","middlewares","thunk","logger","EnLang","messages","enMessages","antd","antdEn","ZhLan","zhMessages","saLang","saMessages","antdSA","AppLocale","en","enLang","zh","zhLang","ar","arLang","it","itLang","es","esLang","fr","CustomScrollbars","autoHide","renderTrackHorizontal","style","display","className","toggleCollapsedSideNav","onNavStyleChange","dispatch","switchLanguage","SidebarLogo","useDispatch","useSelector","onClick","to","alt","src","authHeader","user","JSON","parse","localStorage","getItem","access","showMessage","msgTxt","success","info","warning","getRole","role","getQuarter","curr_quarter","getUserDetails","username","exportToXLXS","fileData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","showConfirm","title","onSuccess","Modal","confirm","okText","cancelText","onOk","onCancel","statusArray","id","monthArray","formulationType","currencyList","countryCodeList","SidebarContent","useState","isUserAdmin","setIsUserAdmin","isUserStaff","setIsUserStaff","getNavStyleSubMenuClass","selectedKeys","substr","defaultOpenKeys","split","length","getMenuItems","key","link","name_id","UsergroupAddOutlined","MedicineBoxOutlined","FileSearchOutlined","BarChartOutlined","displayMenuItems","itemsArray","map","value","Item","IntlMessages","useEffect","theme","mode","menuItems","SubMenu","popupClassName","submenuItems","LockOutlined","splice","getProfileMenuItems","LogoutOutlined","Sider","Layout","Sidebar","addEventListener","updateWindowWidth","drawerStyle","trigger","collapsed","collapsible","placement","closable","onClose","visible","languageData","SearchBox","styleName","placeholder","onChange","defaultProps","UserInfo","userMenuOptions","overlayClassName","content","NotificationItem","notification","image","time","notifications","Auxiliary","children","AppNotification","index","badge","MailNotification","Menu","MenuItemGroup","ItemGroup","HorizontalNav","Header","Option","Select","menu","e","handleChange","console","log","HorizontalDefault","searchText","setSearchText","updateSearchChatUser","evt","target","defaultValue","overlay","Icon","language","stringify","HorizontalDark","connect","AboveHeader","BelowHeader","Topbar","Auth","WrappedComponent","Roles","isAuthorized","setIsAuthorized","userRole","filter","push","handleResponse","response","text","then","ok","status","Promise","reject","removeItem","reload","url","indexOf","detail","replace","statusText","adminPostPDT","quarter_name","requestOptions","method","headers","body","fetch","getSalesReport","postSalesReport","adminGetSalesReport","adminPostSalesReport","getConsolidatedSalesReport","downloadConsolidatedSalesReport","requestObj","responseType","blob","getSales","map_with","endpoint","concat","hideLoader","projectCount","getProjectCount","catch","productCompanyCount","getProductCompanyCount","productCountryCount","getProductCountryCount","companyCount","getCompanyCount","countryProduct","getCountryProduct","productPeriodSales","period","companyPeriodSales","countryPeriodSales","adminDashboardSummary","getDashboardSummary","bulkReminderMail","sendReminderBulkMail","Widget","cover","extra","actions","DashboardCountProjects","count","cardColor","dataStatus","imgHold","imgUnderDevelopment","imgDropped","imgFiled","imgApproved","toLowerCase","AdminDashboardProjectCount","setData","adminDashboard","projectCountList","rowData","span","xs","description","columns","dataIndex","fixed","DashboardProductWise","disabled","val","omit","DownloadOutlined","dataSource","scroll","y","bordered","size","AdminDashboardProductCompanyCount","productComapnyCountList","product_id","product_name","UNDER_DEVELOPMENT","DROPPED","ON_HOLD","FILED","APPROVED","DashboardProductWiseCompany","DashboardProductWiseCountry","updateStatus","AdminDashboardProductCountryCount","setColumns","productCountryList","futureQuarters","setStatus","AdminDashboardCompanyCount","comapnyCountList","partner_id","company_name","DashboardCompanyWiseStatus","DashboardCountryWiseProduct","AdminDashboardCountryProduct","List","setType","temp_id","country_name","no_of_partners","DashboardSalesProductWiseCompany","AdminDashboardProductCompanySales","productCompanySalesList","company_id","total_value","DashboardSalesProductWisePeriod","AdminDashboardProductPeriodSales","productPeriodSalesList","setPeriod","year","month","quarter","DashboardSalesProductWiseCountry","AdminDashboardProductCountrySales","country_id","DashboardSalesCompanyWiseProduct","AdminDashboardCompanyProductSales","DashboardSalesCompanyWisePeriod","AdminDashboardCompanyPeriodSales","DashboardSalesCompanyWiseCountry","AdminDashboardCompanyCountrySales","DashboardSalesCountryWiseProduct","AdminDashboardCountryProductSales","DashboardSalesCountryWisePeriod","AdminDashboardCountryPeriodSales","DashboardSalesCountryWiseCompany","AdminDashboardCountryCompanySales","DashboardSalesPeriodWiseProduct","AdminDashboardPeriodProductSales","DashboardSalesPeriodWiseCompany","AdminDashboardPeriodCompanySales","DashboardSalesPeriodWiseCountry","AdminDashboardPeriodCountrySales","DashboardSalesPricePerPack","AdminDashboardPackPeriodSales","packPeriodSales","price_per_pack","Number","DashboardSalesPricePerTreatment","AdminDashboardTreatmentPeriodSales","treatmentPeriodSales","price_per_treatment","AdminDashboardSummary","showName","setShowName","columnData","partner","company_email","email","render","navigateToPdt","navigateToFilingPlans","navigateToSalesReport","template_data","showPDT","showFilingPlan","showSales","obj","template_type","is_approved","item","temp","not_submitted","report_status","BellOutlined","TabPane","Tabs","tabPosition","tab","getPartnerDashboardAction","getPartnerDashboard","TemplateTile","no_of_days_to_submit","last_message","moment","format","PartnerDashboard","adminAddPartner","addPartner","errorMsg","adminEditPartner","editPartner","getAdminPartnerList","getPartnerList","getAdminSinglePartner","getPartner","deleteAdminSinglePartner","deletePartner","adminSendReminder","sendReportReminder","resetEditPartner","getAdminCountryList","getRegionList","adminSetCutOffDate","date","setReportCutOffDate","adminGetCutOffDate","getReportCutOffDate","PartnerList","adminPartner","adminPartnerList","setSearchedColumn","searchInput","useRef","active_products","pdt","getTemplateData","filing_plans","sales_report","templateList","templateData","findIndex","handleSearch","renderTemplateData","viewReport","sendReminder","templateName","has","submission_time","updated_at","InfoCircleTwoTone","twoToneColor","checked","CheckCircleTwoTone","CloseCircleTwoTone","EyeTwoTone","BellTwoTone","showDeletePartner","toUpperCase","filterDropdown","setSelectedKeys","clearFilters","padding","ref","onPressEnter","marginBottom","SearchOutlined","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","includes","onFilterDropdownVisibleChange","sorter","a","b","localeCompare","products","align","alignItems","navigateToContent","EditTwoTone","DeleteTwoTone","PartnerPerformance","userLogin","password","login","setItem","userChangePassword","changePassword","validateToken","token","tokenValidate","setPassword","passwordSet","userForgetPassword","forgotPassword","adminAddProduct","addProduct","adminEditProduct","editProduct","getAdminProductList","showRecent","getProductList","getAdminProduct","getProduct","deleteAdminProduct","deleteProduct","getAdminProductDetails","getProductDetails","resetProduct","getPdtData","getPDT","getAdminPDTReport","getPDTReport","downloadPDTReport","filename","downloadpdtReport","postPdtData","postPDT","getAdminPdtData","adminGetPDT","postAdminPdtData","approvePDTReport","approvePDT","submitPDTReport","submitPDT","partnerMarkMessageRead","markPDTMessageRead","getFilingPlansData","getFilingPlans","getAdminFilingPlansReport","getFilingPlansReport","downloadFilingReport","downloadFilingPlansReport","postFilingPlansData","postFilingPlans","getAdminFilingPlansData","adminGetFilingPlans","postAdminFilingPlansData","adminPostFilingPlans","approveFilingPlansReport","approveFilingPlans","submitFilingPlansReport","submitFilingPlans","partnerMarkFilingPlansMessageRead","markFilingPlansMessageRead","getApiSalesData","getFdfSalesData","postApiSalesReportData","postFdfSalesReportData","getAdminApiSalesData","getAdminFdfSalesData","postAdminApiSalesData","postAdminFdfSalesData","approveSalesReportData","approveSalesReport","submitSalesReportData","submitSalesReport","partnerMarkSalesReportMessageRead","markSalesReportMessageRead","getAdminProductsToBeVerified","getProductsToBeVerified","postAdminProductsToBeVerified","postProductsToBeVerified","ProductList","adminProducts","adminProductList","filteredInfo","category","therapyArea","therapy_area","ellipsis","filters","filteredValue","navigateToEditProduct","showDeleteProduct","isAdmin","created_at","is_partner_message","UserOutlined","AdminNotifications","getDatePicker","Datepicker","prototype","init","params","this","eInput","document","createElement","classList","add","height","$","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","DevelopmentTimeline","isDataReady","setIsDataReady","showReport","setShowReport","reportDetails","setReportDetails","setQuarterEditDetails","messageCount","setMessageCount","partnerId","setPartnerId","gridApi","setGridApi","setRowData","quarterDropdown","setQuarterDropdown","quarterDropdownCurrent","setQuarterDropdownCurrent","isHistoricQuarter","setIsHistoricQuarter","isNotInitial","setIsNotInitial","flag","setFlag","quarterOrder","setQuarterOrder","headerName","field","editable","rowGroup","hide","columnDefs","setColumnDefs","Form","useForm","form","setPDT","addQuarter","navigateBack","match","setValues","rows","quarter_order","unread_message_count","pdt_meta","quarter_editable","isEmpty","quarter_dropdown","quarterNumber","column","cellClass","cellEditorSelector","component","values","cellClassRules","i","cellEditor","checkDate","sortable","forEachNode","node","product","setExpanded","handleUndefinedValues","tempRowData","forEach","hasOwnProperty","stage_id","checkRow","statusFlag","dateFlag","Object","keys","some","saveReportBeforeAction","callback","stopEditing","selectAll","selectedNodes","getSelectedNodes","d","deselectAll","product_status","notes","start_date_name","end_date_name","start_date","end_date","saveData","approver","msg","isApproved","resetFields","showCommentsForm","layout","rules","required","TextArea","downloadExcel","exportDataAsExcel","sheetName","changeQuarter","LeftOutlined","partner_name","approval_time","displayHeader","CheckCircleOutlined","close","validateFields","commentData","CloseCircleOutlined","MailOutlined","displayCTA","innerHeight","paddingBottom","onGridReady","api","defaultColGroupDef","marryChildren","defaultColDef","resizable","autoGroupColumnDef","minWidth","suppressRowTransform","enableRangeSelection","enableCellChangeFlash","onCellValueChanged","colDef","newValue","oldValue","rowNode","getRowNode","fieldNameList","setDataValue","animateRows","components","datePicker","setProductList","apiStatusArray","setApiStatusArray","fdfStatusArray","setFdfStatusArray","valueGetter","filingPlans","setFilingPlans","rowValue","product_details","filing_meta","status_dropdown","slice","product_type","apiFlag","fdfFlag","SearchSelect","forwardRef","optionValue","setOptionValue","editing","setEditing","productNameList","setProductNameList","refContainer","productSelect","selectValues","tempSelectValues","useImperativeHandle","setTimeout","container","ReactDOM","findDOMNode","current","tabIndex","showSearch","showArrow","allowClear","onSelect","onSearch","tempProductList","initRowData","rowValueList","suppressEnter","event","which","ProductVerificationModal","hideVerificationModal","setSalesReport","verificationForm","salesReport","toBeVerifiedProductList","setToBeVerifiedProductList","pending_products","existing_products","handleProductSearch","footer","pick","initialValues","onValuesChange","newValueList","fields","remove","validateTrigger","label","fieldKey","tempToBeVerifiedProductList","does_product_exist","setFieldsValue","handleProductSelect","Group","buttonStyle","Button","CountrySelect","onClear","isFdfInitialized","setIsFdfInitialized","areApiRowsSelected","setAreApiRowsSelected","areFdfRowsSelected","setAreFdfRowsSelected","deleteApiIds","setDeleteApiIds","deleteFdfIds","setDeleteFdfIds","addApiRowNumber","setAddApiRowNumber","addFdfRowNumber","setAddFdfRowNumber","showVerificationModal","setShowVerificationModal","pendingProducts","setPendingProducts","apiGridApi","setApiGridApi","fdfGridApi","setFdfGridApi","ApiRowData","setApiRowData","FdfRowData","setFdfRowData","ApiColumnDefs","setApiColumnDefs","FdfColumnDefs","setFdfColumnDefs","countryOrder","setCountryOrder","countryDropdown","setCountryDropdown","apiProductOrder","setApiProductOrder","apiProductDropdown","setApiProductDropdown","fdfProductOrder","setFdfProductOrder","fdfProductDropdown","setFdfProductDropdown","yearDropdown","setYearDropdown","monthDropdown","setMonthDropdown","tabKey","setTabKey","addApiColumns","addFdfColumns","refreshCells","apiData","setApiValues","sales_meta","fdfData","setFdfValues","country_order","product_order","pending_product_count","currentYear","Date","yearArray","unshift","yearList","apiColumns","checkboxSelection","headerCheckboxSelection","isNaN","suppressKeyboardEvent","valueParser","fdfColumns","checkApiRowNodes","dataList","checkApiRow","errorData","errorIndex","apiErrorList","errorkeys","errorKey","rowNo","checkFdfRowNodes","checkFdfRow","fdfErrorList","checkNullRow","saveApiData","selectedApiNodes","nodeData","finalApiData","apiUpdatedRows","Math","abs","saveFdfData","selectedFdfNodes","finalFdfData","fdfUpdatedRows","active_product_id","columnKeys","setReportHeight","viewVerificationModal","showIcon","displayProductVerification","tabBarExtraContent","displayGridCta","currentTabKey","rowSelection","suppressRowClickSelection","onSelectionChanged","join","frameworkComponents","searchSelector","countrySelector","min","max","rowIndexList","tempDeleteIds","sales_report_id","finalData","suppressAggFuncInHeader","rowIndex","displayVerificationModal","FormItem","ChangePassword","authentication","remember","onFinish","onFinishFailed","errorInfo","pattern","Password","dependencies","hasFeedback","getFieldValue","validator","rule","resolve","htmlType","formItemLayout","labelCol","sm","wrapperCol","AddPartner","editFlag","setEditFlag","partnerEmployeeData","setPartnerEmployeeData","path","employee","contact","contact_number","prefix","substring","address","region","setEmployeeData","employee_id","prefixSelector","noStyle","optionFilterProp","filterOption","sortBy","code","goBack","editData","first_name","last_name","scrollToFirstError","len","addonBefore","MinusCircleOutlined","margin","PlusOutlined","AddProduct","PDTReport","setRows","total","setTotal","page_number","page_size","setRequestObj","total_rows","filter_options","partner_filter","product_filter","stage_filter","status_filter","dataCols","stage","pagination","pageSize","company","stages","FilingPlansReport","country_filter","country","x","product_status_dict","ConsolidatedSalesReport","apiRows","setApiRows","setApiColumns","fdfRows","setFdfRows","setFdfColumn","apitotal","setApiTotal","fdftotal","setFdfTotal","apiRequestObj","setApiRequestObj","fdfRequestObj","setFdfRequestObj","getAdminConsolidatedFdfReport","quarter_filter","year_filter","month_filter","purchaser_filter","quarter_id","purchaser","strength_filter","formulation_md_filter","currency_filter","procurement_end_country_filter","comments_filter","strength","formulation_md","currency","procurement_end_country","comments","downloadApiSalesReport","downloadFdfSalesReport","AboutItem","desc","userList","descClass","About","aboutList","about","xl","lg","md","UserProfilePage","userDetails","setUserDetails","getUserInfo","AdminSettings","cut_off_date","AdminDashboardPage","PartnerDashboardPage","ChangePasswordPage","AdminProfilePage","PartnerProfilePage","PartnerListNewPage","PartnerListNew","AddPartnerPage","PartnerPerformancePage","ProductListPage","AddProductPage","DevelopmentTimelinePage","FilingPlansPage","SalesReportPage","PDTReportPage","FilingPlansReportPage","ConsolidatedSalesReportPage","AdminSettingsPage","NotFoundRedirect","App","exact","Component","Content","MainApp","Footer","getSidebar","getNavStyles","getContainerClass","Login","isLoggedIn","navigatePostLogin","href","position","right","top","background","trim","valuePropName","Logout","ResetPassword","isResetToken","setIsResetToken","URLSearchParams","search","get","CircularProgress","loader","SetPassword","navigatePostSetPassword","RestrictedRoute","authUser","rest","from","setThemeType","onLayoutTypeChange","setLayoutType","setNavStyle","importComponent","currentAppLocale","Nprogress","start","mounted","default","done","setState","ready","store","preloadedState","createStore","combineReducers","router","connectRouter","Settings","commonData","Common","compose","applyMiddleware","configureStore","NextApp","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","URL","origin","unregister","checkValidServiceWorker","registerServiceWorker","getElementById"],"mappings":"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ACP,IAAO,OACP,IAAO,gBACP,IAAO,yBACP,IAAO,yBACP,IAAO,gBACP,IAAO,iBACP,IAAO,gBACP,IAAO,kBACP,IAAO,iBACP,IAAO,gBACP,IAAO,qBACP,IAAO,mBACP,IAAO,mBACP,IAAO,mBACP,IAAO,gBACP,IAAO,iBACP,IAAO,mBACP,IAAO,oBACP,IAAO,qBACP,IAAO,aACP,IAAO,eACP,IAAO,cACP,IAAO,eACP,IAAO,qBACP,IAAO,eACP,IAAO,kBACP,IAAO,kBACP,IAAO,eACP,IAAO,kBACP,IAAO,iBACP,IAAO,iBACP,IAAO,iBACP,IAAO,mBACP,IAAO,mBACP,IAAO,gBACP,IAAO,wBACP,IAAO,oBACP,IAAO,cACP,IAAO,iBACP,IAAO,mBACP,IAAO,kBACP,IAAO,eACP,IAAO,eACP,IAAO,kBACP,IAAO,eACP,IAAO,kBACP,IAAO,mBACP,IAAO,cACP,IAAO,mBACP,IAAO,kBACP,IAAO,iCACP,IAAO,sBACP,IAAO,kBACP,IAAO,oBACP,IAAO,kBACP,IAAO,eACP,IAAO,oBACP,IAAO,qBACP,IAAO,kBACP,IAAO,iBACP,IAAO,wBACP,IAAO,kBACP,IAAO,iBACP,IAAO,qBACP,IAAO,aACP,IAAO,oBACP,IAAO,qBACP,IAAO,yBACP,IAAO,kBACP,IAAO,kBACP,IAAO,eACP,IAAO,qBACP,IAAO,cACP,IAAO,eACP,IAAO,gBACP,IAAO,gBACP,IAAO,gBACP,IAAO,cACP,IAAO,yBACP,IAAO,oBACP,IAAO,iBACP,IAAO,gBACP,IAAO,mBACP,IAAO,qBACP,IAAO,uBACP,IAAO,kBACP,IAAO,oBACP,IAAO,uBACP,IAAO,kDACP,IAAO,uCACP,IAAO,sBACP,IAAO,eACP,IAAO,kBACP,IAAO,YACP,IAAO,qBACP,IAAO,sBACP,IAAO,iBACP,IAAO,iBACP,IAAO,eACP,IAAO,6BACP,IAAO,oBACP,IAAO,qBACP,IAAO,oBACP,IAAO,mBACP,IAAO,uBACP,IAAO,iBACP,IAAO,iBACP,IAAO,qCACP,IAAO,iCACP,IAAO,kBACP,IAAO,eA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","file":"static/js/main.c677a2e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/w-logo.af2ab8c1.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-white.9248e77a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.9248e77a.png\";","module.exports = __webpack_public_path__ + \"static/media/under-development.ac04705d.svg\";","module.exports = __webpack_public_path__ + \"static/media/hold.3adcbbb6.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropped.25847be3.svg\";","module.exports = __webpack_public_path__ + \"static/media/filed.9c472e83.svg\";","module.exports = __webpack_public_path__ + \"static/media/approved.a5cfac5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.65fd4092.svg\";","module.exports = __webpack_public_path__ + \"static/media/mpp_logo_white.9248e77a.png\";","module.exports = {\n  footerText: 'Copyright Medicines Patent Pool © 2020',\n}\n","import React from \"react\";\nimport {FormattedMessage, injectIntl} from \"react-intl\";\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\nexport default injectIntl(InjectMassage, {\n  withRef: false\n});\n","import { SWITCH_LANGUAGE, TOGGLE_COLLAPSED_NAV, WINDOW_WIDTH } from \"constants/ActionTypes\";\nimport {\n  LAYOUT_TYPE,\n  LAYOUT_TYPE_FULL,\n  NAV_STYLE,\n  NAV_STYLE_MINI_SIDEBAR,\n  THEME_COLOR_SELECTION,\n  THEME_COLOR_SELECTION_PRESET,\n  THEME_TYPE,\n  THEME_TYPE_LITE,\n  THEME_TYPE_SEMI_DARK\n} from \"../../constants/ThemeSetting\";\n\nconst initialSettings = {\n  navCollapsed: true,\n  navStyle: NAV_STYLE_MINI_SIDEBAR,\n  layoutType: LAYOUT_TYPE_FULL,\n  themeType: THEME_TYPE_SEMI_DARK,\n  colorSelection: THEME_COLOR_SELECTION_PRESET,\n\n  pathname: '',\n  width: window.innerWidth,\n  isDirectionRTL: false,\n  locale: {\n    languageId: 'english',\n    locale: 'en',\n    name: 'English',\n    icon: 'us'\n  }\n};\n\nconst settings = (state = initialSettings, action) => {\n  switch (action.type) {\n    case '@@router/LOCATION_CHANGE':\n      return {\n        ...state,\n        pathname: action.payload.location.pathname,\n        navCollapsed: false\n      };\n    case TOGGLE_COLLAPSED_NAV:\n      return {\n        ...state,\n        navCollapsed: action.navCollapsed\n      };\n    case WINDOW_WIDTH:\n      return {\n        ...state,\n        width: action.width,\n      };\n    case THEME_TYPE:\n      return {\n        ...state,\n        themeType: action.themeType\n      };\n    case THEME_COLOR_SELECTION:\n      return {\n        ...state,\n        colorSelection: action.colorSelection\n      };\n\n    case NAV_STYLE:\n      return {\n        ...state,\n        navStyle: action.navStyle\n      };\n    case LAYOUT_TYPE:\n      return {\n        ...state,\n        layoutType: action.layoutType\n      };\n\n    case SWITCH_LANGUAGE:\n      return {\n        ...state,\n        locale: action.payload,\n\n      };\n    default:\n      return state;\n  }\n};\n\nexport default settings;\n","// Customizer const\nexport const THEME_TYPE = 'THEME_TYPE';\nexport const THEME_TYPE_LITE = 'THEME_TYPE_LITE';\nexport const THEME_TYPE_DARK = 'THEME_TYPE_DARK';\nexport const THEME_TYPE_SEMI_DARK = 'THEME_TYPE_SEMI_DARK';\nexport const THEME_COLOR = 'THEME_COLOR';\n\n\nexport const THEME_COLOR_SELECTION = 'THEME_COLOR_SELECTION';\nexport const THEME_COLOR_SELECTION_PRESET = 'THEME_COLOR_SELECTION_PRESET';\nexport const THEME_COLOR_SELECTION_CUSTOMIZE = 'THEME_COLOR_SELECTION_CUSTOMIZE';\n\nexport const HORIZONTAL_NAVIGATION = 'HORIZONTAL_NAVIGATION';\n\nexport const HORIZONTAL_MENU_POSITION = 'HORIZONTAL_MENU_POSITION';\nexport const ABOVE_THE_HEADER = 'ABOVE_THE_HEADER';\nexport const INSIDE_THE_HEADER = 'INSIDE_THE_HEADER';\nexport const BELOW_THE_HEADER = 'BELOW_THE_HEADER';\n\nexport const VERTICAL_NAVIGATION = 'VERTICAL_NAVIGATION';\nexport const NAV_STYLE_MINI = 'NAV_STYLE_MINI';\n\nexport const LAYOUT_TYPE = 'LAYOUT_TYPE';\n\nexport const LAYOUT_TYPE_FRAMED = 'LAYOUT_TYPE_FRAMED';\nexport const LAYOUT_TYPE_BOXED = 'LAYOUT_TYPE_BOXED';\nexport const LAYOUT_TYPE_FULL = 'LAYOUT_TYPE_FULL';\n\n\nexport const NAV_STYLE = 'NAV_STYLE';\n\nexport const NAV_STYLE_FIXED = 'NAV_STYLE_FIXED';\nexport const NAV_STYLE_MINI_SIDEBAR = 'NAV_STYLE_MINI_SIDEBAR';\nexport const NAV_STYLE_CUSTOM_MINI_SIDEBAR = 'NAV_STYLE_CUSTOM_MINI_SIDEBAR';\nexport const NAV_STYLE_DRAWER = 'NAV_STYLE_DRAWER';\nexport const NAV_STYLE_NO_HEADER_MINI_SIDEBAR = 'NAV_STYLE_NO_HEADER_MINI_SIDEBAR';\nexport const NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR = 'NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR';\n\nexport const NAV_STYLE_DEFAULT_HORIZONTAL = 'NAV_STYLE_DEFAULT_HORIZONTAL';\nexport const NAV_STYLE_DARK_HORIZONTAL = 'NAV_STYLE_DARK_HORIZONTAL';\nexport const NAV_STYLE_INSIDE_HEADER_HORIZONTAL = 'NAV_STYLE_INSIDE_HEADER_HORIZONTAL';\nexport const NAV_STYLE_BELOW_HEADER = 'NAV_STYLE_BELOW_HEADER';\nexport const NAV_STYLE_ABOVE_HEADER = 'NAV_STYLE_ABOVE_HEADER';\n\n\nexport const LIGHT_PURPLE = '#8A2BE2';\nexport const LIGHT_PURPLE_SEC = '#00B378';\nexport const LIGHT_PURPLE_NAV_DARK_BG = '#32394F';\nexport const LIGHT_PURPLE_DARK_TEXT_COLOR = '#9799AC';\n\nexport const RED = '#FF2B7A';\nexport const RED_SEC = '#00D9C9';\nexport const RED_NAV_DARK_BG = '#3C3766';\nexport const RED_DARK_TEXT_COLOR = '#878BAB';\n\nexport const BLUE = '#3DA4E6';\nexport const BLUE_SEC = '#FCB53B';\nexport const BLUE_NAV_DARK_BG = '#444342';\nexport const BLUE_DARK_TEXT_COLOR = '#AAA59A';\n\nexport const DARK_BLUE = '#0469B9';\nexport const DARK_BLUE_SEC = '#17BDE5';\nexport const DARK_BLUE_NAV_DARK_BG = '#086880';\nexport const DARK_BLUE_DARK_TEXT_COLOR = '#9DDAE9';\n\nexport const ORANGE = '#F18805';\nexport const ORANGE_SEC = '#F1D065';\nexport const ORANGE_NAV_DARK_BG = '#272932';\nexport const ORANGE_DARK_TEXT_COLOR = '#ABA895';\n\nexport const LIGHT_BLUE = '#6A95FF';\nexport const LIGHT_BLUE_SEC = '#59DCFF';\nexport const LIGHT_BLUE_NAV_DARK_BG = '#1B2642';\nexport const LIGHT_BLUE_DARK_TEXT_COLOR = '#92A2C8';\n\n\nexport const DEEP_ORANGE = '#F87060';\nexport const DEEP_ORANGE_SEC = '#70A288';\nexport const DEEP_ORANGE_NAV_DARK_BG = '#08415C';\nexport const DEEP_ORANGE_DARK_TEXT_COLOR = '#97B8C7';\n\nexport const LIGHT_PURPLE_1 = '#A172E7';\nexport const LIGHT_PURPLE_1_SEC = '#E14594';\nexport const LIGHT_PURPLE_1_NAV_DARK_BG = '#182952';\nexport const LIGHT_PURPLE_1_DARK_TEXT_COLOR = '#8288B4';\n\nexport const LIGHT_PURPLE_2 = '#956FE7';\nexport const LIGHT_PURPLE_2_SEC = '#64D7D6';\nexport const LIGHT_PURPLE_2_NAV_DARK_BG = '#284C7C';\nexport const LIGHT_PURPLE_2_DARK_TEXT_COLOR = '#5782BB';\n\n\nexport const TAB_SIZE = 992;\n","// Customizer const\nexport const TOGGLE_COLLAPSED_NAV = 'TOGGLE_COLLAPSE_MENU';\nexport const WINDOW_WIDTH = 'WINDOW-WIDTH';\nexport const SWITCH_LANGUAGE = 'SWITCH-LANGUAGE';\n\n//Contact Module const\nexport const FETCH_START = 'fetch_start';\nexport const FETCH_SUCCESS = 'fetch_success';\nexport const FETCH_ERROR = 'fetch_error';\nexport const SHOW_MESSAGE = 'SHOW_MESSAGE';\nexport const HIDE_MESSAGE = 'HIDE_MESSAGE';\nexport const ON_SHOW_LOADER = 'ON_SHOW_LOADER';\nexport const ON_HIDE_LOADER = 'ON_HIDE_LOADER';\n\n//Auth const\nexport const SIGNUP_USER = 'SIGNUP_USER';\nexport const SIGNUP_USER_SUCCESS = 'SIGNUP_USER_SUCCESS';\nexport const SIGNIN_GOOGLE_USER = 'SIGNIN_GOOGLE_USER';\nexport const SIGNIN_GOOGLE_USER_SUCCESS = 'SIGNIN_GOOGLE_USER_SUCCESS';\nexport const SIGNIN_FACEBOOK_USER = 'SIGNIN_FACEBOOK_USER';\nexport const SIGNIN_FACEBOOK_USER_SUCCESS = 'SIGNIN_FACEBOOK_USER_SUCCESS';\nexport const SIGNIN_TWITTER_USER = 'SIGNIN_TWITTER_USER';\nexport const SIGNIN_TWITTER_USER_SUCCESS = 'SIGNIN_TWITTER_USER_SUCCESS';\nexport const SIGNIN_GITHUB_USER = 'SIGNIN_GITHUB_USER';\nexport const SIGNIN_GITHUB_USER_SUCCESS = 'signin_github_user_success';\nexport const SIGNIN_USER = 'SIGNIN_USER';\nexport const SIGNIN_USER_SUCCESS = 'SIGNIN_USER_SUCCESS';\nexport const SIGNOUT_USER = 'SIGNOUT_USER';\nexport const SIGNOUT_USER_SUCCESS = 'SIGNOUT_USER_SUCCESS';\nexport const INIT_URL = 'INIT_URL';\nexport const USER_DATA = 'user_data';\nexport const USER_TOKEN_SET = 'user_token_set';\n\n","import {FETCH_ERROR, FETCH_START, FETCH_SUCCESS, HIDE_MESSAGE, SHOW_MESSAGE} from '../../constants/ActionTypes'\n\nconst INIT_STATE = {\n  error: \"\",\n  loading: false,\n  message: ''\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {...state, error: '', message: '', loading: true};\n    }\n    case FETCH_SUCCESS: {\n      return {...state, error: '', message: '', loading: false};\n    }\n    case SHOW_MESSAGE: {\n      return {...state, error: '', message: action.payload, loading: false};\n    }\n    case FETCH_ERROR: {\n      return {...state, loading: false, error: action.payload, message: ''};\n    }\n    case HIDE_MESSAGE: {\n      return {...state, loading: false, error: '', message: ''};\n    }\n    default:\n      return state;\n  }\n}\n","export const config = {\n    API_URL: process.env.REACT_APP_API_ENDPOINT,\n    // API_URL: 'http://3.6.94.126:8000/api',\n}\n\nexport const sentryData = {\n    SENTRY_DSN: \"https://7384d5f97c8c430b9818607c6929631b@o445214.ingest.sentry.io/5421223\",\n}","export const authConstants = {\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\n\n    LOGOUT_SUCCESS: 'LOGOUT_SUCCESS',\n\n    CHANGE_PASSWORD_REQUEST: 'CHANGE_PASSWORD_REQUEST',\n    CHANGE_PASSWORD_SUCCESS: 'CHANGE_PASSWORD_SUCCESS',\n    CHANGE_PASSWORD_FAILURE: 'CHANGE_PASSWORD_FAILURE',\n\n    FORGOT_PASSWORD_REQUEST: 'FORGOT_PASSWORD_REQUEST',\n    FORGOT_PASSWORD_SUCCESS: 'FORGOT_PASSWORD_SUCCESS',\n    FORGOT_PASSWORD_FAILURE: 'FORGOT_PASSWORD_FAILURE',\n\n    VALIDATE_TOKEN_REQUEST: 'VALIDATE_TOKEN_REQUEST',\n    VALIDATE_TOKEN_SUCCESS: 'VALIDATE_TOKEN_SUCCESS',\n    VALIDATE_TOKEN_FAILURE: 'VALIDATE_TOKEN_FAILURE',\n\n    SET_PASSWORD_REQUEST: 'SET_PASSWORD_REQUEST',\n    SET_PASSWORD_SUCCESS: 'SET_PASSWORD_SUCCESS',\n    SET_PASSWORD_FAILURE: 'SET_PASSWORD_FAILURE',\n};\n\n\nexport const roleConstants = {\n    ADMIN: 'ADMIN',\n    PARTNER: 'PARTNER',\n    STAFF: 'STAFF'\n}","export const loaderConstants = {\n    SHOW_LOADER: 'SHOW_LOADER',\n    HIDE_LOADER: 'HIDE_LOADER'\n};","export const adminProductConstants = {\n    ADD_PRODUCT_REQUEST: 'ADD_PRODUCT_REQUEST',\n    ADD_PRODUCT_SUCCESS: 'ADD_PRODUCT_SUCCESS',\n    ADD_PRODUCT_FAILURE: 'ADD_PRODUCT_FAILURE',\n\n    EDIT_PRODUCT_REQUEST: 'EDIT_PRODUCT_REQUEST',\n    EDIT_PRODUCT_SUCCESS: 'EDIT_PRODUCT_SUCCESS',\n    EDIT_PRODUCT_FAILURE: 'EDIT_PRODUCT_FAILURE',\n\n    GET_PRODUCT_LIST_REQUEST: 'GET_PRODUCT_LIST_REQUEST',\n    GET_PRODUCT_LIST_SUCCESS: 'GET_PRODUCT_LIST_SUCCESS',\n    GET_PRODUCT_LIST_FAILURE: 'GET_PRODUCT_LIST_FAILURE',\n\n    GET_PRODUCT_REQUEST: 'GET_PRODUCT_REQUEST',\n    GET_PRODUCT_SUCCESS: 'GET_PRODUCT_SUCCESS',\n    GET_PRODUCT_FAILURE: 'GET_PRODUCT_FAILURE',\n\n    DELETE_PRODUCT_REQUEST: 'DELETE_PRODUCT_REQUEST',\n    DELETE_PRODUCT_SUCCESS: 'DELETE_PRODUCT_SUCCESS',\n    DELETE_PRODUCT_FAILURE: 'DELETE_PRODUCT_FAILURE',\n\n    GET_PRODUCT_DETAILS_REQUEST: 'GET_PRODUCT_DETAILS_REQUEST',\n    GET_PRODUCT_DETAILS_SUCCESS: 'GET_PRODUCT_DETAILS_SUCCESS',\n    GET_PRODUCT_DETAILS_FAILURE: 'GET_PRODUCT_DETAILS_FAILURE',\n\n    RESET_PRODUCT: 'RESET_PRODUCT'\n};","export const adminPartnerConstants = {\n    ADD_PARTNER_REQUEST: 'ADD_PARTNER_REQUEST',\n    ADD_PARTNER_SUCCESS: 'ADD_PARTNER_SUCCESS',\n    ADD_PARTNER_FAILURE: 'ADD_PARTNER_FAILURE',\n\n    EDIT_PARTNER_REQUEST: 'EDIT_PARTNER_REQUEST',\n    EDIT_PARTNER_SUCCESS: 'EDIT_PARTNER_SUCCESS',\n    EDIT_PARTNER_FAILURE: 'EDIT_PARTNER_FAILURE',\n\n    GET_PARTNER_LIST_REQUEST: 'GET_PARTNER_LIST_REQUEST',\n    GET_PARTNER_LIST_SUCCESS: 'GET_PARTNER_LIST_SUCCESS',\n    GET_PARTNER_LIST_FAILURE: 'GET_PARTNER_LIST_FAILURE',\n\n    GET_PARTNER_REQUEST: 'GET_PARTNER_REQUEST',\n    GET_PARTNER_SUCCESS: 'GET_PARTNER_SUCCESS',\n    GET_PARTNER_FAILURE: 'GET_PARTNER_FAILURE',\n\n    DELETE_PARTNER_REQUEST: 'DELETE_PARTNER_REQUEST',\n    DELETE_PARTNER_SUCCESS: 'DELETE_PARTNER_SUCCESS',\n    DELETE_PARTNER_FAILURE: 'DELETE_PARTNER_FAILURE',\n\n    SEND_REMINDER_REQUEST: 'SEND_REMINDER_REQUEST',\n    SEND_REMINDER_SUCCESS: 'SEND_REMINDER_SUCCESS',\n    SEND_REMINDER_FAILURE: 'SEND_REMINDER_FAILURE',\n\n    RESET_EDIT_PARTNER: 'RESET_EDIT_PARTNER',\n\n    GET_COUNTRY_LIST_REQUEST: 'GET_COUNTRY_LIST_REQUEST',\n    GET_COUNTRY_LIST_SUCCESS: 'GET_COUNTRY_LIST_SUCCESS',\n    GET_COUNTRY_LIST_FAILURE: 'GET_COUNTRY_LIST_FAILURE',\n\n    SET_CUT_OFF_DATE_REQUEST: 'SET_CUT_OFF_DATE_REQUEST',\n    SET_CUT_OFF_DATE_SUCCESS: 'SET_CUT_OFF_DATE_SUCCESS',\n    SET_CUT_OFF_DATE_FAILURE: 'SET_CUT_OFF_DATE_FAILURE',\n\n    GET_CUT_OFF_DATE_REQUEST: 'GET_CUT_OFF_DATE_REQUEST',\n    GET_CUT_OFF_DATE_SUCCESS: 'GET_CUT_OFF_DATE_SUCCESS',\n    GET_CUT_OFF_DATE_FAILURE: 'GET_CUT_OFF_DATE_FAILURE'\n};","export const pdtConstants = {\n    GET_PDT_REQUEST: 'GET_PDT_REQUEST',\n    GET_PDT_SUCCESS: 'GET_PDT_SUCCESS',\n    GET_PDT_FAILURE: 'GET_PDT_FAILURE',\n\n    GET_PDT_REPORT_REQUEST: 'GET_PDT_REPORT_REQUEST',\n    GET_PDT_REPORT_SUCCESS: 'GET_PDT_REPORT_SUCCESS',\n    GET_PDT_REPORT_FAILURE: 'GET_PDT_REPORT_FAILURE',\n\n    POST_PDT_REQUEST: 'POST_PDT_REQUEST',\n    POST_PDT_SUCCESS: 'POST_PDT_SUCCESS',\n    POST_PDT_FAILURE: 'POST_PDT_FAILURE',\n\n    GET_ADMIN_PDT_REQUEST: 'GET_ADMIN_PDT_REQUEST',\n    GET_ADMIN_PDT_SUCCESS: 'GET_ADMIN_PDT_SUCCESS',\n    GET_ADMIN_PDT_FAILURE: 'GET_ADMIN_PDT_FAILURE',\n\n    POST_ADMIN_PDT_REQUEST: 'POST_ADMIN_PDT_REQUEST',\n    POST_ADMIN_PDT_SUCCESS: 'POST_ADMIN_PDT_SUCCESS',\n    POST_ADMIN_PDT_FAILURE: 'POST_ADMIN_PDT_FAILURE',\n\n    APPROVE_PDT_REQUEST: 'APPROVE_PDT_REQUEST',\n    APPROVE_PDT_SUCCESS: 'APPROVE_PDT_SUCCESS',\n    APPROVE_PDT_FAILURE: 'APPROVE_PDT_FAILURE',\n\n    REPORT_PDT_REQUEST: 'REPORT_PDT_REQUEST',\n    REPORT_PDT_SUCCESS: 'REPORT_PDT_SUCCESS',\n    REPORT_PDT_FAILURE: 'REPORT_PDT_FAILURE',\n\n    REPORT_DOWNLOAD_PDT_REQUEST: 'REPORT_DOWNLOAD_PDT_REQUEST',\n    REPORT_DOWNLOAD_PDT_SUCCESS: 'REPORT_DOWNLOAD_PDT_SUCCESS',\n    REPORT_DOWNLOAD_PDT_FAILURE: 'REPORT_DOWNLOAD_PDT_FAILURE',\n\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\n};","export const filingPlansConstants = {\n    GET_FILING_PLANS_REQUEST: 'GET_FILING_PLANS_REQUEST',\n    GET_FILING_PLANS_SUCCESS: 'GET_FILING_PLANS_SUCCESS',\n    GET_FILING_PLANS_FAILURE: 'GET_FILING_PLANS_FAILURE',\n\n    GET_FILING_PLANS_REPORT_REQUEST: 'GET_FILING_PLANS_REPORT_REQUEST',\n    GET_FILING_PLANS_REPORT_SUCCESS: 'GET_FILING_PLANS_REPORT_SUCCESS',\n    GET_FILING_PLANS_REPORT_FAILURE: 'GET_FILING_PLANS_REPORT_FAILURE',\n\n    POST_FILING_PLANS_REQUEST: 'POST_FILING_PLANS_REQUEST',\n    POST_FILING_PLANS_SUCCESS: 'POST_FILING_PLANS_SUCCESS',\n    POST_FILING_PLANS_FAILURE: 'POST_FILING_PLANS_FAILURE',\n\n    GET_ADMIN_FILING_PLANS_REQUEST: 'GET_ADMIN_FILING_PLANS_REQUEST',\n    GET_ADMIN_FILING_PLANS_SUCCESS: 'GET_ADMIN_FILING_PLANS_SUCCESS',\n    GET_ADMIN_FILING_PLANS_FAILURE: 'GET_ADMIN_FILING_PLANS_FAILURE',\n\n    POST_ADMIN_FILING_PLANS_REQUEST: 'POST_ADMIN_FILING_PLANS_REQUEST',\n    POST_ADMIN_FILING_PLANS_SUCCESS: 'POST_ADMIN_FILING_PLANS_SUCCESS',\n    POST_ADMIN_FILING_PLANS_FAILURE: 'POST_ADMIN_FILING_PLANS_FAILURE',\n\n    APPROVE_FILING_PLANS_REQUEST: 'APPROVE_FILING_PLANS_REQUEST',\n    APPROVE_FILING_PLANS_SUCCESS: 'APPROVE_FILING_PLANS_SUCCESS',\n    APPROVE_FILING_PLANS_FAILURE: 'APPROVE_FILING_PLANS_FAILURE',\n\n    REPORT_FILING_PLANS_REQUEST: 'REPORT_FILING_PLANS_REQUEST',\n    REPORT_FILING_PLANS_SUCCESS: 'REPORT_FILING_PLANS_SUCCESS',\n    REPORT_FILING_PLANS_FAILURE: 'REPORT_FILING_PLANS_FAILURE',\n\n    REPORT_DOWNLOAD_FILING_PLANS_REQUEST: 'REPORT_DOWNLOAD_FILING_PLANS_REQUEST',\n    REPORT_DOWNLOAD_FILING_PLANS_SUCCESS: 'REPORT_DOWNLOAD_FILING_PLANS_SUCCESS',\n    REPORT_DOWNLOAD_FILING_PLANS_FAILURE: 'REPORT_DOWNLOAD_FILING_PLANS_FAILURE',\n\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\n};","export const salesReportConstants = {\n    GET_API_SALES_REPORT_REQUEST: 'GET_API_SALES_REPORT_REQUEST',\n    GET_API_SALES_REPORT_SUCCESS: 'GET_API_SALES_REPORT_SUCCESS',\n    GET_API_SALES_REPORT_FAILURE: 'GET_API_SALES_REPORT_FAILURE',\n\n    GET_FDF_SALES_REPORT_REQUEST: 'GET_FDF_SALES_REPORT_REQUEST',\n    GET_FDF_SALES_REPORT_SUCCESS: 'GET_FDF_SALES_REPORT_SUCCESS',\n    GET_FDF_SALES_REPORT_FAILURE: 'GET_FDF_SALES_REPORT_FAILURE',\n\n    GET_CONSOLIDATED_API_SALES_REPORT_REQUEST: 'GET_CONSOLIDATED_API_SALES_REPORT_REQUEST',\n    GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS: 'GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS',\n    GET_CONSOLIDATED_API_SALES_REPORT_FAILURE: 'GET_CONSOLIDATED_API_SALES_REPORT_FAILURE',\n\n    GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST: 'GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST',\n    GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS: 'GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS',\n    GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE: 'GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE',\n\n    POST_API_SALES_REPORT_REQUEST: 'POST_API_SALES_REPORT_REQUEST',\n    POST_API_SALES_REPORT_SUCCESS: 'POST_API_SALES_REPORT_SUCCESS',\n    POST_API_SALES_REPORT_FAILURE: 'POST_API_SALES_REPORT_FAILURE',\n\n    POST_FDF_SALES_REPORT_REQUEST: 'POST_FDF_SALES_REPORT_REQUEST',\n    POST_FDF_SALES_REPORT_SUCCESS: 'POST_FDF_SALES_REPORT_SUCCESS',\n    POST_FDF_SALES_REPORT_FAILURE: 'POST_FDF_SALES_REPORT_FAILURE',\n\n    GET_ADMIN_API_SALES_REPORT_REQUEST: 'GET_ADMIN_API_SALES_REPORT_REQUEST',\n    GET_ADMIN_API_SALES_REPORT_SUCCESS: 'GET_ADMIN_API_SALES_REPORT_SUCCESS',\n    GET_ADMIN_API_SALES_REPORT_FAILURE: 'GET_ADMIN_API_SALES_REPORT_FAILURE',\n\n    GET_ADMIN_FDF_SALES_REPORT_REQUEST: 'GET_ADMIN_FDF_SALES_REPORT_REQUEST',\n    GET_ADMIN_FDF_SALES_REPORT_SUCCESS: 'GET_ADMIN_FDF_SALES_REPORT_SUCCESS',\n    GET_ADMIN_FDF_SALES_REPORT_FAILURE: 'GET_ADMIN_FDF_SALES_REPORT_FAILURE',\n\n    POST_ADMIN_API_SALES_REPORT_REQUEST: 'POST_ADMIN_API_SALES_REPORT_REQUEST',\n    POST_ADMIN_API_SALES_REPORT_SUCCESS: 'POST_ADMIN_API_SALES_REPORT_SUCCESS',\n    POST_ADMIN_API_SALES_REPORT_FAILURE: 'POST_ADMIN_API_SALES_REPORT_FAILURE',\n\n    POST_ADMIN_FDF_SALES_REPORT_REQUEST: 'POST_ADMIN_FDF_SALES_REPORT_REQUEST',\n    POST_ADMIN_FDF_SALES_REPORT_SUCCESS: 'POST_ADMIN_FDF_SALES_REPORT_SUCCESS',\n    POST_ADMIN_FDF_SALES_REPORT_FAILURE: 'POST_ADMIN_FDF_SALES_REPORT_FAILURE',\n\n    APPROVE_SALES_REPORT_REQUEST: 'APPROVE_SALES_REPORT_REQUEST',\n    APPROVE_SALES_REPORT_SUCCESS: 'APPROVE_SALES_REPORT_SUCCESS',\n    APPROVE_SALES_REPORT_FAILURE: 'APPROVE_SALES_REPORT_FAILURE',\n\n    SUBMIT_SALES_REPORT_REQUEST: 'SUBMIT_SALES_REPORT_REQUEST',\n    SUBMIT_SALES_REPORT_SUCCESS: 'SUBMIT_SALES_REPORT_SUCCESS',\n    SUBMIT_SALES_REPORT_FAILURE: 'SUBMIT_SALES_REPORT_FAILURE',\n\n    DOWNLOAD_API_SALES_REPORT_REQUEST: 'DOWNLOAD_API_SALES_REPORT_REQUEST',\n    DOWNLOAD_API_SALES_REPORT_SUCCESS: 'DOWNLOAD_API_SALES_REPORT_SUCCESS',\n    DOWNLOAD_API_SALES_REPORT_FAILURE: 'DOWNLOAD_API_SALES_REPORT_FAILURE',\n\n    DOWNLOAD_FDF_SALES_REPORT_REQUEST: 'DOWNLOAD_FDF_SALES_REPORT_REQUEST',\n    DOWNLOAD_FDF_SALES_REPORT_SUCCESS: 'DOWNLOAD_FDF_SALES_REPORT_SUCCESS',\n    DOWNLOAD_FDF_SALES_REPORT_FAILURE: 'DOWNLOAD_FDF_SALES_REPORT_FAILURE',\n\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\n\n    GET_PRODUCT_VERIFICATION_LIST_REQUEST: 'GET_PRODUCT_VERIFICATION_LIST_REQUEST',\n    GET_PRODUCT_VERIFICATION_LIST_SUCCESS: 'GET_PRODUCT_VERIFICATION_LIST_SUCCESS',\n    GET_PRODUCT_VERIFICATION_LIST_FAILURE: 'GET_PRODUCT_VERIFICATION_LIST_FAILURE',\n\n    POST_PRODUCT_VERIFICATION_LIST_REQUEST: 'POST_PRODUCT_VERIFICATION_LIST_REQUEST',\n    POST_PRODUCT_VERIFICATION_LIST_SUCCESS: 'POST_PRODUCT_VERIFICATION_LIST_SUCCESS',\n    POST_PRODUCT_VERIFICATION_LIST_FAILURE: 'POST_PRODUCT_VERIFICATION_LIST_FAILURE',\n\n};","export const partnerDashboardConstants = {\n    GET_DASHBOARD_REQUEST: 'GET_DASHBOARD_REQUEST',\n    GET_DASHBOARD_SUCCESS: 'GET_DASHBOARD_SUCCESS',\n    GET_DASHBOARD_FAILURE: 'GET_DASHBOARD_FAILURE',\n};","export const adminDashboardConstants = {\n    GET_PROJECT_COUNT_REQUEST: 'GET_PROJECT_COUNT_REQUEST',\n    GET_PROJECT_COUNT_SUCCESS: 'GET_PROJECT_COUNT_SUCCESS',\n    GET_PROJECT_COUNT_FAILURE: 'GET_PROJECT_COUNT_FAILURE',\n\n    GET_PRODUCT_COMPANY_REQUEST: 'GET_PRODUCT_COMPANY_REQUEST',\n    GET_PRODUCT_COMPANY_SUCCESS: 'GET_PRODUCT_COMPANY_SUCCESS',\n    GET_PRODUCT_COMPANY_FAILURE: 'GET_PRODUCT_COMPANY_FAILURE',\n\n    GET_PRODUCT_COUNTRY_REQUEST: 'GET_PRODUCT_COUNTRY_REQUEST',\n    GET_PRODUCT_COUNTRY_SUCCESS: 'GET_PRODUCT_COUNTRY_SUCCESS',\n    GET_PRODUCT_COUNTRY_FAILURE: 'GET_PRODUCT_COUNTRY_FAILURE',\n\n    GET_PRODUCT_COUNTRY_QUARTER_REQUEST: 'GET_PRODUCT_COUNTRY_QUARTER_REQUEST',\n    GET_PRODUCT_COUNTRY_QUARTER_SUCCESS: 'GET_PRODUCT_COUNTRY_QUARTER_SUCCESS',\n    GET_PRODUCT_COUNTRY_QUARTER_FAILURE: 'GET_PRODUCT_COUNTRY_QUARTER_FAILURE',\n\n    GET_COMPANY_REQUEST: 'GET_COMPANY_REQUEST',\n    GET_COMPANY_SUCCESS: 'GET_COMPANY_SUCCESS',\n    GET_COMPANY_FAILURE: 'GET_COMPANY_FAILURE',\n    \n    GET_COUNTRY_PRODUCT_REQUEST: 'GET_COUNTRY_PRODUCT_REQUEST',\n    GET_COUNTRY_PRODUCT_SUCCESS: 'GET_COUNTRY_PRODUCT_SUCCESS',\n    GET_COUNTRY_PRODUCT_FAILURE: 'GET_COUNTRY_PRODUCT_FAILURE',\n    //\n    GET_COUNTRY_PRODUCT_STATUS_REQUEST: 'GET_COUNTRY_PRODUCT_STATUS_REQUEST',\n    GET_COUNTRY_PRODUCT_STATUS_SUCCESS: 'GET_COUNTRY_PRODUCT_STATUS_SUCCESS',\n    GET_COUNTRY_PRODUCT_STATUS_FAILURE: 'GET_COUNTRY_PRODUCT_STATUS_FAILURE',\n\n    GET_PRODUCT_COMPANY_SALES_REQUEST: 'GET_PRODUCT_COMPANY_SALES_REQUEST',\n    GET_PRODUCT_COMPANY_SALES_SUCCESS: 'GET_PRODUCT_COMPANY_SALES_SUCCESS',\n    GET_PRODUCT_COMPANY_SALES_FAILURE: 'GET_PRODUCT_COMPANY_SALES_FAILURE',\n\n    GET_PRODUCT_PERIOD_SALES_REQUEST: 'GET_PRODUCT_PERIOD_SALES_REQUEST',\n    GET_PRODUCT_PERIOD_SALES_SUCCESS: 'GET_PRODUCT_PERIOD_SALES_SUCCESS',\n    GET_PRODUCT_PERIOD_SALES_FAILURE: 'GET_PRODUCT_PERIOD_SALES_FAILURE',\n\n    GET_PRODUCT_COUNTRY_SALES_REQUEST: 'GET_PRODUCT_COUNTRY_SALES_REQUEST',\n    GET_PRODUCT_COUNTRY_SALES_SUCCESS: 'GET_PRODUCT_COUNTRY_SALES_SUCCESS',\n    GET_PRODUCT_COUNTRY_SALES_FAILURE: 'GET_PRODUCT_COUNTRY_SALES_FAILURE',\n\n    GET_COMPANY_PRODUCT_SALES_REQUEST: 'GET_COMPANY_PRODUCT_SALES_REQUEST',\n    GET_COMPANY_PRODUCT_SALES_SUCCESS: 'GET_COMPANY_PRODUCT_SALES_SUCCESS',\n    GET_COMPANY_PRODUCT_SALES_FAILURE: 'GET_COMPANY_PRODUCT_SALES_FAILURE',\n\n    GET_COMPANY_PERIOD_SALES_REQUEST: 'GET_COMPANY_PERIOD_SALES_REQUEST',\n    GET_COMPANY_PERIOD_SALES_SUCCESS: 'GET_COMPANY_PERIOD_SALES_SUCCESS',\n    GET_COMPANY_PERIOD_SALES_FAILURE: 'GET_COMPANY_PERIOD_SALES_FAILURE',\n    \n    GET_COMPANY_COUNTRY_SALES_REQUEST: 'GET_COMPANY_COUNTRY_SALES_REQUEST',\n    GET_COMPANY_COUNTRY_SALES_SUCCESS: 'GET_COMPANY_COUNTRY_SALES_SUCCESS',\n    GET_COMPANY_COUNTRY_SALES_FAILURE: 'GET_COMPANY_COUNTRY_SALES_FAILURE',\n    \n    GET_COUNTRY_PRODUCT_SALES_REQUEST: 'GET_COUNTRY_PRODUCT_SALES_REQUEST',\n    GET_COUNTRY_PRODUCT_SALES_SUCCESS: 'GET_COUNTRY_PRODUCT_SALES_SUCCESS',\n    GET_COUNTRY_PRODUCT_SALES_FAILURE: 'GET_COUNTRY_PRODUCT_SALES_FAILURE',\n\n    GET_COUNTRY_PERIOD_SALES_REQUEST: 'GET_COUNTRY_PERIOD_SALES_REQUEST',\n    GET_COUNTRY_PERIOD_SALES_SUCCESS: 'GET_COUNTRY_PERIOD_SALES_SUCCESS',\n    GET_COUNTRY_PERIOD_SALES_FAILURE: 'GET_COUNTRY_PERIOD_SALES_FAILURE',\n\n    GET_COUNTRY_COMPANY_SALES_REQUEST: 'GET_COUNTRY_COMPANY_SALES_REQUEST',\n    GET_COUNTRY_COMPANY_SALES_SUCCESS: 'GET_COUNTRY_COMPANY_SALES_SUCCESS',\n    GET_COUNTRY_COMPANY_SALES_FAILURE: 'GET_COUNTRY_COMPANY_SALES_FAILURE',\n    \n    GET_PERIOD_PRODUCT_SALES_REQUEST: 'GET_PERIOD_PRODUCT_SALES_REQUEST',\n    GET_PERIOD_PRODUCT_SALES_SUCCESS: 'GET_PERIOD_PRODUCT_SALES_SUCCESS',\n    GET_PERIOD_PRODUCT_SALES_FAILURE: 'GET_PERIOD_PRODUCT_SALES_FAILURE',\n\n    GET_PERIOD_COUNTRY_SALES_REQUEST: 'GET_PERIOD_COUNTRY_SALES_REQUEST',\n    GET_PERIOD_COUNTRY_SALES_SUCCESS: 'GET_PERIOD_COUNTRY_SALES_SUCCESS',\n    GET_PERIOD_COUNTRY_SALES_FAILURE: 'GET_PERIOD_COUNTRY_SALES_FAILURE',\n\n    GET_PERIOD_COMPANY_SALES_REQUEST: 'GET_PERIOD_COMPANY_SALES_REQUEST',\n    GET_PERIOD_COMPANY_SALES_SUCCESS: 'GET_PERIOD_COMPANY_SALES_SUCCESS',\n    GET_PERIOD_COMPANY_SALES_FAILURE: 'GET_PERIOD_COMPANY_SALES_FAILURE',\n\n    GET_PACK_PERIOD_SALES_REQUEST: 'GET_PACK_PERIOD_SALES_REQUEST',\n    GET_PACK_PERIOD_SALES_SUCCESS: 'GET_PACK_PERIOD_SALES_SUCCESS',\n    GET_PACK_PERIOD_SALES_FAILURE: 'GET_PACK_PERIOD_SALES_FAILURE',\n    \n    GET_TREATMENT_PERIOD_SALES_REQUEST: 'GET_TREATMENT_PERIOD_SALES_REQUEST',\n    GET_TREATMENT_PERIOD_SALES_SUCCESS: 'GET_TREATMENT_PERIOD_SALES_SUCCESS',\n    GET_TREATMENT_PERIOD_SALES_FAILURE: 'GET_TREATMENT_PERIOD_SALES_FAILURE',\n\n    GET_ADMIN_DASHBOARD_SUMMARY_REQUEST: 'GET_ADMIN_DASHBOARD_SUMMARY_REQUEST',\n    GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS: 'GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS',\n    GET_ADMIN_DASHBOARD_SUMMARY_FAILURE: 'GET_ADMIN_DASHBOARD_SUMMARY_FAILURE',\n\n    SEND_BULK_REMINDER_REQUEST: 'SEND_BULK_REMINDER_REQUEST',\n    SEND_BULK_REMINDER_SUCCESS: 'SEND_BULK_REMINDER_SUCCESS',\n    SEND_BULK_REMINDER_FAILURE: 'SEND_BULK_REMINDER_FAILURE',\n\n};","import { loaderConstants } from '../../constants';\n\n\nconst initialSettings = {\n    showLoader: false\n};\n\nconst Loader = (state = initialSettings, action) => {\n    switch (action.type) {\n        case loaderConstants.SHOW_LOADER:\n            return {\n                ...state,\n                showLoader: true\n            };\n        case loaderConstants.HIDE_LOADER:\n            return {\n                ...state,\n                showLoader: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport default Loader;\n","import { adminProductConstants } from '../../constants';\n\n\nconst initialSettings = {\n    isProductAdded: false,\n    isProductEdited: false,\n    isProductLoaded:false,\n    productList: [],\n    productItem: {},\n    productDetails: {},\n    isLoaded: false\n};\n\nconst AdminProducts = (state = initialSettings, action) => {\n    switch (action.type) {\n        case adminProductConstants.ADD_PRODUCT_REQUEST:\n            return {\n                ...state,\n                isProductAdded: false\n            };\n        case adminProductConstants.ADD_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                isProductAdded: true\n            };\n        case adminProductConstants.ADD_PRODUCT_FAILURE:\n            return {\n                ...state,\n                isProductAdded: false\n            };\n\n        case adminProductConstants.EDIT_PRODUCT_REQUEST:\n            return {\n                ...state,\n                isProductEdited: false\n            };\n        case adminProductConstants.EDIT_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                isProductEdited: true\n            };\n        case adminProductConstants.EDIT_PRODUCT_FAILURE:\n            return {\n                ...state,\n                isProductEdited: false\n            };\n\n        case adminProductConstants.DELETE_PRODUCT_REQUEST:\n            return {\n                ...state,\n            };\n        case adminProductConstants.DELETE_PRODUCT_SUCCESS:\n            return {\n                ...state,\n            };\n        case adminProductConstants.DELETE_PRODUCT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case adminProductConstants.GET_PRODUCT_LIST_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case adminProductConstants.GET_PRODUCT_LIST_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                productList: action.data\n            };\n        case adminProductConstants.GET_PRODUCT_LIST_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n\n        case adminProductConstants.GET_PRODUCT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case adminProductConstants.GET_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                productItem: action.data\n            };\n        case adminProductConstants.GET_PRODUCT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n\n        case adminProductConstants.RESET_PRODUCT:\n            return {\n                ...state,\n                isProductAdded: false,\n                isProductEdited: false\n            }\n\n        case adminProductConstants.GET_PRODUCT_DETAILS_REQUEST:\n            return {\n                ...state,\n                isProductLoaded: false,\n            };\n        case adminProductConstants.GET_PRODUCT_DETAILS_SUCCESS:\n            return {\n                ...state,\n                isProductLoaded: true,\n                productDetails: action.data\n            };\n        case adminProductConstants.GET_PRODUCT_DETAILS_FAILURE:\n            return {\n                ...state,\n                isLoisProductLoadedaded: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default AdminProducts;\n","import { adminPartnerConstants } from '../../constants';\n\n\nconst initialSettings = {\n    isPartnerAdded: false,\n    isPartnerEdited: false,\n    isPartnerDeleted: false,\n    setCutoffSuccess: false,\n    partnerList: [],\n    countryList: [],\n    partnerDetails: {},\n    cutOffDate: {},\n    isLoaded: false\n};\n\nconst AdminPartner = (state = initialSettings, action) => {\n    switch (action.type) {\n        case adminPartnerConstants.ADD_PARTNER_REQUEST:\n            return {\n                ...state,\n                isPartnerAdded: false\n            };\n        case adminPartnerConstants.ADD_PARTNER_SUCCESS:\n            return {\n                ...state,\n                isPartnerAdded: true\n            };\n        case adminPartnerConstants.ADD_PARTNER_FAILURE:\n            return {\n                ...state,\n                isPartnerAdded: false\n            };\n\n        case adminPartnerConstants.EDIT_PARTNER_REQUEST:\n            return {\n                ...state,\n                isPartnerEdited: false\n            };\n        case adminPartnerConstants.EDIT_PARTNER_SUCCESS:\n            return {\n                ...state,\n                isPartnerEdited: true\n            };\n        case adminPartnerConstants.EDIT_PARTNER_FAILURE:\n            return {\n                ...state,\n                isPartnerEdited: false\n            };\n\n        case adminPartnerConstants.DELETE_PARTNER_REQUEST:\n            return {\n                ...state,\n                isPartnerDeleted: false\n            };\n        case adminPartnerConstants.DELETE_PARTNER_SUCCESS:\n            return {\n                ...state,\n                isPartnerDeleted: true\n            };\n        case adminPartnerConstants.DELETE_PARTNER_FAILURE:\n            return {\n                ...state,\n                isPartnerDeleted: false\n            };\n\n        case adminPartnerConstants.RESET_EDIT_PARTNER:\n            return {\n                ...state,\n                isPartnerEdited: false,\n                isPartnerAdded: false\n            };\n\n        case adminPartnerConstants.GET_PARTNER_LIST_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case adminPartnerConstants.GET_PARTNER_LIST_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                partnerList: action.data\n            };\n        case adminPartnerConstants.GET_PARTNER_LIST_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n        case adminPartnerConstants.GET_PARTNER_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case adminPartnerConstants.GET_PARTNER_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                partnerDetails: action.data\n            };\n        case adminPartnerConstants.GET_PARTNER_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n        case adminPartnerConstants.GET_COUNTRY_LIST_REQUEST:\n            return {\n                ...state,\n            };\n        case adminPartnerConstants.GET_COUNTRY_LIST_SUCCESS:\n            return {\n                ...state,\n                countryList: action.data\n            };\n        case adminPartnerConstants.GET_COUNTRY_LIST_FAILURE:\n            return {\n                ...state,\n            };\n        case adminPartnerConstants.SEND_REMINDER_REQUEST:\n            return {\n                ...state\n            };\n        case adminPartnerConstants.SEND_REMINDER_SUCCESS:\n            return {\n                ...state\n            };\n        case adminPartnerConstants.SEND_REMINDER_FAILURE:\n            return {\n                ...state\n            };\n        case adminPartnerConstants.SET_CUT_OFF_DATE_REQUEST:\n            return {\n                ...state,\n                setCutoffSuccess: false\n            };\n        case adminPartnerConstants.SET_CUT_OFF_DATE_SUCCESS:\n            return {\n                ...state,\n                setCutoffSuccess: true\n            };\n        case adminPartnerConstants.SET_CUT_OFF_DATE_FAILURE:\n            return {\n                ...state,\n                setCutoffSuccess: false\n            };\n        case adminPartnerConstants.GET_CUT_OFF_DATE_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case adminPartnerConstants.GET_CUT_OFF_DATE_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                cutOffDate: action.data\n            };\n        case adminPartnerConstants.GET_CUT_OFF_DATE_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default AdminPartner;\n","import { partnerDashboardConstants } from '../../constants';\n\n\nconst initialSettings = {\n    partnerList: [],\n    isLoaded: false\n};\n\nconst partnerDashboard = (state = initialSettings, action) => {\n    switch (action.type) {\n        \n        case partnerDashboardConstants.GET_DASHBOARD_REQUEST:\n            return {\n                ...state,\n                isLoaded: false,\n            };\n        case partnerDashboardConstants.GET_DASHBOARD_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                partnerList: action.data\n            };\n        case partnerDashboardConstants.GET_DASHBOARD_FAILURE:\n            return {\n                ...state,\n                isLoaded: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default partnerDashboard;\n","import { pdtConstants } from '../../constants';\n\nconst initialSettings = {\n    pdtList: {},\n    pdtReportData: {},\n    isLoaded: false\n};\n\nconst ProductDevelopmentTimeline = (state = initialSettings, action) => {\n    switch (action.type) {\n        case pdtConstants.GET_PDT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case pdtConstants.GET_PDT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                pdtList: action.data\n            };\n        case pdtConstants.GET_PDT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case pdtConstants.GET_PDT_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case pdtConstants.GET_PDT_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                pdtReportData: action.data\n            };\n        case pdtConstants.GET_PDT_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case pdtConstants.GET_ADMIN_PDT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case pdtConstants.GET_ADMIN_PDT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                pdtList: action.data\n            };\n        case pdtConstants.GET_ADMIN_PDT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case pdtConstants.POST_PDT_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.POST_PDT_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.POST_PDT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case pdtConstants.POST_ADMIN_PDT_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.POST_ADMIN_PDT_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.POST_ADMIN_PDT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case pdtConstants.APPROVE_PDT_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.APPROVE_PDT_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.APPROVE_PDT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case pdtConstants.REPORT_PDT_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.REPORT_PDT_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.REPORT_PDT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case pdtConstants.REPORT_DOWNLOAD_PDT_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.REPORT_DOWNLOAD_PDT_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.REPORT_DOWNLOAD_PDT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case pdtConstants.MESSAGE_READ_REQUEST:\n            return {\n                ...state,\n            };\n        case pdtConstants.MESSAGE_READ_SUCCESS:\n            return {\n                ...state,\n            };\n        case pdtConstants.MESSAGE_READ_FAILURE:\n            return {\n                ...state,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default ProductDevelopmentTimeline;\n","import { filingPlansConstants } from '../../constants';\n\nconst initialSettings = {\n    plansList: {},\n    plansReportData: {},\n    isLoaded: false\n};\n\nconst FilingPlans = (state = initialSettings, action) => {\n    switch (action.type) {\n        case filingPlansConstants.GET_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case filingPlansConstants.GET_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                plansList: action.data\n            };\n        case filingPlansConstants.GET_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                plansReportData: action.data\n            };\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                plansList: action.data\n            };\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case filingPlansConstants.POST_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.POST_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.POST_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n            };\n\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n            };\n\n        case filingPlansConstants.APPROVE_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.APPROVE_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.APPROVE_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n            };\n\n        case filingPlansConstants.REPORT_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.REPORT_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.REPORT_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n            };\n\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_FAILURE:\n            return {\n                ...state,\n            };\n\n\n        case filingPlansConstants.MESSAGE_READ_REQUEST:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.MESSAGE_READ_SUCCESS:\n            return {\n                ...state,\n            };\n        case filingPlansConstants.MESSAGE_READ_FAILURE:\n            return {\n                ...state,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default FilingPlans;\n","import { salesReportConstants } from '../../constants';\n\nconst initialSettings = {\n    apiSalesList: {},\n    fdfSalesList: {},\n    apiSalesReportData: {},\n    fdfSalesReportData: {},\n    isLoaded: false\n};\n\nconst SalesReport = (state = initialSettings, action) => {\n    switch (action.type) {\n        case salesReportConstants.GET_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                apiSalesList: action.data\n            };\n        case salesReportConstants.GET_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.GET_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                fdfSalesList: action.data\n            };\n        case salesReportConstants.GET_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                apiSalesReportData: action.data\n            };\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                fdfSalesReportData: action.data\n            };\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                apiSalesList: action.data\n            };\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                fdfSalesList: action.data\n            };\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.POST_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.POST_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.APPROVE_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.APPROVE_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.APPROVE_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.SUBMIT_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.SUBMIT_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.SUBMIT_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.MESSAGE_READ_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.MESSAGE_READ_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.MESSAGE_READ_FAILURE:\n            return {\n                ...state,\n            };\n\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_REQUEST:\n            return {\n                ...state,\n                isLoaded: false\n            };\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_SUCCESS:\n            return {\n                ...state,\n                isLoaded: true,\n                productVerificationList: action.data\n            };\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_FAILURE:\n            return {\n                ...state,\n                isLoaded: true\n            };\n\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_REQUEST:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_SUCCESS:\n            return {\n                ...state,\n            };\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_FAILURE:\n            return {\n                ...state,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default SalesReport;\n","import { authConstants } from '../../constants';\n\nconst initialSettings = {\n    isUserLoggedIn: false,\n    changePasswordSuccess: false,\n    validateTokenSuccess: false,\n    setPasswordSuccess: false,\n    isMailSend: false\n};\n\nconst UserAuthentication = (state = initialSettings, action) => {\n    switch (action.type) {\n\n        case authConstants.LOGIN_SUCCESS:\n            return {\n                ...state,\n                isUserLoggedIn: true\n            };\n        case authConstants.LOGIN_FAILURE:\n            return {\n                ...state,\n                isUserLoggedIn: false\n            };\n\n        case authConstants.LOGOUT_SUCCESS:\n            return {\n                ...state,\n                isUserLoggedIn: false\n            };\n\n        case authConstants.CHANGE_PASSWORD_REQUEST:\n            return {\n                ...state,\n                changePasswordSuccess: false\n            };\n        case authConstants.CHANGE_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                changePasswordSuccess: true\n            };\n        case authConstants.CHANGE_PASSWORD_FAILURE:\n            return {\n                ...state,\n                changePasswordSuccess: false\n            };\n\n        case authConstants.VALIDATE_TOKEN_REQUEST:\n            return {\n                ...state,\n                validateTokenSuccess: false\n            };\n        case authConstants.VALIDATE_TOKEN_SUCCESS:\n            return {\n                ...state,\n                validateTokenSuccess: true\n            };\n        case authConstants.VALIDATE_TOKEN_FAILURE:\n            return {\n                ...state,\n                validateTokenSuccess: false\n            };\n\n        case authConstants.SET_PASSWORD_REQUEST:\n            return {\n                ...state,\n                setPasswordSuccess: false\n            };\n        case authConstants.SET_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                setPasswordSuccess: true\n            };\n        case authConstants.SET_PASSWORD_FAILURE:\n            return {\n                ...state,\n                setPasswordSuccess: false\n            };\n\n        case authConstants.FORGOT_PASSWORD_REQUEST:\n            return {\n                ...state,\n                isMailSend: false\n            };\n        case authConstants.FORGOT_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                isMailSend: true\n            };\n        case authConstants.FORGOT_PASSWORD_FAILURE:\n            return {\n                ...state,\n                isMailSend: false\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default UserAuthentication;\n","import { adminDashboardConstants } from '../../constants';\n\n\nconst initialSettings = {\n    project_count: [],\n    isProjectCountLoaded: false,\n\n    product_company_count: [],\n    isProductCompanyCountLoaded: false,\n\n    product_country_count: [],\n    isProductCountryCountLoaded: false,\n\n    product_country_quarter_count: [],\n    future_quarters:[],\n    isProductCountryQuarterCountLoaded: false,\n\n    company_count: [],\n    isCompanyCountLoaded: false,\n    \n    country_product_count:[],\n    isCountryProductLoaded: false,\n\n    product_company_sales:[],\n    isProductCompanySalesLoaded: false,\n\n    product_period_sales:[],\n    isProductPeriodSalesLoaded: false,\n\n    product_country_sales:[],\n    isProductCountrySalesLoaded: false,\n\n    company_product_sales:[],\n    isCompanyProductSalesLoaded: false,\n\n    company_period_sales:[],\n    isCompanyPeriodSalesLoaded: false,\n\n    company_country_sales:[],\n    isCompanyCountrySalesLoaded: false,\n\n    country_product_sales:[],\n    isCountryProductSalesLoaded: false,\n\n    country_period_sales:[],\n    isCountryPeriodSalesLoaded: false,\n\n    country_company_sales:[],\n    isCountryCompanySalesLoaded: false,\n\n    period_product_sales:[],\n    isPeriodProductSalesLoaded: false,\n\n    period_country_sales:[],\n    isPeriodCountrySalesLoaded: false,\n\n    period_company_sales:[],\n    isPeriodCompanySalesLoaded: false,\n\n    pack_period_sales:[],\n    isPackPeriodSalesLoaded: false,\n\n    treatment_period_sales:[],\n    isTreatmentPeriodSalesLoaded: false,\n\n    admin_dashboard_summary:[],\n    isAdminDashboardSummaryLoaded: false,\n\n    setBulkReminderSuccess: false\n\n};\n\nconst AdminDashboard = (state = initialSettings, action) => {\n    switch (action.type) {\n        //Project Count\n        case adminDashboardConstants.GET_PROJECT_COUNT_REQUEST:\n            return {\n                ...state,\n                isProjectCountLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PROJECT_COUNT_SUCCESS:\n            return {\n                ...state,\n                project_count: action.data,\n                isProjectCountLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PROJECT_COUNT_FAILURE:\n            return {\n                ...state,\n                isProjectCountLoaded: true\n            };\n        \n        //Product Company Count\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_REQUEST:\n            return {\n                ...state,\n                isProductCompanyCountLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SUCCESS:\n            return {\n                ...state,\n                product_company_count: action.data,\n                isProductCompanyCountLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_FAILURE:\n            return {\n                ...state,\n                isProductCompanyCountLoaded: true\n            };\n\n        //Product Country Count\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_REQUEST:\n            return {\n                ...state,\n                isProductCountryCountLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SUCCESS:\n            return {\n                ...state,\n                product_country_count: action.data,\n                isProductCountryCountLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_QUARTER_SUCCESS:\n            return {\n                ...state,\n                product_country_count: action.data['rows'],\n                future_quarters: action.data['quarter_list'],\n                isProductCountryCountLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_FAILURE:\n            return {\n                ...state,\n                isProductCountryCountLoaded: true\n            };\n\n        \n        //Company Count\n        case adminDashboardConstants.GET_COMPANY_REQUEST:\n            return {\n                ...state,\n                isCompanyCountLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COMPANY_SUCCESS:\n            return {\n                ...state,\n                company_count: action.data,\n                isCompanyCountLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COMPANY_FAILURE:\n            return {\n                ...state,\n                isCompanyCountLoaded: true\n            };\n\n        //Country By Product By Partner/Status\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_REQUEST:\n            return {\n                ...state,\n                isCountryProductLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                country_product_count: action.data,\n                isCountryProductLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_FAILURE:\n            return {\n                ...state,\n                isCountryProductLoaded: true\n            };\n\n        //Product By Company By Sales\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_REQUEST:\n            return {\n                ...state,\n                isCountryProductstatusLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_SUCCESS:\n            return {\n                ...state,\n                product_company_sales: action.data,\n                isProductCompanySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_FAILURE:\n            return {\n                ...state,\n                isCountryProductStatusLoaded: true\n            };\n\n        //Product By Period By Sales\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_REQUEST:\n            return {\n                ...state,\n                isProductPeriodSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_SUCCESS:\n            return {\n                ...state,\n                product_period_sales: action.data,\n                isProductPeriodSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_FAILURE:\n            return {\n                ...state,\n                isProductPeriodSalesLoaded: true\n            };\n\n\n        //Product By Country By Sales\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_REQUEST:\n            return {\n                ...state,\n                isProductCountrySalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_SUCCESS:\n            return {\n                ...state,\n                product_country_sales: action.data,\n                isProductCountrySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_FAILURE:\n            return {\n                ...state,\n                isProductCountrySalesLoaded: true\n            };\n\n        //Company By Product By Sales\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_REQUEST:\n            return {\n                ...state,\n                isCompanyProductSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_SUCCESS:\n            return {\n                ...state,\n                company_product_sales: action.data,\n                isCompanyProductSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_FAILURE:\n            return {\n                ...state,\n                isCompanyProductSalesLoaded: true\n            };\n\n        //Company By Period By Sales\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_REQUEST:\n            return {\n                ...state,\n                isCompanyPeriodSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_SUCCESS:\n            return {\n                ...state,\n                company_period_sales: action.data,\n                isCompanyPeriodSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_FAILURE:\n            return {\n                ...state,\n                isCompanyPeriodSalesLoaded: true\n            };\n\n        //Company By Country By Sales\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_REQUEST:\n            return {\n                ...state,\n                isCompanyCountrySalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_SUCCESS:\n            return {\n                ...state,\n                company_country_sales: action.data,\n                isCompanyCountrySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_FAILURE:\n            return {\n                ...state,\n                isCompanyCountrySalesLoaded: true\n            };\n\n        //Country By Product By Sales\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_REQUEST:\n            return {\n                ...state,\n                isCountryProductSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_SUCCESS:\n            return {\n                ...state,\n                country_product_sales: action.data,\n                isCountryProductSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_FAILURE:\n            return {\n                ...state,\n                isCountryProductSalesLoaded: true\n            };\n\n\n        //Country By Period By Sales\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_REQUEST:\n            return {\n                ...state,\n                isCountryPeriodSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_SUCCESS:\n            return {\n                ...state,\n                country_period_sales: action.data,\n                isCountryPeriodSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_FAILURE:\n            return {\n                ...state,\n                isCountryPeriodSalesLoaded: true\n            };\n\n        //Country By Company By Sales\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_REQUEST:\n            return {\n                ...state,\n                isCountryCompanySalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_SUCCESS:\n            return {\n                ...state,\n                country_company_sales: action.data,\n                isCountryCompanySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_FAILURE:\n            return {\n                ...state,\n                isCountryCompanySalesLoaded: true\n            };\n\n        //Period By Product By Sales\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_REQUEST:\n            return {\n                ...state,\n                isPeriodProductSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_SUCCESS:\n            return {\n                ...state,\n                period_product_sales: action.data,\n                isPeriodProductSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_FAILURE:\n            return {\n                ...state,\n                isPeriodProductSalesLoaded: true\n            };\n\n        //Period By Country By Sales\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_REQUEST:\n            return {\n                ...state,\n                isPeriodCountrySalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_SUCCESS:\n            return {\n                ...state,\n                period_country_sales: action.data,\n                isPeriodCountrySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_FAILURE:\n            return {\n                ...state,\n                isPeriodCountrySalesLoaded: true\n            };\n        \n        //Period By Company By Sales\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_REQUEST:\n            return {\n                ...state,\n                isPeriodCompanySalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_SUCCESS:\n            return {\n                ...state,\n                period_company_sales: action.data,\n                isPeriodCompanySalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_FAILURE:\n            return {\n                ...state,\n                isPeriodCompanySalesLoaded: true\n            };\n        \n        //Pack By Period By Sales\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_REQUEST:\n            return {\n                ...state,\n                isPackPeriodSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_SUCCESS:\n            return {\n                ...state,\n                pack_period_sales: action.data,\n                isPackPeriodSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_FAILURE:\n            return {\n                ...state,\n                isPackPeriodSalesLoaded: true\n            };\n\n        //Treatment By Period By Sales\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_REQUEST:\n            return {\n                ...state,\n                isTreatmentPeriodSalesLoaded: false\n            };\n\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_SUCCESS:\n            return {\n                ...state,\n                treatment_period_sales: action.data,\n                isTreatmentPeriodSalesLoaded: true\n            };\n\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_FAILURE:\n            return {\n                ...state,\n                isTreatmentPeriodSalesLoaded: true\n            };\n        \n        \n        //Admin Dashboard Summary\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_REQUEST:\n            return {\n                ...state,\n                isAdminDashboardSummaryLoaded: false\n            };\n\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS:\n            return {\n                ...state,\n                admin_dashboard_summary: action.data,\n                isAdminDashboardSummaryLoaded: true\n            };\n\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_FAILURE:\n            return {\n                ...state,\n                isAdminDashboardSummaryLoaded: true\n            };\n\n        \n        //Admin Dashboard Bulk Reminder\n        case adminDashboardConstants.SEND_BULK_REMINDER_REQUEST:\n            return {\n                ...state,\n                setBulkReminderSuccess: false\n            };\n\n        case adminDashboardConstants.SEND_BULK_REMINDER_SUCCESS:\n            return {\n                ...state,\n                setBulkReminderSuccess: true\n            };\n\n        case adminDashboardConstants.SEND_BULK_REMINDER_FAILURE:\n            return {\n                ...state,\n                setBulkReminderSuccess: true\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default AdminDashboard;\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport createRootReducer from '../reducers';\n\nconst createBrowserHistory = require('history').createBrowserHistory;\n\n\nexport const history = createBrowserHistory();\n\nconst routeMiddleware = routerMiddleware(history);\n\nconst middlewares = [thunk, routeMiddleware, logger];\n\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        ...middlewares\n      ),\n    ),\n  );\n\n  return store;\n}\n","import antdEn from \"antd/lib/locale-provider/en_US\";\nimport enMessages from \"../locales/en_US.json\";\n\nconst EnLang = {\n  messages: {\n    ...enMessages\n  },\n  antd: antdEn,\n  locale: 'en-US',\n};\nexport default EnLang;\n","\nimport zhMessages from \"../locales/zh-Hans.json\";\n\nconst ZhLan = {\n  messages: {\n    ...zhMessages\n  },\n  antd: null,\n  locale: 'zh-Hans-CN',\n};\nexport default ZhLan;\n","import antdSA from \"antd/lib/locale-provider/en_US\";\n\nimport saMessages from \"../locales/ar_SA.json\";\n\nconst saLang = {\n  messages: {\n    ...saMessages\n  },\n  antd: antdSA,\n  locale: 'ar',\n};\nexport default saLang;\n","import antdSA from \"antd/lib/locale-provider/it_IT\";\nimport saMessages from \"../locales/it_IT.json\";\n\nconst saLang = {\n  messages: {\n    ...saMessages\n  },\n  antd: antdSA,\n  locale: 'it-IT',\n};\nexport default saLang;\n","import antdSA from \"antd/lib/locale-provider/ca_ES\";\nimport saMessages from \"../locales/es_ES.json\";\n\nconst saLang = {\n  messages: {\n    ...saMessages\n  },\n  antd: antdSA,\n  locale: 'es',\n};\nexport default saLang;\n","import enLang from \"./entries/en-US\";\nimport zhLang from \"./entries/zh-Hans-CN\";\nimport arLang from \"./entries/ar_SA\";\nimport itLang from \"./entries/it_IT\";\nimport esLang from \"./entries/es_ES\";\nimport frLang from \"./entries/fr_FR\";\n\nconst AppLocale = {\n  en: enLang,\n  zh: zhLang,\n  ar: arLang,\n  it: itLang,\n  es: esLang,\n  fr: frLang\n};\n\nexport default AppLocale;\n","import antdSA from \"antd/lib/locale-provider/fr_FR\";\nimport saMessages from \"../locales/fr_FR.json\";\n\nconst saLang = {\n  messages: {\n    ...saMessages\n  },\n  antd: antdSA,\n  locale: 'fr-FR',\n};\nexport default saLang;\n","import React from \"react\";\nimport {Scrollbars} from \"react-custom-scrollbars\";\n\nconst CustomScrollbars = (props) => <Scrollbars  {...props} autoHide\n                                                 renderTrackHorizontal={props => <div {...props}\n                                                                                      style={{display: 'none'}}\n                                                                                      className=\"track-horizontal\"/>}/>;\n\nexport default CustomScrollbars;\n","import {SWITCH_LANGUAGE, TOGGLE_COLLAPSED_NAV, WINDOW_WIDTH} from \"constants/ActionTypes\";\nimport {LAYOUT_TYPE, NAV_STYLE, THEME_COLOR, THEME_TYPE} from \"../../constants/ThemeSetting\";\n\n\nexport function toggleCollapsedSideNav(navCollapsed) {\n  return {type: TOGGLE_COLLAPSED_NAV, navCollapsed};\n}\n\nexport function updateWindowWidth(width) {\n  return (dispatch) => {\n    dispatch({type: WINDOW_WIDTH, width});\n  }\n\n}\n\nexport function setThemeType(themeType) {\n  return (dispatch) => {\n    dispatch({type: THEME_TYPE, themeType});\n  }\n}\n\nexport function setThemeColor(themeColor) {\n  return (dispatch) => {\n    dispatch({type: THEME_COLOR, themeColor});\n  }\n}\n\nexport function onNavStyleChange(navStyle) {\n  return (dispatch) => {\n    dispatch({type: NAV_STYLE, navStyle});\n  }\n}\n\nexport function onLayoutTypeChange(layoutType) {\n  return (dispatch) => {\n    dispatch({type: LAYOUT_TYPE, layoutType});\n  }\n}\n\nexport function switchLanguage(locale) {\n  return (dispatch) => {\n    dispatch({\n      type: SWITCH_LANGUAGE,\n      payload: locale\n    });\n  }\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\n\nimport {onNavStyleChange, toggleCollapsedSideNav} from \"appRedux/actions/Setting\";\nimport {\n  NAV_STYLE_DRAWER,\n  NAV_STYLE_FIXED,\n  NAV_STYLE_MINI_SIDEBAR,\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n  TAB_SIZE,\n  THEME_TYPE_LITE\n} from \"../../constants/ThemeSetting\";\n\n\nconst SidebarLogo = () => {\n  const dispatch = useDispatch();\n  const {width, themeType, navCollapsed} = useSelector(({settings}) => settings);\n  let navStyle = useSelector(({settings}) => settings.navStyle);\n  if (width < TAB_SIZE && navStyle === NAV_STYLE_FIXED) {\n    navStyle = NAV_STYLE_DRAWER;\n  }\n  return (\n    <div className=\"gx-layout-sider-header\">\n\n      {(navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR) ? <div className=\"gx-linebar\">\n\n        <i\n          className={`gx-icon-btn icon icon-${navStyle === NAV_STYLE_MINI_SIDEBAR ? 'menu-unfold' : 'menu-fold'} ${themeType !== THEME_TYPE_LITE ? 'gx-text-white' : ''}`}\n          onClick={() => {\n            if (navStyle === NAV_STYLE_DRAWER) {\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\n            } else if (navStyle === NAV_STYLE_FIXED) {\n              dispatch(onNavStyleChange(NAV_STYLE_MINI_SIDEBAR))\n            } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\n            } else {\n              dispatch(onNavStyleChange(NAV_STYLE_FIXED))\n            }\n          }}\n        />\n      </div> : null}\n\n      <Link to=\"/\" className=\"gx-site-logo\">\n        {navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && width >= TAB_SIZE ?\n          <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/> :\n          themeType === THEME_TYPE_LITE ?\n            <img alt=\"\" src={require(\"assets/images/logo-white.png\")}/> :\n            <img alt=\"\" src={require(\"assets/images/mpp_logo_white.png\")}/>}\n      </Link>\n    </div>\n  );\n};\n\nexport default SidebarLogo;\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export function authHeader() {\n    // return authorization header with jwt token\n    let user = JSON.parse(localStorage.getItem('user'));\n    if (user && user.access) {\n        return { 'Authorization': `Bearer ${user.access}` };\n    } else {\n        return {};\n    }\n}\n","import { message } from 'antd';\n\nexport function showMessage(type, msgTxt) {\n    switch (type) {\n        case 'success':\n            message.success(msgTxt);\n            break;\n\n        case 'error':\n            message.error(msgTxt);\n            break;\n\n        case 'info':\n            message.info(msgTxt);\n            break;\n\n        case 'warning':\n            message.warning(msgTxt);\n            break;\n\n        case 'loading':\n            message.loading(msgTxt);\n            break;\n\n        default:\n            message.info(msgTxt);\n    }\n}","import * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\nimport { Modal } from 'antd';\n\nexport const getRole = () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return user ? user.role : ''\n}\n\nexport const getQuarter = () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return user ? user.curr_quarter : ''\n}\n\nexport const getUserDetails = () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return user ? user.username : ''\n}\n\nexport const getUserInfo = () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return user ?\n        user.role === 'PARTNER' ?\n            { ...user.partner, email: user.email } :\n            { name: user.username, email: user.email } :\n        {}\n}\n\nexport const exportToXLXS = (fileData, fileName) => {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n    const ws = XLSX.utils.json_to_sheet(fileData);\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n}\n\nexport const yearList = () => {\n    let currentYear = Number(moment(new Date()).format('YYYY'));\n    let yearArray = [];\n    for (let i = currentYear - 20; i <= currentYear; i++) {\n        yearArray.unshift(i)\n    }\n    return yearArray\n}\n\nexport const showConfirm = (title, onSuccess) => {\n    Modal.confirm({\n        title: title,\n        okText: 'Ok',\n        cancelText: 'Cancel',\n        onOk() {\n            onSuccess()\n        },\n        onCancel() {\n        },\n    })\n}","export const statusArray = [\n    { name: 'PLANNED', id: 'PLANNED' },\n    { name: 'UNDER DEVELOPMENT', id: 'UNDER_DEVELOPMENT' },\n    { name: 'ON HOLD', id: 'ON_HOLD' },\n    { name: 'DROPPED', id: 'DROPPED' },\n    { name: 'FILED', id: 'FILED' },\n    { name: 'APPROVED', id: 'APPROVED' }\n]\n\nexport const monthArray = [\n    { id: 'January', name: 'January' },\n    { id: 'February', name: 'February' },\n    { id: 'March', name: 'March' },\n    { id: 'April', name: 'April' },\n    { id: 'May', name: 'May' },\n    { id: 'June', name: 'June' },\n    { id: 'July', name: 'July' },\n    { id: 'August', name: 'August' },\n    { id: 'September', name: 'September' },\n    { id: 'October', name: 'October' },\n    { id: 'November', name: 'November' },\n    { id: 'December', name: 'December' }\n]\n\nexport const formulationType = [\n    'Tablet',\n    'Granules',\n    'Liquid',\n    'Powder for suspension',\n    'Oral pellets'\n]\n\nexport const currencyList = {\n    \"AED\": \"United Arab Emirates Dirham\",\n    \"AFN\": \"Afghan Afghani\",\n    \"ALL\": \"Albanian Lek\",\n    \"AMD\": \"Armenian Dram\",\n    \"ANG\": \"Netherlands Antillean Guilder\",\n    \"AOA\": \"Angolan Kwanza\",\n    \"ARS\": \"Argentine Peso\",\n    \"AUD\": \"Australian Dollar\",\n    \"AWG\": \"Aruban Florin\",\n    \"AZN\": \"Azerbaijani Manat\",\n    \"BAM\": \"Bosnia-Herzegovina Convertible Mark\",\n    \"BBD\": \"Barbadian Dollar\",\n    \"BDT\": \"Bangladeshi Taka\",\n    \"BGN\": \"Bulgarian Lev\",\n    \"BHD\": \"Bahraini Dinar\",\n    \"BIF\": \"Burundian Franc\",\n    \"BMD\": \"Bermudan Dollar\",\n    \"BND\": \"Brunei Dollar\",\n    \"BOB\": \"Bolivian Boliviano\",\n    \"BRL\": \"Brazilian Real\",\n    \"BSD\": \"Bahamian Dollar\",\n    \"BTC\": \"Bitcoin\",\n    \"BTN\": \"Bhutanese Ngultrum\",\n    \"BWP\": \"Botswanan Pula\",\n    \"BYN\": \"Belarusian Ruble\",\n    \"BZD\": \"Belize Dollar\",\n    \"CAD\": \"Canadian Dollar\",\n    \"CDF\": \"Congolese Franc\",\n    \"CHF\": \"Swiss Franc\",\n    \"CLF\": \"Chilean Unit of Account (UF)\",\n    \"CLP\": \"Chilean Peso\",\n    \"CNH\": \"Chinese Yuan (Offshore)\",\n    \"CNY\": \"Chinese Yuan\",\n    \"COP\": \"Colombian Peso\",\n    \"CRC\": \"Costa Rican Colón\",\n    \"CUC\": \"Cuban Convertible Peso\",\n    \"CUP\": \"Cuban Peso\",\n    \"CVE\": \"Cape Verdean Escudo\",\n    \"CZK\": \"Czech Republic Koruna\",\n    \"DJF\": \"Djiboutian Franc\",\n    \"DKK\": \"Danish Krone\",\n    \"DOP\": \"Dominican Peso\",\n    \"DZD\": \"Algerian Dinar\",\n    \"EGP\": \"Egyptian Pound\",\n    \"ERN\": \"Eritrean Nakfa\",\n    \"ETB\": \"Ethiopian Birr\",\n    \"EUR\": \"Euro\",\n    \"FJD\": \"Fijian Dollar\",\n    \"FKP\": \"Falkland Islands Pound\",\n    \"GBP\": \"British Pound Sterling\",\n    \"GEL\": \"Georgian Lari\",\n    \"GGP\": \"Guernsey Pound\",\n    \"GHS\": \"Ghanaian Cedi\",\n    \"GIP\": \"Gibraltar Pound\",\n    \"GMD\": \"Gambian Dalasi\",\n    \"GNF\": \"Guinean Franc\",\n    \"GTQ\": \"Guatemalan Quetzal\",\n    \"GYD\": \"Guyanaese Dollar\",\n    \"HKD\": \"Hong Kong Dollar\",\n    \"HNL\": \"Honduran Lempira\",\n    \"HRK\": \"Croatian Kuna\",\n    \"HTG\": \"Haitian Gourde\",\n    \"HUF\": \"Hungarian Forint\",\n    \"IDR\": \"Indonesian Rupiah\",\n    \"ILS\": \"Israeli New Sheqel\",\n    \"IMP\": \"Manx pound\",\n    \"INR\": \"Indian Rupee\",\n    \"IQD\": \"Iraqi Dinar\",\n    \"IRR\": \"Iranian Rial\",\n    \"ISK\": \"Icelandic Króna\",\n    \"JEP\": \"Jersey Pound\",\n    \"JMD\": \"Jamaican Dollar\",\n    \"JOD\": \"Jordanian Dinar\",\n    \"JPY\": \"Japanese Yen\",\n    \"KES\": \"Kenyan Shilling\",\n    \"KGS\": \"Kyrgystani Som\",\n    \"KHR\": \"Cambodian Riel\",\n    \"KMF\": \"Comorian Franc\",\n    \"KPW\": \"North Korean Won\",\n    \"KRW\": \"South Korean Won\",\n    \"KWD\": \"Kuwaiti Dinar\",\n    \"KYD\": \"Cayman Islands Dollar\",\n    \"KZT\": \"Kazakhstani Tenge\",\n    \"LAK\": \"Laotian Kip\",\n    \"LBP\": \"Lebanese Pound\",\n    \"LKR\": \"Sri Lankan Rupee\",\n    \"LRD\": \"Liberian Dollar\",\n    \"LSL\": \"Lesotho Loti\",\n    \"LYD\": \"Libyan Dinar\",\n    \"MAD\": \"Moroccan Dirham\",\n    \"MDL\": \"Moldovan Leu\",\n    \"MGA\": \"Malagasy Ariary\",\n    \"MKD\": \"Macedonian Denar\",\n    \"MMK\": \"Myanma Kyat\",\n    \"MNT\": \"Mongolian Tugrik\",\n    \"MOP\": \"Macanese Pataca\",\n    \"MRO\": \"Mauritanian Ouguiya (pre-2018)\",\n    \"MRU\": \"Mauritanian Ouguiya\",\n    \"MUR\": \"Mauritian Rupee\",\n    \"MVR\": \"Maldivian Rufiyaa\",\n    \"MWK\": \"Malawian Kwacha\",\n    \"MXN\": \"Mexican Peso\",\n    \"MYR\": \"Malaysian Ringgit\",\n    \"MZN\": \"Mozambican Metical\",\n    \"NAD\": \"Namibian Dollar\",\n    \"NGN\": \"Nigerian Naira\",\n    \"NIO\": \"Nicaraguan Córdoba\",\n    \"NOK\": \"Norwegian Krone\",\n    \"NPR\": \"Nepalese Rupee\",\n    \"NZD\": \"New Zealand Dollar\",\n    \"OMR\": \"Omani Rial\",\n    \"PAB\": \"Panamanian Balboa\",\n    \"PEN\": \"Peruvian Nuevo Sol\",\n    \"PGK\": \"Papua New Guinean Kina\",\n    \"PHP\": \"Philippine Peso\",\n    \"PKR\": \"Pakistani Rupee\",\n    \"PLN\": \"Polish Zloty\",\n    \"PYG\": \"Paraguayan Guarani\",\n    \"QAR\": \"Qatari Rial\",\n    \"RON\": \"Romanian Leu\",\n    \"RSD\": \"Serbian Dinar\",\n    \"RUB\": \"Russian Ruble\",\n    \"RWF\": \"Rwandan Franc\",\n    \"SAR\": \"Saudi Riyal\",\n    \"SBD\": \"Solomon Islands Dollar\",\n    \"SCR\": \"Seychellois Rupee\",\n    \"SDG\": \"Sudanese Pound\",\n    \"SEK\": \"Swedish Krona\",\n    \"SGD\": \"Singapore Dollar\",\n    \"SHP\": \"Saint Helena Pound\",\n    \"SLL\": \"Sierra Leonean Leone\",\n    \"SOS\": \"Somali Shilling\",\n    \"SRD\": \"Surinamese Dollar\",\n    \"SSP\": \"South Sudanese Pound\",\n    \"STD\": \"São Tomé and Príncipe Dobra (pre-2018)\",\n    \"STN\": \"São Tomé and Príncipe Dobra\",\n    \"SVC\": \"Salvadoran Colón\",\n    \"SYP\": \"Syrian Pound\",\n    \"SZL\": \"Swazi Lilangeni\",\n    \"THB\": \"Thai Baht\",\n    \"TJS\": \"Tajikistani Somoni\",\n    \"TMT\": \"Turkmenistani Manat\",\n    \"TND\": \"Tunisian Dinar\",\n    \"TOP\": \"Tongan Pa'anga\",\n    \"TRY\": \"Turkish Lira\",\n    \"TTD\": \"Trinidad and Tobago Dollar\",\n    \"TWD\": \"New Taiwan Dollar\",\n    \"TZS\": \"Tanzanian Shilling\",\n    \"UAH\": \"Ukrainian Hryvnia\",\n    \"UGX\": \"Ugandan Shilling\",\n    \"USD\": \"United States Dollar\",\n    \"UYU\": \"Uruguayan Peso\",\n    \"UZS\": \"Uzbekistan Som\",\n    \"VEF\": \"Venezuelan Bolívar Fuerte (Old)\",\n    \"VES\": \"Venezuelan Bolívar Soberano\",\n    \"VND\": \"Vietnamese Dong\",\n    \"VUV\": \"Vanuatu Vatu\",\n    \"WST\": \"Samoan Tala\",\n    \"XAF\": \"CFA Franc BEAC\",\n    \"XAG\": \"Silver Ounce\",\n    \"XAU\": \"Gold Ounce\",\n    \"XCD\": \"East Caribbean Dollar\",\n    \"XDR\": \"Special Drawing Rights\",\n    \"XOF\": \"CFA Franc BCEAO\",\n    \"XPD\": \"Palladium Ounce\",\n    \"XPF\": \"CFP Franc\",\n    \"XPT\": \"Platinum Ounce\",\n    \"YER\": \"Yemeni Rial\",\n    \"ZAR\": \"South African Rand\",\n    \"ZMW\": \"Zambian Kwacha\",\n    \"ZWL\": \"Zimbabwean Dollar\"\n}\n\nexport const countryList = [\n    \"Afghanistan\",\n    \"Albania\",\n    \"Algeria\",\n    \"American Samoa\",\n    \"Andorra\",\n    \"Angola\",\n    \"Anguilla\",\n    \"Antarctica\",\n    \"Antigua and Barbuda\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Aruba\",\n    \"Australia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"Bahamas (the)\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Barbados\",\n    \"Belarus\",\n    \"Belgium\",\n    \"Belize\",\n    \"Benin\",\n    \"Bermuda\",\n    \"Bhutan\",\n    \"Bolivia (Plurinational State of)\",\n    \"Bonaire, Sint Eustatius and Saba\",\n    \"Bosnia and Herzegovina\",\n    \"Botswana\",\n    \"Bouvet Island\",\n    \"Brazil\",\n    \"British Indian Ocean Territory (the)\",\n    \"Brunei Darussalam\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Burundi\",\n    \"Cabo Verde\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Canada\",\n    \"Cayman Islands (the)\",\n    \"Central African Republic (the)\",\n    \"Chad\",\n    \"Chile\",\n    \"China\",\n    \"Christmas Island\",\n    \"Cocos (Keeling) Islands (the)\",\n    \"Colombia\",\n    \"Comoros (the)\",\n    \"Congo (the Democratic Republic of the)\",\n    \"Congo (the)\",\n    \"Cook Islands (the)\",\n    \"Costa Rica\",\n    \"Croatia\",\n    \"Cuba\",\n    \"Curaçao\",\n    \"Cyprus\",\n    \"Czechia\",\n    \"Côte d'Ivoire\",\n    \"Denmark\",\n    \"Djibouti\",\n    \"Dominica\",\n    \"Dominican Republic (the)\",\n    \"Ecuador\",\n    \"Egypt\",\n    \"El Salvador\",\n    \"Equatorial Guinea\",\n    \"Eritrea\",\n    \"Estonia\",\n    \"Eswatini\",\n    \"Ethiopia\",\n    \"Falkland Islands (the) [Malvinas]\",\n    \"Faroe Islands (the)\",\n    \"Fiji\",\n    \"Finland\",\n    \"France\",\n    \"French Guiana\",\n    \"French Polynesia\",\n    \"French Southern Territories (the)\",\n    \"Gabon\",\n    \"Gambia (the)\",\n    \"Georgia\",\n    \"Germany\",\n    \"Ghana\",\n    \"Gibraltar\",\n    \"Greece\",\n    \"Greenland\",\n    \"Grenada\",\n    \"Guadeloupe\",\n    \"Guam\",\n    \"Guatemala\",\n    \"Guernsey\",\n    \"Guinea\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Haiti\",\n    \"Heard Island and McDonald Islands\",\n    \"Holy See (the)\",\n    \"Honduras\",\n    \"Hong Kong\",\n    \"Hungary\",\n    \"Iceland\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran (Islamic Republic of)\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Isle of Man\",\n    \"Israel\",\n    \"Italy\",\n    \"Jamaica\",\n    \"Japan\",\n    \"Jersey\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kenya\",\n    \"Kiribati\",\n    \"Korea (the Democratic People's Republic of)\",\n    \"Korea (the Republic of)\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Lao People's Democratic Republic (the)\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Lesotho\",\n    \"Liberia\",\n    \"Libya\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Macao\",\n    \"Madagascar\",\n    \"Malawi\",\n    \"Malaysia\",\n    \"Maldives\",\n    \"Mali\",\n    \"Malta\",\n    \"Marshall Islands (the)\",\n    \"Martinique\",\n    \"Mauritania\",\n    \"Mauritius\",\n    \"Mayotte\",\n    \"Mexico\",\n    \"Micronesia (Federated States of)\",\n    \"Moldova (the Republic of)\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montenegro\",\n    \"Montserrat\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar\",\n    \"Namibia\",\n    \"Nauru\",\n    \"Nepal\",\n    \"Netherlands (the)\",\n    \"New Caledonia\",\n    \"New Zealand\",\n    \"Nicaragua\",\n    \"Niger (the)\",\n    \"Nigeria\",\n    \"Niue\",\n    \"Norfolk Island\",\n    \"Northern Mariana Islands (the)\",\n    \"Norway\",\n    \"Oman\",\n    \"Pakistan\",\n    \"Palau\",\n    \"Palestine, State of\",\n    \"Panama\",\n    \"Papua New Guinea\",\n    \"Paraguay\",\n    \"Peru\",\n    \"Philippines (the)\",\n    \"Pitcairn\",\n    \"Poland\",\n    \"Portugal\",\n    \"Puerto Rico\",\n    \"Qatar\",\n    \"Republic of North Macedonia\",\n    \"Romania\",\n    \"Russian Federation (the)\",\n    \"Rwanda\",\n    \"Réunion\",\n    \"Saint Barthélemy\",\n    \"Saint Helena, Ascension and Tristan da Cunha\",\n    \"Saint Kitts and Nevis\",\n    \"Saint Lucia\",\n    \"Saint Martin (French part)\",\n    \"Saint Pierre and Miquelon\",\n    \"Saint Vincent and the Grenadines\",\n    \"Samoa\",\n    \"San Marino\",\n    \"Sao Tome and Principe\",\n    \"Saudi Arabia\",\n    \"Senegal\",\n    \"Serbia\",\n    \"Seychelles\",\n    \"Sierra Leone\",\n    \"Singapore\",\n    \"Sint Maarten (Dutch part)\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Solomon Islands\",\n    \"Somalia\",\n    \"South Africa\",\n    \"South Georgia and the South Sandwich Islands\",\n    \"South Sudan\",\n    \"Spain\",\n    \"Sri Lanka\",\n    \"Sudan (the)\",\n    \"Suriname\",\n    \"Svalbard and Jan Mayen\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Syrian Arab Republic\",\n    \"Taiwan\",\n    \"Tajikistan\",\n    \"Tanzania, United Republic of\",\n    \"Thailand\",\n    \"Timor-Leste\",\n    \"Togo\",\n    \"Tokelau\",\n    \"Tonga\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkey\",\n    \"Turkmenistan\",\n    \"Turks and Caicos Islands (the)\",\n    \"Tuvalu\",\n    \"Uganda\",\n    \"Ukraine\",\n    \"United Arab Emirates (the)\",\n    \"United Kingdom of Great Britain and Northern Ireland (the)\",\n    \"United States Minor Outlying Islands (the)\",\n    \"United States of America (the)\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vanuatu\",\n    \"Venezuela (Bolivarian Republic of)\",\n    \"Viet Nam\",\n    \"Virgin Islands (British)\",\n    \"Virgin Islands (U.S.)\",\n    \"Wallis and Futuna\",\n    \"Western Sahara\",\n    \"Yemen\",\n    \"Zambia\",\n    \"Zimbabwe\",\n    \"Åland Islands\"\n];\n\nexport const countryCodeList = [\n    {\n        \"code\": \"+7 840\",\n        \"name\": \"Abkhazia\"\n    },\n    {\n        \"code\": \"+93\",\n        \"name\": \"Afghanistan\"\n    },\n    {\n        \"code\": \"+355\",\n        \"name\": \"Albania\"\n    },\n    {\n        \"code\": \"+213\",\n        \"name\": \"Algeria\"\n    },\n    {\n        \"code\": \"+1 684\",\n        \"name\": \"American Samoa\"\n    },\n    {\n        \"code\": \"+376\",\n        \"name\": \"Andorra\"\n    },\n    {\n        \"code\": \"+244\",\n        \"name\": \"Angola\"\n    },\n    {\n        \"code\": \"+1 264\",\n        \"name\": \"Anguilla\"\n    },\n    {\n        \"code\": \"+1 268\",\n        \"name\": \"Antigua and Barbuda\"\n    },\n    {\n        \"code\": \"+54\",\n        \"name\": \"Argentina\"\n    },\n    {\n        \"code\": \"+374\",\n        \"name\": \"Armenia\"\n    },\n    {\n        \"code\": \"+297\",\n        \"name\": \"Aruba\"\n    },\n    {\n        \"code\": \"+247\",\n        \"name\": \"Ascension\"\n    },\n    {\n        \"code\": \"+61\",\n        \"name\": \"Australia\"\n    },\n    {\n        \"code\": \"+672\",\n        \"name\": \"Australian External Territories\"\n    },\n    {\n        \"code\": \"+43\",\n        \"name\": \"Austria\"\n    },\n    {\n        \"code\": \"+994\",\n        \"name\": \"Azerbaijan\"\n    },\n    {\n        \"code\": \"+1 242\",\n        \"name\": \"Bahamas\"\n    },\n    {\n        \"code\": \"+973\",\n        \"name\": \"Bahrain\"\n    },\n    {\n        \"code\": \"+880\",\n        \"name\": \"Bangladesh\"\n    },\n    {\n        \"code\": \"+1 246\",\n        \"name\": \"Barbados\"\n    },\n    {\n        \"code\": \"+375\",\n        \"name\": \"Belarus\"\n    },\n    {\n        \"code\": \"+32\",\n        \"name\": \"Belgium\"\n    },\n    {\n        \"code\": \"+501\",\n        \"name\": \"Belize\"\n    },\n    {\n        \"code\": \"+229\",\n        \"name\": \"Benin\"\n    },\n    {\n        \"code\": \"+1 441\",\n        \"name\": \"Bermuda\"\n    },\n    {\n        \"code\": \"+975\",\n        \"name\": \"Bhutan\"\n    },\n    {\n        \"code\": \"+591\",\n        \"name\": \"Bolivia\"\n    },\n    {\n        \"code\": \"+387\",\n        \"name\": \"Bosnia and Herzegovina\"\n    },\n    {\n        \"code\": \"+267\",\n        \"name\": \"Botswana\"\n    },\n    {\n        \"code\": \"+55\",\n        \"name\": \"Brazil\"\n    },\n    {\n        \"code\": \"+246\",\n        \"name\": \"British Indian Ocean Territory\"\n    },\n    {\n        \"code\": \"+1 284\",\n        \"name\": \"British Virgin Islands\"\n    },\n    {\n        \"code\": \"+673\",\n        \"name\": \"Brunei\"\n    },\n    {\n        \"code\": \"+359\",\n        \"name\": \"Bulgaria\"\n    },\n    {\n        \"code\": \"+226\",\n        \"name\": \"Burkina Faso\"\n    },\n    {\n        \"code\": \"+257\",\n        \"name\": \"Burundi\"\n    },\n    {\n        \"code\": \"+855\",\n        \"name\": \"Cambodia\"\n    },\n    {\n        \"code\": \"+237\",\n        \"name\": \"Cameroon\"\n    },\n    {\n        \"code\": \"+1\",\n        \"name\": \"Canada\"\n    },\n    {\n        \"code\": \"+238\",\n        \"name\": \"Cape Verde\"\n    },\n    {\n        \"code\": \"+345\",\n        \"name\": \"Cayman Islands\"\n    },\n    {\n        \"code\": \"+236\",\n        \"name\": \"Central African Republic\"\n    },\n    {\n        \"code\": \"+235\",\n        \"name\": \"Chad\"\n    },\n    {\n        \"code\": \"+56\",\n        \"name\": \"Chile\"\n    },\n    {\n        \"code\": \"+86\",\n        \"name\": \"China\"\n    },\n    {\n        \"code\": \"+57\",\n        \"name\": \"Colombia\"\n    },\n    {\n        \"code\": \"+269\",\n        \"name\": \"Comoros\"\n    },\n    {\n        \"code\": \"+242\",\n        \"name\": \"Congo\"\n    },\n    {\n        \"code\": \"+243\",\n        \"name\": \"Congo, Dem. Rep. of (Zaire)\"\n    },\n    {\n        \"code\": \"+682\",\n        \"name\": \"Cook Islands\"\n    },\n    {\n        \"code\": \"+506\",\n        \"name\": \"Costa Rica\"\n    },\n    {\n        \"code\": \"+385\",\n        \"name\": \"Croatia\"\n    },\n    {\n        \"code\": \"+53\",\n        \"name\": \"Cuba\"\n    },\n    {\n        \"code\": \"+599\",\n        \"name\": \"Curacao\"\n    },\n    {\n        \"code\": \"+537\",\n        \"name\": \"Cyprus\"\n    },\n    {\n        \"code\": \"+420\",\n        \"name\": \"Czech Republic\"\n    },\n    {\n        \"code\": \"+45\",\n        \"name\": \"Denmark\"\n    },\n    {\n        \"code\": \"+253\",\n        \"name\": \"Djibouti\"\n    },\n    {\n        \"code\": \"+1 767\",\n        \"name\": \"Dominica\"\n    },\n    {\n        \"code\": \"+1 809\",\n        \"name\": \"Dominican Republic\"\n    },\n    {\n        \"code\": \"+670\",\n        \"name\": \"East Timor\"\n    },\n    {\n        \"code\": \"+593\",\n        \"name\": \"Ecuador\"\n    },\n    {\n        \"code\": \"+20\",\n        \"name\": \"Egypt\"\n    },\n    {\n        \"code\": \"+503\",\n        \"name\": \"El Salvador\"\n    },\n    {\n        \"code\": \"+240\",\n        \"name\": \"Equatorial Guinea\"\n    },\n    {\n        \"code\": \"+291\",\n        \"name\": \"Eritrea\"\n    },\n    {\n        \"code\": \"+372\",\n        \"name\": \"Estonia\"\n    },\n    {\n        \"code\": \"+251\",\n        \"name\": \"Ethiopia\"\n    },\n    {\n        \"code\": \"+500\",\n        \"name\": \"Falkland Islands\"\n    },\n    {\n        \"code\": \"+298\",\n        \"name\": \"Faroe Islands\"\n    },\n    {\n        \"code\": \"+679\",\n        \"name\": \"Fiji\"\n    },\n    {\n        \"code\": \"+358\",\n        \"name\": \"Finland\"\n    },\n    {\n        \"code\": \"+33\",\n        \"name\": \"France\"\n    },\n    {\n        \"code\": \"+596\",\n        \"name\": \"French Antilles\"\n    },\n    {\n        \"code\": \"+594\",\n        \"name\": \"French Guiana\"\n    },\n    {\n        \"code\": \"+689\",\n        \"name\": \"French Polynesia\"\n    },\n    {\n        \"code\": \"+241\",\n        \"name\": \"Gabon\"\n    },\n    {\n        \"code\": \"+220\",\n        \"name\": \"Gambia\"\n    },\n    {\n        \"code\": \"+995\",\n        \"name\": \"Georgia\"\n    },\n    {\n        \"code\": \"+49\",\n        \"name\": \"Germany\"\n    },\n    {\n        \"code\": \"+233\",\n        \"name\": \"Ghana\"\n    },\n    {\n        \"code\": \"+350\",\n        \"name\": \"Gibraltar\"\n    },\n    {\n        \"code\": \"+30\",\n        \"name\": \"Greece\"\n    },\n    {\n        \"code\": \"+299\",\n        \"name\": \"Greenland\"\n    },\n    {\n        \"code\": \"+1 473\",\n        \"name\": \"Grenada\"\n    },\n    {\n        \"code\": \"+590\",\n        \"name\": \"Guadeloupe\"\n    },\n    {\n        \"code\": \"+1 671\",\n        \"name\": \"Guam\"\n    },\n    {\n        \"code\": \"+502\",\n        \"name\": \"Guatemala\"\n    },\n    {\n        \"code\": \"+224\",\n        \"name\": \"Guinea\"\n    },\n    {\n        \"code\": \"+245\",\n        \"name\": \"Guinea-Bissau\"\n    },\n    {\n        \"code\": \"+595\",\n        \"name\": \"Guyana\"\n    },\n    {\n        \"code\": \"+509\",\n        \"name\": \"Haiti\"\n    },\n    {\n        \"code\": \"+504\",\n        \"name\": \"Honduras\"\n    },\n    {\n        \"code\": \"+852\",\n        \"name\": \"Hong Kong SAR China\"\n    },\n    {\n        \"code\": \"+36\",\n        \"name\": \"Hungary\"\n    },\n    {\n        \"code\": \"+354\",\n        \"name\": \"Iceland\"\n    },\n    {\n        \"code\": \"+91\",\n        \"name\": \"India\"\n    },\n    {\n        \"code\": \"+62\",\n        \"name\": \"Indonesia\"\n    },\n    {\n        \"code\": \"+98\",\n        \"name\": \"Iran\"\n    },\n    {\n        \"code\": \"+964\",\n        \"name\": \"Iraq\"\n    },\n    {\n        \"code\": \"+353\",\n        \"name\": \"Ireland\"\n    },\n    {\n        \"code\": \"+972\",\n        \"name\": \"Israel\"\n    },\n    {\n        \"code\": \"+39\",\n        \"name\": \"Italy\"\n    },\n    {\n        \"code\": \"+225\",\n        \"name\": \"Ivory Coast\"\n    },\n    {\n        \"code\": \"+1 876\",\n        \"name\": \"Jamaica\"\n    },\n    {\n        \"code\": \"+81\",\n        \"name\": \"Japan\"\n    },\n    {\n        \"code\": \"+962\",\n        \"name\": \"Jordan\"\n    },\n    {\n        \"code\": \"+7 7\",\n        \"name\": \"Kazakhstan\"\n    },\n    {\n        \"code\": \"+254\",\n        \"name\": \"Kenya\"\n    },\n    {\n        \"code\": \"+686\",\n        \"name\": \"Kiribati\"\n    },\n    {\n        \"code\": \"+965\",\n        \"name\": \"Kuwait\"\n    },\n    {\n        \"code\": \"+996\",\n        \"name\": \"Kyrgyzstan\"\n    },\n    {\n        \"code\": \"+856\",\n        \"name\": \"Laos\"\n    },\n    {\n        \"code\": \"+371\",\n        \"name\": \"Latvia\"\n    },\n    {\n        \"code\": \"+961\",\n        \"name\": \"Lebanon\"\n    },\n    {\n        \"code\": \"+266\",\n        \"name\": \"Lesotho\"\n    },\n    {\n        \"code\": \"+231\",\n        \"name\": \"Liberia\"\n    },\n    {\n        \"code\": \"+218\",\n        \"name\": \"Libya\"\n    },\n    {\n        \"code\": \"+423\",\n        \"name\": \"Liechtenstein\"\n    },\n    {\n        \"code\": \"+370\",\n        \"name\": \"Lithuania\"\n    },\n    {\n        \"code\": \"+352\",\n        \"name\": \"Luxembourg\"\n    },\n    {\n        \"code\": \"+853\",\n        \"name\": \"Macau SAR China\"\n    },\n    {\n        \"code\": \"+389\",\n        \"name\": \"Macedonia\"\n    },\n    {\n        \"code\": \"+261\",\n        \"name\": \"Madagascar\"\n    },\n    {\n        \"code\": \"+265\",\n        \"name\": \"Malawi\"\n    },\n    {\n        \"code\": \"+60\",\n        \"name\": \"Malaysia\"\n    },\n    {\n        \"code\": \"+960\",\n        \"name\": \"Maldives\"\n    },\n    {\n        \"code\": \"+223\",\n        \"name\": \"Mali\"\n    },\n    {\n        \"code\": \"+356\",\n        \"name\": \"Malta\"\n    },\n    {\n        \"code\": \"+692\",\n        \"name\": \"Marshall Islands\"\n    },\n    {\n        \"code\": \"+222\",\n        \"name\": \"Mauritania\"\n    },\n    {\n        \"code\": \"+230\",\n        \"name\": \"Mauritius\"\n    },\n    {\n        \"code\": \"+52\",\n        \"name\": \"Mexico\"\n    },\n    {\n        \"code\": \"+691\",\n        \"name\": \"Micronesia\"\n    },\n    {\n        \"code\": \"+1 808\",\n        \"name\": \"Midway Island\"\n    },\n    {\n        \"code\": \"+373\",\n        \"name\": \"Moldova\"\n    },\n    {\n        \"code\": \"+377\",\n        \"name\": \"Monaco\"\n    },\n    {\n        \"code\": \"+976\",\n        \"name\": \"Mongolia\"\n    },\n    {\n        \"code\": \"+382\",\n        \"name\": \"Montenegro\"\n    },\n    {\n        \"code\": \"+1664\",\n        \"name\": \"Montserrat\"\n    },\n    {\n        \"code\": \"+212\",\n        \"name\": \"Morocco\"\n    },\n    {\n        \"code\": \"+95\",\n        \"name\": \"Myanmar\"\n    },\n    {\n        \"code\": \"+264\",\n        \"name\": \"Namibia\"\n    },\n    {\n        \"code\": \"+674\",\n        \"name\": \"Nauru\"\n    },\n    {\n        \"code\": \"+977\",\n        \"name\": \"Nepal\"\n    },\n    {\n        \"code\": \"+31\",\n        \"name\": \"Netherlands\"\n    },\n    {\n        \"code\": \"+1 869\",\n        \"name\": \"Nevis\"\n    },\n    {\n        \"code\": \"+687\",\n        \"name\": \"New Caledonia\"\n    },\n    {\n        \"code\": \"+64\",\n        \"name\": \"New Zealand\"\n    },\n    {\n        \"code\": \"+505\",\n        \"name\": \"Nicaragua\"\n    },\n    {\n        \"code\": \"+227\",\n        \"name\": \"Niger\"\n    },\n    {\n        \"code\": \"+234\",\n        \"name\": \"Nigeria\"\n    },\n    {\n        \"code\": \"+683\",\n        \"name\": \"Niue\"\n    },\n    {\n        \"code\": \"+850\",\n        \"name\": \"North Korea\"\n    },\n    {\n        \"code\": \"+1 670\",\n        \"name\": \"Northern Mariana Islands\"\n    },\n    {\n        \"code\": \"+47\",\n        \"name\": \"Norway\"\n    },\n    {\n        \"code\": \"+968\",\n        \"name\": \"Oman\"\n    },\n    {\n        \"code\": \"+92\",\n        \"name\": \"Pakistan\"\n    },\n    {\n        \"code\": \"+680\",\n        \"name\": \"Palau\"\n    },\n    {\n        \"code\": \"+970\",\n        \"name\": \"Palestinian Territory\"\n    },\n    {\n        \"code\": \"+507\",\n        \"name\": \"Panama\"\n    },\n    {\n        \"code\": \"+675\",\n        \"name\": \"Papua New Guinea\"\n    },\n    {\n        \"code\": \"+51\",\n        \"name\": \"Peru\"\n    },\n    {\n        \"code\": \"+63\",\n        \"name\": \"Philippines\"\n    },\n    {\n        \"code\": \"+48\",\n        \"name\": \"Poland\"\n    },\n    {\n        \"code\": \"+351\",\n        \"name\": \"Portugal\"\n    },\n    {\n        \"code\": \"+1 787\",\n        \"name\": \"Puerto Rico\"\n    },\n    {\n        \"code\": \"+974\",\n        \"name\": \"Qatar\"\n    },\n    {\n        \"code\": \"+262\",\n        \"name\": \"Reunion\"\n    },\n    {\n        \"code\": \"+40\",\n        \"name\": \"Romania\"\n    },\n    {\n        \"code\": \"+7\",\n        \"name\": \"Russia\"\n    },\n    {\n        \"code\": \"+250\",\n        \"name\": \"Rwanda\"\n    },\n    {\n        \"code\": \"+685\",\n        \"name\": \"Samoa\"\n    },\n    {\n        \"code\": \"+378\",\n        \"name\": \"San Marino\"\n    },\n    {\n        \"code\": \"+966\",\n        \"name\": \"Saudi Arabia\"\n    },\n    {\n        \"code\": \"+221\",\n        \"name\": \"Senegal\"\n    },\n    {\n        \"code\": \"+381\",\n        \"name\": \"Serbia\"\n    },\n    {\n        \"code\": \"+248\",\n        \"name\": \"Seychelles\"\n    },\n    {\n        \"code\": \"+232\",\n        \"name\": \"Sierra Leone\"\n    },\n    {\n        \"code\": \"+65\",\n        \"name\": \"Singapore\"\n    },\n    {\n        \"code\": \"+421\",\n        \"name\": \"Slovakia\"\n    },\n    {\n        \"code\": \"+386\",\n        \"name\": \"Slovenia\"\n    },\n    {\n        \"code\": \"+677\",\n        \"name\": \"Solomon Islands\"\n    },\n    {\n        \"code\": \"+27\",\n        \"name\": \"South Africa\"\n    },\n    {\n        \"code\": \"+82\",\n        \"name\": \"South Korea\"\n    },\n    {\n        \"code\": \"+34\",\n        \"name\": \"Spain\"\n    },\n    {\n        \"code\": \"+94\",\n        \"name\": \"Sri Lanka\"\n    },\n    {\n        \"code\": \"+249\",\n        \"name\": \"Sudan\"\n    },\n    {\n        \"code\": \"+597\",\n        \"name\": \"Suriname\"\n    },\n    {\n        \"code\": \"+268\",\n        \"name\": \"Swaziland\"\n    },\n    {\n        \"code\": \"+46\",\n        \"name\": \"Sweden\"\n    },\n    {\n        \"code\": \"+41\",\n        \"name\": \"Switzerland\"\n    },\n    {\n        \"code\": \"+963\",\n        \"name\": \"Syria\"\n    },\n    {\n        \"code\": \"+886\",\n        \"name\": \"Taiwan\"\n    },\n    {\n        \"code\": \"+992\",\n        \"name\": \"Tajikistan\"\n    },\n    {\n        \"code\": \"+255\",\n        \"name\": \"Tanzania\"\n    },\n    {\n        \"code\": \"+66\",\n        \"name\": \"Thailand\"\n    },\n    {\n        \"code\": \"+228\",\n        \"name\": \"Togo\"\n    },\n    {\n        \"code\": \"+690\",\n        \"name\": \"Tokelau\"\n    },\n    {\n        \"code\": \"+676\",\n        \"name\": \"Tonga\"\n    },\n    {\n        \"code\": \"+1 868\",\n        \"name\": \"Trinidad and Tobago\"\n    },\n    {\n        \"code\": \"+216\",\n        \"name\": \"Tunisia\"\n    },\n    {\n        \"code\": \"+90\",\n        \"name\": \"Turkey\"\n    },\n    {\n        \"code\": \"+993\",\n        \"name\": \"Turkmenistan\"\n    },\n    {\n        \"code\": \"+1 649\",\n        \"name\": \"Turks and Caicos Islands\"\n    },\n    {\n        \"code\": \"+688\",\n        \"name\": \"Tuvalu\"\n    },\n    {\n        \"code\": \"+1 340\",\n        \"name\": \"U.S. Virgin Islands\"\n    },\n    {\n        \"code\": \"+256\",\n        \"name\": \"Uganda\"\n    },\n    {\n        \"code\": \"+380\",\n        \"name\": \"Ukraine\"\n    },\n    {\n        \"code\": \"+971\",\n        \"name\": \"United Arab Emirates\"\n    },\n    {\n        \"code\": \"+44\",\n        \"name\": \"United Kingdom\"\n    },\n    {\n        \"code\": \"+598\",\n        \"name\": \"Uruguay\"\n    },\n    {\n        \"code\": \"+998\",\n        \"name\": \"Uzbekistan\"\n    },\n    {\n        \"code\": \"+678\",\n        \"name\": \"Vanuatu\"\n    },\n    {\n        \"code\": \"+58\",\n        \"name\": \"Venezuela\"\n    },\n    {\n        \"code\": \"+84\",\n        \"name\": \"Vietnam\"\n    },\n    {\n        \"code\": \"+681\",\n        \"name\": \"Wallis and Futuna\"\n    },\n    {\n        \"code\": \"+967\",\n        \"name\": \"Yemen\"\n    },\n    {\n        \"code\": \"+260\",\n        \"name\": \"Zambia\"\n    },\n    {\n        \"code\": \"+263\",\n        \"name\": \"Zimbabwe\"\n    }\n]","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport CustomScrollbars from 'util/CustomScrollbars';\nimport SidebarLogo from './SidebarLogo';\nimport {\n  // NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n  NAV_STYLE_FIXED,\n  THEME_TYPE_LITE\n} from '../../constants/ThemeSetting';\nimport IntlMessages from '../../util/IntlMessages';\nimport { getRole } from '../../helpers';\nimport { MedicineBoxOutlined, UsergroupAddOutlined, FileSearchOutlined, BarChartOutlined, LogoutOutlined, LockOutlined } from '@ant-design/icons'\n// import UserProfile from './UserProfile';\n\nconst SidebarContent = (props) => {\n\n  let { navStyle, themeType, pathname } = useSelector(({ settings }) => settings);\n  const [isUserAdmin, setIsUserAdmin] = useState(false);\n  const [isUserStaff, setIsUserStaff] = useState(false);\n\n  // const getNoHeaderClass = (navStyle) => {\n  //   if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n  //     return 'gx-no-header-notifications';\n  //   }\n  //   return '';\n  // };\n  const getNavStyleSubMenuClass = (navStyle) => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n      return 'gx-no-header-submenu-popup';\n    }\n    return '';\n  };\n  const selectedKeys = pathname.substr(1);\n  const defaultOpenKeys = selectedKeys.split('/')[(selectedKeys.split('/').length - 1)];\n\n  const getMenuItems = () => {\n    return {\n      'menuItems': isUserAdmin || isUserStaff ?\n        [\n          {\n            key: 'dashboard',\n            link: '/admin/dashboard',\n            icon: (<i className='icon icon-dasbhoard' />),\n            name_id: 'sidebar.dashboard'\n          },\n          {\n            key: 'partner-list',\n            link: '/admin/partner-list',\n            icon: (<UsergroupAddOutlined className='font-20' />),\n            name_id: 'sidebar.partnerList'\n          },\n          {\n            key: 'product-list',\n            link: '/admin/product-list',\n            icon: (<MedicineBoxOutlined className='font-20' />),\n            name_id: 'sidebar.productList'\n          },\n        ] :\n        [\n          {\n            key: 'dashboard',\n            link: '/partner/dashboard',\n            icon: (<i className='icon icon-dasbhoard' />),\n            name_id: 'sidebar.dashboard'\n          }\n        ],\n      'submenuItems': isUserAdmin || isUserStaff ?\n        [\n          {\n            key: 'development-timeline',\n            link: '/admin/report/development-timeline',\n            icon: (<i className='icon icon-timeline font-16' />),\n            name_id: 'sidebar.pdt'\n          },\n          {\n            key: 'filing-plans',\n            link: '/admin/report/filing-plans',\n            icon: (<FileSearchOutlined className='font-16' />),\n            name_id: 'sidebar.filingPlans'\n          },\n          {\n            key: 'sales-report',\n            link: '/admin/report/sales-report',\n            icon: (<BarChartOutlined className='font-16' />),\n            name_id: 'sidebar.sales-report'\n          }\n        ] :\n        [\n          {\n            key: 'development-timeline',\n            link: '/partner/development-timeline',\n            icon: (<i className='icon icon-timeline font-16 mr-10' />),\n            name_id: 'sidebar.pdt'\n          },\n          {\n            key: 'filing-plans',\n            link: '/partner/filing-plans',\n            icon: (<FileSearchOutlined className='font-16 mr-10' />),\n            name_id: 'sidebar.filingPlans'\n          },\n          {\n            key: 'sales-report',\n            link: '/partner/sales-report',\n            icon: (<BarChartOutlined className='font-16 mr-10' />),\n            name_id: 'sidebar.sales-report'\n          }\n        ]\n    }\n  }\n\n  const getProfileMenuItems = () => {\n\n    let menuItems = [\n      {\n        key: 'profile',\n        link: isUserAdmin || isUserStaff ? '/admin/profile' : '/partner/profile',\n        icon: (<i className='icon icon-profile font-16 mr-10' />),\n        name_id: 'sidebar.profile'\n      },\n      {\n        key: 'settings',\n        link: '/admin/settings',\n        icon: (<i className='icon icon-setting font-16 mr-10' />),\n        name_id: 'sidebar.settings'\n      },\n      {\n        key: 'change-password',\n        link: '/change-password',\n        icon: (<LockOutlined className='font-16 mr-10' />),\n        name_id: 'sidebar.change-password'\n      },\n    ]\n    if (!isUserAdmin && !isUserStaff) {\n      menuItems.splice(1, 1)\n    }\n\n    return menuItems\n  }\n\n  const displayMenuItems = (itemsArray) => {\n    return itemsArray.map(\n      value => (\n        <Menu.Item key={value.key}>\n          <Link id={value.key} to={value.link}>\n            {value.icon}\n            <span><IntlMessages id={value.name_id} /></span>\n          </Link>\n        </Menu.Item>\n      )\n    )\n  }\n\n  useEffect(() => {\n    setIsUserAdmin(() => {\n      return (getRole() === 'ADMIN')\n    })\n    setIsUserStaff(() => {\n      return (getRole() === 'STAFF')\n    })\n  }, [])\n\n  return (<>\n    <SidebarLogo />\n    <div className='gx-sidebar-content'>\n      {/* <div className={`gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`}>\n        <UserProfile history={props.history} />\n        <AppsNavigation/>\n      </div> */}\n      <CustomScrollbars className='gx-layout-sider-scrollbar gx-mt-2'>\n        <Menu\n          className={navStyle === NAV_STYLE_FIXED ? 'pad-left-25 gx-display-flex-column sidebar-width-250' : ''}\n          defaultOpenKeys={[defaultOpenKeys]}\n          // selectedKeys={[selectedKeys]}\n          selectedKeys={[defaultOpenKeys]}\n          theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\n          mode='inline'>\n          {displayMenuItems(getMenuItems().menuItems)}\n          <Menu.SubMenu id='side-menu-reports' className='mpp-submenu' key='Reports' popupClassName={getNavStyleSubMenuClass(navStyle)}\n            title={<span> <i className='icon icon-folder-o' />\n              <span><IntlMessages id='sidebar.reports' /></span></span>}>\n            {displayMenuItems(getMenuItems().submenuItems)}\n          </Menu.SubMenu>\n          <Menu.SubMenu id='side-menu-user-profile' className='mpp-submenu' key='User Profile' popupClassName={getNavStyleSubMenuClass(navStyle)}\n            title={<span> <i className='icon icon-wall' />\n              <span>User Profile</span></span>}>\n            {displayMenuItems(getProfileMenuItems())}\n          </Menu.SubMenu>\n          <Menu.Item key='logout'>\n            <Link to={'/logout'}>\n              <LogoutOutlined className='font-20' />\n              <span>Logout</span>\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </CustomScrollbars>\n    </div>\n  </>\n  );\n};\n\nSidebarContent.propTypes = {};\n\nexport default SidebarContent;\n\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Drawer, Layout } from 'antd';\n\nimport SidebarContent from './SidebarContent';\nimport { toggleCollapsedSideNav, updateWindowWidth } from 'appRedux/actions/Setting';\nimport {\n  NAV_STYLE_DRAWER,\n  NAV_STYLE_FIXED,\n  NAV_STYLE_MINI_SIDEBAR,\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n  TAB_SIZE,\n  THEME_TYPE_LITE\n} from '../../constants/ThemeSetting';\nimport './sidebar.css'\n\nconst { Sider } = Layout;\n\nconst Sidebar = (props) => {\n\n  const dispatch = useDispatch();\n\n  const { themeType, navCollapsed, width, navStyle } = useSelector(({ settings }) => settings);\n\n\n  const onToggleCollapsedNav = () => {\n    dispatch(toggleCollapsedSideNav(!navCollapsed));\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      dispatch(updateWindowWidth(window.innerWidth));\n    })\n  }, [dispatch]);\n\n\n  let drawerStyle = 'gx-collapsed-sidebar';\n\n  if (navStyle === NAV_STYLE_FIXED) {\n    drawerStyle = '';\n  } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n    drawerStyle = 'gx-mini-sidebar gx-mini-custom-sidebar';\n  } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n    drawerStyle = 'gx-custom-sidebar'\n  } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\n    drawerStyle = 'gx-mini-sidebar';\n  } else if (navStyle === NAV_STYLE_DRAWER) {\n    drawerStyle = 'gx-collapsed-sidebar'\n  }\n  if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR\n    || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\n    drawerStyle = 'gx-collapsed-sidebar'\n  }\n  return (\n    <Sider\n      className={`gx-app-sidebar ${drawerStyle} ${themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null}`}\n      trigger={null}\n      collapsed={(width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\n      theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\n      collapsible>\n      {\n        navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ?\n          <Drawer\n            className={`gx-drawer-sidebar ${themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null}`}\n            placement='left'\n            closable={false}\n            onClose={onToggleCollapsedNav}\n            visible={navCollapsed}>\n            <SidebarContent />\n          </Drawer> :\n          <SidebarContent history={props.history} />\n      }\n    </Sider>)\n};\nexport default Sidebar;\n","const languageData = [\n  {\n    languageId: 'english',\n    locale: 'en',\n    name: 'English',\n    icon: 'us'\n  },\n  {\n    languageId: 'chinese',\n    locale: 'zh',\n    name: 'Chinese',\n    icon: 'cn'\n  },\n  {\n    languageId: 'spanish',\n    locale: 'es',\n    name: 'Spanish',\n    icon: 'es'\n  },\n  {\n    languageId: 'french',\n    locale: 'fr',\n    name: 'French',\n    icon: 'fr'\n  },\n  {\n    languageId: 'italian',\n    locale: 'it',\n    name: 'Italian',\n    icon: 'it'\n  },\n  {\n    languageId: 'saudi-arabia',\n    locale: 'ar',\n    name: 'Arabic',\n    icon: 'sa'\n  }\n\n];\nexport default languageData;\n","import React from \"react\";\n\nconst SearchBox = ({styleName, placeholder, onChange, value}) => {\n\n  return (\n    <div className={`gx-search-bar ${styleName}`}>\n      <div className=\"gx-form-group\">\n        <input className=\"ant-input\" type=\"search\" placeholder={placeholder} onChange={onChange}\n               value={value}/>\n        <span className=\"gx-search-icon gx-pointer\"><i className=\"icon icon-search\"/></span>\n      </div>\n    </div>\n  )\n};\nexport default SearchBox;\n\nSearchBox.defaultProps = {\n  styleName: \"\",\n  value: \"\",\n};\n","import React from \"react\";\nimport {Avatar, Popover} from \"antd\";\n\nconst UserInfo = () => {\n\n  const userMenuOptions = (\n    <ul className=\"gx-user-popover\">\n      <li>My Account</li>\n      <li>Connections</li>\n    </ul>\n  );\n\n  return (\n    <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={userMenuOptions}\n             trigger=\"click\">\n      <Avatar src='https://via.placeholder.com/150x150'\n              className=\"gx-avatar gx-pointer\" alt=\"\"/>\n    </Popover>\n  )\n};\n\n\nexport default UserInfo;\n","import React from \"react\";\nimport {Avatar} from \"antd\";\n\n\nconst NotificationItem = ({notification}) => {\n  const {icon, image, title, time} = notification;\n  return (\n\n    <li className=\"gx-media\">\n      <Avatar className=\"gx-size-40 gx-mr-3\"\n              alt={image}\n              src={image}/>\n      <div className=\"gx-media-body gx-align-self-center\">\n        <p className=\"gx-fs-sm gx-mb-0\">{title}</p>\n        <i className={`icon icon-${icon} gx-pr-2`}/> <span className=\"gx-meta-date\"><small>{time}</small></span>\n      </div>\n    </li>\n  );\n};\n\nexport default NotificationItem;\n","export const notifications = [\n\n  {\n    image: 'https://via.placeholder.com/150x150',\n    title: \"Stella Johnson has recently posted an album\",\n    time: \"4:10 PM\",\n    icon: \"thumb-up gx-text-blue\",\n  }, {\n    image: 'https://via.placeholder.com/150x150',\n    title: \"Alex Brown has shared Martin Guptil's post\",\n    time: \"5:18 PM\",\n    icon: \"chat gx-text-grey\",\n  }, {\n    image: 'https://via.placeholder.com/150x150',\n    title: \"Domnic Brown has sent you a group invitation for Global Health\",\n    time: \"5:36 PM\",\n    icon: \"birthday text-info\",\n  }, {\n    image: 'https://via.placeholder.com/150x150',\n    title: \"John Smith has birthday today\",\n    time: \"5:54 PM\",\n    icon: \"birthday gx-text-warning\",\n  }, {\n    image: 'https://via.placeholder.com/150x150',\n    title: \"Chris has updated his profile picture\",\n    time: \"5:25 PM\",\n    icon: \"profile gx-text-grey\",\n  }\n];\n","const Auxiliary = (props) => props.children;\n\nexport default Auxiliary;\n","import React from \"react\";\nimport NotificationItem from \"./NotificationItem\";\nimport {notifications} from \"./data\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport Auxiliary from \"util/Auxiliary\";\n\nconst AppNotification = () => {\n  return (\n    <Auxiliary>\n      <div className=\"gx-popover-header\">\n        <h3 className=\"gx-mb-0\">Notifications</h3>\n        <i className=\"gx-icon-btn icon icon-charvlet-down\"/>\n      </div>\n      <CustomScrollbars className=\"gx-popover-scroll\">\n        <ul className=\"gx-sub-popover\">\n          {notifications.map((notification, index) => <NotificationItem key={index}\n                                                                        notification={notification}/>)\n          }\n        </ul>\n      </CustomScrollbars>\n    </Auxiliary>\n  )\n};\n\nexport default AppNotification;\n\n","import React from \"react\";\nimport {Avatar} from \"antd\";\n\nconst NotificationItem = ({notification}) => {\n  const {image, badge, name, time, message} = notification;\n  return (\n    <li className=\"gx-media\">\n      <div className=\"gx-user-thumb gx-mr-3\">\n        <Avatar className=\"gx-size-40\"\n                alt={image}\n                src={image}/>\n        {badge > 0 ? <span className=\"gx-badge gx-badge-danger gx-text-white gx-rounded-circle\">{badge}</span> : null}\n      </div>\n      <div className=\"gx-media-body\">\n        <div className=\"gx-flex-row gx-justify-content-between gx-align-items-center\">\n          <h5 className=\"gx-text-capitalize gx-user-name gx-mb-0\"><span className=\"gx-link\">{name}</span></h5>\n          <span className=\"gx-meta-date\"><small>{time}</small></span>\n        </div>\n        <p className=\"gx-fs-sm\">{message}</p>\n        <span className=\"gx-btn gx-btn-sm gx-top2 gx-text-muted\"><i className=\"icon icon-reply gx-pr-2\"/>Reply</span>\n        <span className=\"gx-btn gx-btn-sm gx-top2 gx-text-muted\"><i\n          className=\"icon icon-custom-view gx-pr-2\"/>Read</span>\n      </div>\n    </li>\n  );\n};\n\nexport default NotificationItem;\n","export const notifications = [\n  {\n    id: 1,\n    image: 'https://via.placeholder.com/150x150',\n    name: \"Domnic Brown\",\n    time: \"6:19 PM\",\n    message: \"There are many variations of passages of...\",\n    badge: 5\n  },\n  {\n    id: 2,\n    image: 'https://via.placeholder.com/150x150',\n    name: \"John Smith\",\n    time: \"4:18 PM\",\n    message: \"Lorem Ipsum is simply dummy text of the...\",\n  },\n  {\n    id: 3,\n    image: 'https://via.placeholder.com/150x150',\n    name: \"John Smith\",\n    time: \"7:10 PM\",\n    message: \"The point of using Lorem Ipsum is that it has a...\",\n    badge: 8\n  },\n  {\n    id: 4,\n    image: 'https://via.placeholder.com/150x150',\n    name: \"alex dolgove\",\n    time: \"5:10 PM\",\n    message: \"It is a long established fact that a reader will...\",\n  },\n  {\n    id: 5,\n    image: 'https://via.placeholder.com/150x150',\n    name: \"Domnic Harris\",\n    time: \"7:35 PM\",\n    message: \"All the Lorem Ipsum generators on the...\",\n    badge: 3\n  }\n];\n","import React from \"react\";\nimport NotificationItem from \"./NotificationItem\";\nimport {notifications} from \"./data\";\nimport CustomScrollbars from 'util/CustomScrollbars'\nimport Auxiliary from \"util/Auxiliary\";\n\nconst MailNotification = () => {\n  return (\n    <Auxiliary>\n      <div className=\"gx-popover-header\">\n        <h3 className=\"gx-mb-0\">Messages</h3>\n        <i className=\"gx-icon-btn icon icon-charvlet-down\"/>\n      </div>\n      <CustomScrollbars className=\"gx-popover-scroll\">\n        <ul className=\"gx-sub-popover\">\n          {notifications.map((notification, index) => <NotificationItem key={index}\n                                                                        notification={notification}/>)}\n        </ul>\n      </CustomScrollbars>\n    </Auxiliary>\n  )\n};\n\nexport default MailNotification;\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Menu} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport {\n  NAV_STYLE_ABOVE_HEADER,\n  NAV_STYLE_BELOW_HEADER,\n  NAV_STYLE_DEFAULT_HORIZONTAL,\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL\n} from \"../../constants/ThemeSetting\";\n\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nconst HorizontalNav = () => {\n\n  const navStyle = useSelector(({settings}) => settings.navStyle);\n  const pathname = useSelector(({settings}) => settings.pathname);\n\n  const getNavStyleSubMenuClass = (navStyle) => {\n    switch (navStyle) {\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\n        return \"gx-menu-horizontal gx-submenu-popup-curve\";\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-inside-submenu-popup-curve\";\n      case NAV_STYLE_BELOW_HEADER:\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-below-submenu-popup-curve\";\n      case NAV_STYLE_ABOVE_HEADER:\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-above-submenu-popup-curve\";\n      default:\n        return \"gx-menu-horizontal\";\n\n    }\n  };\n\n  const selectedKeys = pathname.substr(1);\n  const defaultOpenKeys = selectedKeys.split('/')[1];\n  return (\n\n    <Menu\n      defaultOpenKeys={[defaultOpenKeys]}\n      selectedKeys={[selectedKeys]}\n      mode=\"horizontal\">\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"main\"\n               title={<IntlMessages id=\"sidebar.main\"/>}>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dashboard\"\n                 title={<span> <i className=\"icon icon-dasbhoard\"/>\n                         <IntlMessages id=\"sidebar.dashboard\"/></span>}>\n          <Menu.Item key=\"main/dashboard/crypto\">\n            <Link to=\"/main/dashboard/crypto\">\n              <i className=\"icon icon-crypto\"/>\n              <IntlMessages id=\"sidebar.dashboard.crypto\"/>\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"main/dashboard/crm\">\n            <Link to=\"/main/dashboard/crm\">\n              <i className=\"icon icon-crm\"/>\n              <IntlMessages id=\"sidebar.dashboard.crm\"/>\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"main/dashboard/listing\">\n            <Link to=\"/main/dashboard/listing\">\n              <i className=\"icon icon-listing-dbrd\"/>\n              <IntlMessages id=\"sidebar.dashboard.listing\"/>\n            </Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <Menu.Item key=\"main/widgets\">\n          <Link to=\"/main/widgets\"><i className=\"icon icon-widgets\"/>\n            <IntlMessages id=\"sidebar.widgets\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"main/metrics\">\n          <Link to=\"/main/metrics\"><i className=\"icon icon-apps\"/>\n            <IntlMessages id=\"sidebar.metrics\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"main/algolia\">\n          <Link to=\"/main/algolia\"><i className=\"icon icon-shopping-cart \"/>\n            <IntlMessages id=\"sidebar.algolia\"/></Link>\n        </Menu.Item>\n\n      </SubMenu>\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"in-built-apps\"\n               title={<IntlMessages id=\"sidebar.inBuiltApp\"/>}>\n\n        <Menu.Item key=\"in-built-apps/mail\">\n          <Link to=\"/in-built-apps/mail\"><i className=\"icon icon-email\"/><IntlMessages\n            id=\"sidebar.mailApp\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"in-built-apps/todo\">\n          <Link to=\"/in-built-apps/todo\"><i\n            className=\"icon icon-check-square-o\"/><IntlMessages\n            id=\"sidebar.todoApp\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"in-built-apps/contacts\">\n          <Link to=\"/in-built-apps/contacts\"><i className=\"icon icon-contacts\"/><IntlMessages\n            id=\"sidebar.contactsApp\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"in-built-apps/chat\">\n          <Link to=\"/in-built-apps/chat\"><i\n            className=\"icon icon-chat-bubble -flex-column-reverse\"/><IntlMessages\n            id=\"sidebar.chatApp\"/></Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"social-apps/profile\">\n          <Link to=\"/social-apps/profile\">\n            <i className=\"icon icon-profile2\"/>\n            <IntlMessages id=\"sidebar.extensions.profile\"/>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"social-apps/wall\">\n          <Link to=\"/social-apps/wall\">\n            <i className=\"icon icon-avatar -flex-column-reverse\"/>\n            <IntlMessages id=\"sidebar.wall\"/>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"in-built-apps/notes\">\n          <Link to=\"/in-built-apps/notes\">\n            <i className=\"icon icon-copy\"/>\n            <IntlMessages id=\"sidebar.notes\"/>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"in-built-apps/firebase-crud\">\n          <Link to=\"/in-built-apps/firebase-crud\">\n            <i className=\"icon icon-icon\"/>\n            <IntlMessages id=\"sidebar.crud\"/>\n          </Link>\n        </Menu.Item>\n\n      </SubMenu>\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"components\"\n               title={<IntlMessages id=\"sidebar.components\"/>}>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"general\" title={\n          <span>\n                  <i className=\"icon icon-all-contacts\"/>\n                   <IntlMessages id=\"sidebar.components.general\"/>\n              </span>}>\n          <Menu.Item key=\"components/general/button\">\n            <Link to=\"/components/general/button\">\n              <IntlMessages id=\"sidebar.general.button\"/>\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/general/icon\">\n            <Link to=\"/components/general/icon\">\n              <IntlMessages id=\"sidebar.general.icon\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"navigation\" title={\n          <span>\n                  <i className=\"icon icon-navigation\"/>\n                  <IntlMessages id=\"sidebar.components.navigation\"/>\n              </span>}>\n          <Menu.Item key=\"components/navigation/affix\">\n            <Link to=\"/components/navigation/affix\">\n              <IntlMessages\n                id=\"sidebar.navigation.affix\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/navigation/breadcrumb\">\n            <Link to=\"/components/navigation/breadcrumb\">\n              <IntlMessages\n                id=\"sidebar.navigation.breadcrumb\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/navigation/dropdown\">\n            <Link to=\"/components/navigation/dropdown\">\n              <IntlMessages\n                id=\"sidebar.navigation.dropdown\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/navigation/menu\">\n            <Link to=\"/components/navigation/menu\">\n              <IntlMessages\n                id=\"sidebar.navigation.menu\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/navigation/pagination\">\n            <Link to=\"/components/navigation/pagination\">\n              <IntlMessages\n                id=\"sidebar.navigation.pagination\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/navigation/steps\">\n            <Link to=\"/components/navigation/steps\">\n              <IntlMessages\n                id=\"sidebar.navigation.steps\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dataEntry\" title={\n          <span>\n                  <i className=\"icon icon-data-entry\"/>\n                  <IntlMessages id=\"sidebar.components.dataEntry\"/>\n              </span>}>\n          <Menu.Item key=\"components/dataEntry/autoComplete\">\n            <Link to=\"/components/dataEntry/autoComplete\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.autoComplete\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/checkbox\">\n            <Link to=\"/components/dataEntry/checkbox\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.checkbox\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/cascader\">\n            <Link to=\"/components/dataEntry/cascader\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.cascader\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/datePicker\">\n            <Link to=\"/components/dataEntry/datePicker\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.datePicker\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/form\">\n            <Link to=\"/components/dataEntry/form\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.form\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/inputNumber\">\n            <Link to=\"/components/dataEntry/inputNumber\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.inputNumber\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/input\">\n            <Link to=\"/components/dataEntry/input\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.input\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/mention\">\n            <Link to=\"/components/dataEntry/mention\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.mention\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/rate\">\n            <Link to=\"/components/dataEntry/rate\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.rate\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/radio\">\n            <Link to=\"/components/dataEntry/radio\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.radio\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/switch\">\n            <Link to=\"/components/dataEntry/switch\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.switch\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/slider\">\n            <Link to=\"/components/dataEntry/slider\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.slider\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/select\">\n            <Link to=\"/components/dataEntry/select\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.select\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/treeSelect\">\n            <Link to=\"/components/dataEntry/treeSelect\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.treeSelect\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/transfer\">\n            <Link to=\"/components/dataEntry/transfer\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.transfer\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/timePicker\">\n            <Link to=\"/components/dataEntry/timePicker\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.timePicker\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataEntry/upload\">\n            <Link to=\"/components/dataEntry/upload\">\n              <IntlMessages\n                id=\"sidebar.dataEntry.upload\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dataDisplay\" title={\n          <span>\n                  <i className=\"icon icon-data-display\"/>\n\n                    <IntlMessages id=\"sidebar.components.dataDisplay\"/>\n\n              </span>}>\n          <Menu.Item key=\"components/dataDisplay/avatar\">\n            <Link to=\"/components/dataDisplay/avatar\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.avatar\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/badge\">\n            <Link to=\"/components/dataDisplay/badge\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.badge\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/collapse\">\n            <Link to=\"/components/dataDisplay/collapse\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.collapse\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/carousel\">\n            <Link to=\"/components/dataDisplay/carousel\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.carousel\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/card\">\n            <Link to=\"/components/dataDisplay/card\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.card\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/calendar\">\n            <Link to=\"/components/dataDisplay/calendar\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.calender\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/list\">\n            <Link to=\"/components/dataDisplay/list\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.list\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/popover\">\n            <Link to=\"/components/dataDisplay/popover\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.popover\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/tree\">\n            <Link to=\"/components/dataDisplay/tree\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.tree\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/tooltip\">\n            <Link to=\"/components/dataDisplay/tooltip\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.toolTips\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/timeline\">\n            <Link to=\"/components/dataDisplay/timeline\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.timeLine\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/tag\">\n            <Link to=\"/components/dataDisplay/tag\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.tag\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/dataDisplay/tabs\">\n            <Link to=\"/components/dataDisplay/tabs\">\n              <IntlMessages\n                id=\"sidebar.dataDisplay.tabs\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"feedBack\" title={\n          <span>\n                  <i className=\"icon icon-feedback\"/>\n                    <IntlMessages id=\"sidebar.components.feedBack\"/>\n\n              </span>}>\n          <Menu.Item key=\"components/feedBack/alert\">\n            <Link to=\"/components/feedBack/alert\">\n              <IntlMessages\n                id=\"sidebar.feedBack.alert\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/modal\">\n            <Link to=\"/components/feedBack/modal\">\n              <IntlMessages\n                id=\"sidebar.feedBack.modal\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/message\">\n            <Link to=\"/components/feedBack/message\">\n              <IntlMessages\n                id=\"sidebar.feedBack.message\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/notification\">\n            <Link to=\"/components/feedBack/notification\">\n              <IntlMessages\n                id=\"sidebar.feedBack.notification\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/progress\">\n            <Link to=\"/components/feedBack/progress\">\n              <IntlMessages\n                id=\"sidebar.feedBack.progress\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/popconfirm\">\n            <Link to=\"/components/feedBack/popconfirm\">\n              <IntlMessages id=\"sidebar.feedBack.popConfirm\"/>\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/feedBack/spin\">\n            <Link to=\"/components/feedBack/spin\">\n              <IntlMessages\n                id=\"sidebar.feedBack.spin\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"others\" title={\n          <span>\n                  <i className=\"icon icon-inbox\"/>\n                    <IntlMessages id=\"sidebar.components.other\"/>\n\n              </span>}>\n          <Menu.Item key=\"components/others/anchor\">\n            <Link to=\"/components/others/anchor\">\n              <IntlMessages\n                id=\"sidebar.other.anchor\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/others/backtop\">\n            <Link to=\"/components/others/backtop\">\n              <IntlMessages\n                id=\"sidebar.other.backTop\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/others/divider\">\n            <Link to=\"/components/others/divider\">\n              <IntlMessages\n                id=\"sidebar.other.divider\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"table\"\n                 title={\n                   <span>\n                           <i className=\"icon icon-table\"/>\n\n                             <IntlMessages id=\"sidebar.dataDisplay.table\"/>\n\n                         </span>}>\n          <Menu.Item key=\"components/table/basic\">\n            <Link to=\"/components/table/basic\">\n              <IntlMessages\n                id=\"sidebar.view.basicTable\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"components/table/data\">\n            <Link to=\"/components/table/data\">\n              <IntlMessages\n                id=\"sidebar.view.dataTable\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n      </SubMenu>\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"extraComponents\"\n               title={<IntlMessages id=\"sidebar.extraComponents\"/>}>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"editor\"\n                 title={<span>\n                         <i className=\"icon icon-editor\"/>\n                        <IntlMessages id=\"sidebar.editors\"/>\n                       </span>}>\n          <Menu.Item key=\"extra-components/editor/ck\">\n            <Link to=\"/extra-components/editor/ck\">\n              <IntlMessages\n                id=\"sidebar.editors.CKEditor\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extra-components/editor/wysiswyg\">\n            <Link to=\"/extra-components/editor/wysiswyg\">\n              <IntlMessages\n                id=\"sidebar.editors.WYSISWYGEditor\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <Menu.Item key=\"extra-components/color-picker\">\n          <Link to=\"/extra-components/color-picker\">\n            <i className=\"icon icon-picker\"/>\n\n            <IntlMessages id=\"sidebar.pickers.colorPickers\"/>\n\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"extra-components/dnd\">\n          <Link to=\"/extra-components/dnd\">\n            <i className=\"icon icon-drag-and-drop\"/>\n\n            <IntlMessages id=\"sidebar.extensions.dragNDrop\"/>\n\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"extra-components/sweet-alert\">\n          <Link to=\"/extra-components/sweet-alert\">\n            <i className=\"icon icon-sweet-alert\"/>\n            <IntlMessages id=\"sidebar.extensions.sweetAlert\"/>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"extra-components/notification\">\n          <Link to=\"/extra-components/notification\"><i className=\"icon icon-notification\"/>\n            <IntlMessages\n              id=\"sidebar.extensions.notification\"/></Link>\n        </Menu.Item>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"time-line\"\n                 title={<span><i className=\"icon icon-timeline\"/><IntlMessages\n                   id=\"sidebar.timeLine\"/></span>}>\n          <Menu.Item key=\"extra-components/time-line/default\">\n            <Link to=\"/extra-components/time-line/default\">\n              <IntlMessages\n                id=\"sidebar.timeLine.default\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extra-components/time-line/default-with-icon\">\n            <Link to=\"/extra-components/time-line/default-with-icon\">\n              <IntlMessages\n                id=\"sidebar.timeLine.defaultwithIcons\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extra-components/time-line/left-align\">\n            <Link to=\"/extra-components/time-line/left-align\">\n              <IntlMessages\n                id=\"sidebar.timeLine.leftAligned\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <Menu.Item key=\"extra-components/shuffle\">\n          <Link to=\"/extra-components/shuffle\"><i className=\"icon icon-shuffle\"/>\n            <IntlMessages\n              id=\"sidebar.extensions.shuffle\"/></Link>\n        </Menu.Item>\n\n      </SubMenu>\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"extensions\"\n               title={<IntlMessages id=\"sidebar.extensions\"/>}>\n\n        <MenuItemGroup key=\"map\"\n                       title={<IntlMessages id=\"sidebar.map\"/>}>\n\n          <SubMenu className=\"gx-menu-horizontal\" key=\"google\"\n                   title={\n                     <span>\n                           <i className=\"icon icon-map-google\"/>\n                           <IntlMessages id=\"sidebar.google.map\"/></span>}>\n\n            <Menu.Item key=\"extensions/map/google/simple\">\n              <Link to=\"/extensions/map/google/simple\">\n                <IntlMessages\n                  id=\"sidebar.map.simple\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/styled\">\n              <Link to=\"/extensions/map/google/styled\">\n                <IntlMessages\n                  id=\"sidebar.map.styled\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/geo-location\">\n              <Link to=\"/extensions/map/google/geo-location\">\n                <IntlMessages\n                  id=\"sidebar.map.geoLocation\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/directions\">\n              <Link to=\"/extensions/map/google/directions\">\n                <IntlMessages\n                  id=\"sidebar.map.mapDirection\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/overlay\">\n              <Link to=\"/extensions/map/google/overlay\">\n                <IntlMessages\n                  id=\"sidebar.map.overlay\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/kml\">\n              <Link to=\"/extensions/map/google/kml\">\n                <IntlMessages\n                  id=\"sidebar.map.kmLayer\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/popup-info\">\n              <Link to=\"/extensions/map/google/popup-info\">\n                <IntlMessages\n                  id=\"sidebar.map.popupInfo\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/traffic\">\n              <Link to=\"/extensions/map/google/traffic\">\n                <IntlMessages\n                  id=\"sidebar.map.trafficLayer\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/street-view\">\n              <Link to=\"/extensions/map/google/street-view\">\n                <IntlMessages\n                  id=\"sidebar.map.streetView\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/event\">\n              <Link to=\"/extensions/map/google/event\">\n                <IntlMessages\n                  id=\"sidebar.map.eventListener\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/drawing\">\n              <Link to=\"/extensions/map/google/drawing\">\n                <IntlMessages\n                  id=\"sidebar.map.mapDrawing\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/google/clustering\">\n              <Link to=\"/extensions/map/google/clustering\">\n                <IntlMessages\n                  id=\"sidebar.map.mapClustering\"/></Link>\n            </Menu.Item>\n          </SubMenu>\n\n          <SubMenu className=\"gx-menu-horizontal\" key=\"ammap\"\n                   title={\n                     <span><i className=\"icon icon-amchart\"/>\n                           <IntlMessages id=\"sidebar.ammap\"/></span>}>\n\n            <Menu.Item key=\"extensions/map/ammap/animations-lines\">\n              <Link to=\"/extensions/map/ammap/animations-lines\">\n                <IntlMessages\n                  id=\"sidebar.map.animations.lines\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/curved-lines\">\n              <Link to=\"/extensions/map/ammap/curved-lines\">\n                <IntlMessages\n                  id=\"sidebar.map.curved.lines\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/zooming-countries\">\n              <Link to=\"/extensions/map/ammap/zooming-countries\">\n                <IntlMessages\n                  id=\"sidebar.map.zooming.countries\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/patterns\">\n              <Link to=\"/extensions/map/ammap/patterns\">\n                <IntlMessages\n                  id=\"sidebar.map.patterns\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/capitals-map\">\n              <Link to=\"/extensions/map/ammap/capitals-map\">\n                <IntlMessages\n                  id=\"sidebar.map.capitals.map\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/map-markers\">\n              <Link to=\"/extensions/map/ammap/map-markers\">\n                <IntlMessages\n                  id=\"sidebar.map.markers\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/flight-routes\">\n              <Link to=\"/extensions/map/ammap/flight-routes\">\n                <IntlMessages\n                  id=\"sidebar.map.flight.routes\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/choropleth\">\n              <Link to=\"/extensions/map/ammap/choropleth\">\n                <IntlMessages\n                  id=\"sidebar.map.choropleth\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/grouped-countries\">\n              <Link to=\"/extensions/map/ammap/grouped-countries\">\n                <IntlMessages\n                  id=\"sidebar.map.grouped.countries\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/bubbles\">\n              <Link to=\"/extensions/map/ammap/bubbles\">\n                <IntlMessages\n                  id=\"sidebar.map.bubbles\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/drill-down\">\n              <Link to=\"/extensions/map/ammap/drill-down\">\n                <IntlMessages\n                  id=\"sidebar.map.drill.down\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/multiple-areas\">\n              <Link to=\"/extensions/map/ammap/multiple-areas\">\n                <IntlMessages\n                  id=\"sidebar.map.multiple.areas\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/map/ammap/weather\">\n              <Link to=\"/extensions/map/ammap/weather\">\n                <IntlMessages\n                  id=\"sidebar.map.weather\"/></Link>\n            </Menu.Item>\n\n          </SubMenu>\n\n        </MenuItemGroup>\n\n        <MenuItemGroup key=\"chart\"\n                       title={<span>\n                               <IntlMessages id=\"sidebar.chart\"/></span>}>\n          <SubMenu className=\"gx-menu-horizontal\" key=\"rechart\" title={\n            <span><i className=\"icon icon-chart-area-new\"/>\n                    <IntlMessages id=\"sidebar.components.rechart\"/>\n              </span>}>\n\n            <Menu.Item key=\"extensions/chart/recharts/area\">\n              <Link to=\"/extensions/chart/recharts/area\">\n                <IntlMessages\n                  id=\"sidebar.chart.area\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/bar\">\n              <Link to=\"/extensions/chart/recharts/bar\">\n                <IntlMessages\n                  id=\"sidebar.chart.bar\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/composed\">\n              <Link to=\"/extensions/chart/recharts/composed\">\n                <IntlMessages\n                  id=\"sidebar.chart.composed\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/line\">\n              <Link to=\"/extensions/chart/recharts/line\">\n                <IntlMessages\n                  id=\"sidebar.chart.line\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/pie\">\n              <Link to=\"/extensions/chart/recharts/pie\">\n                <IntlMessages\n                  id=\"sidebar.chart.pie\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/radar\">\n              <Link to=\"/extensions/chart/recharts/radar\">\n                <IntlMessages\n                  id=\"sidebar.chart.radar\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/radial\">\n              <Link to=\"/extensions/chart/recharts/radial\">\n                <IntlMessages\n                  id=\"sidebar.chart.radial\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/scatter\">\n              <Link to=\"/extensions/chart/recharts/scatter\">\n                <IntlMessages\n                  id=\"sidebar.chart.scatter\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/recharts/treemap\">\n              <Link to=\"/extensions/chart/recharts/treemap\">\n                <IntlMessages\n                  id=\"sidebar.chart.tree\"/></Link>\n            </Menu.Item>\n          </SubMenu>\n\n          <SubMenu className=\"gx-menu-horizontal\" key=\"amchart\" title={\n            <span><i className=\"icon icon-amchart\"/>\n                <IntlMessages id=\"sidebar.components.amchart\"/>\n              </span>}>\n            <Menu.Item key=\"extensions/chart/amchart/area\">\n              <Link to=\"/extensions/chart/amchart/area\">\n                <IntlMessages\n                  id=\"sidebar.chart.area\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/amchart/bar\">\n              <Link to=\"/extensions/chart/amchart/bar\">\n                <IntlMessages\n                  id=\"sidebar.chart.bar\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/amchart/line\">\n              <Link to=\"/extensions/chart/amchart/line\">\n                <IntlMessages\n                  id=\"sidebar.chart.line\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/amchart/pie\">\n              <Link to=\"/extensions/chart/amchart/pie\">\n                <IntlMessages\n                  id=\"sidebar.chart.pie\"/></Link>\n            </Menu.Item>\n            <Menu.Item key=\"extensions/chart/amchart/composed\">\n              <Link to=\"/extensions/chart/amchart/composed\">\n                <IntlMessages\n                  id=\"sidebar.chart.composed\"/></Link>\n            </Menu.Item>\n          </SubMenu>\n\n        </MenuItemGroup>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"calendar\"\n                 title={<span><i className=\"icon icon-calendar\"/><IntlMessages\n                   id=\"sidebar.calendar\"/></span>}>\n          <Menu.Item key=\"extensions/calendar/basic\">\n            <Link to=\"/extensions/calendar/basic\">\n              <IntlMessages\n                id=\"sidebar.calendar.basic\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extensions/calendar/cultures\">\n            <Link to=\"/extensions/calendar/cultures\">\n              <IntlMessages\n                id=\"sidebar.calendar.cultures\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extensions/calendar/popup\">\n            <Link to=\"/extensions/calendar/popup\">\n              <IntlMessages\n                id=\"sidebar.calendar.popup\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extensions/calendar/rendering\">\n            <Link to=\"/extensions/calendar/rendering\">\n              <IntlMessages\n                id=\"sidebar.calendar.rendering\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extensions/calendar/selectable\">\n            <Link to=\"/extensions/calendar/selectable\">\n              <IntlMessages\n                id=\"sidebar.calendar.selectable\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"extensions/calendar/timeslots\">\n            <Link to=\"/extensions/calendar/timeslots\">\n              <IntlMessages id=\"sidebar.calendar.timeslots\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n      </SubMenu>\n\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"custom-views\"\n               title={<IntlMessages id=\"sidebar.customViews\"/>}>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"user-auth\"\n                 title={<span><i className=\"icon icon-auth-screen\"/><IntlMessages\n                   id=\"app.userAuth\"/></span>}>\n          <Menu.Item key=\"custom-views/user-auth/sign-in\">\n            <Link to=\"/custom-views/user-auth/sign-in\">\n              <IntlMessages\n                id=\"app.userAuth.signIn\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/user-auth/forgot-password\">\n            <Link to=\"/custom-views/user-auth/forgot-password\">\n              <IntlMessages\n                id=\"app.userAuth.forgotPassword\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/user-auth/sign-up\">\n            <Link to=\"/custom-views/user-auth/sign-up\">\n              <IntlMessages\n                id=\"app.userAuth.signUp\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/user-auth/lock-screen\">\n            <Link to=\"/custom-views/user-auth/lock-screen\">\n              <IntlMessages\n                id=\"app.userAuth.lockScreen\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/user-auth/reset-password\">\n            <Link to=\"/custom-views/user-auth/reset-password\">\n              <IntlMessages\n                id=\"app.userAuth.resetPassword\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"list-type\"\n                 title={<span><i className=\"icon icon-all-contacts\"/><IntlMessages\n                   id=\"sidebar.listType\"/></span>}>\n          <Menu.Item key=\"custom-views/list-type/simple-list\">\n            <Link to=\"/custom-views/list-type/simple-list\">\n              <IntlMessages\n                id=\"sidebar.listType.plainListView\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/list-type/strip-list\">\n            <Link to=\"/custom-views/list-type/strip-list\">\n              <IntlMessages\n                id=\"sidebar.listType.withDivider\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/list-type/card-list\">\n            <Link to=\"/custom-views/list-type/card-list\">\n              <IntlMessages\n                id=\"sidebar.listType.cardListView\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"eCommerce\"\n                 title={<span><i className=\"icon icon-shopping-cart\"/><IntlMessages\n                   id=\"sidebar.eCommerce\"/></span>}>\n          <Menu.Item key=\"custom-views/eCommerce/product-grid\">\n            <Link to=\"/custom-views/eCommerce/product-grid\">\n              <IntlMessages\n                id=\"sidebar.eCommerce.productGrid\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/eCommerce/product-list\">\n            <Link to=\"/custom-views/eCommerce/product-list\">\n              <IntlMessages\n                id=\"sidebar.eCommerce.productList\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"errorPages\"\n                 title={<span><i className=\"icon icon-error\"/><IntlMessages\n                   id=\"sidebar.extraPages\"/></span>}>\n\n          <Menu.Item key=\"custom-views/error-pages/error-404\">\n            <Link to=\"/custom-views/error-pages/error-404\">\n              <IntlMessages\n                id=\"sidebar.extraPages.404\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/error-pages/error-500\">\n            <Link to=\"/custom-views/error-pages/error-500\">\n              <IntlMessages\n                id=\"sidebar.extraPages.500\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n        <SubMenu className=\"gx-menu-horizontal\" key=\"extra-elements\"\n                 title={<span><i className=\"icon icon-ellipse-h\"/><IntlMessages\n                   id=\"sidebar.listType.extras\"/></span>}>\n          <Menu.Item key=\"custom-views/extras/pricing-table\">\n            <Link to=\"/custom-views/extras/pricing-table\">\n              <IntlMessages\n                id=\"sidebar.extraElements.pricingTable\"/></Link>\n          </Menu.Item>\n\n          <Menu.Item key=\"custom-views/extras/callouts\">\n            <Link to=\"/custom-views/extras/callouts\">\n              <IntlMessages\n                id=\"sidebar.extraElements.callouts\"/></Link>\n          </Menu.Item>\n          <Menu.Item key=\"custom-views/extras/testimonials\">\n            <Link to=\"/custom-views/extras/testimonials\">\n              <IntlMessages\n                id=\"sidebar.extraElements.testimonials\"/></Link>\n          </Menu.Item>\n        </SubMenu>\n\n      </SubMenu>\n\n    </Menu>\n\n  );\n};\n\nHorizontalNav.propTypes = {};\n\nexport default HorizontalNav;\n\n","import React, {useState} from \"react\";\nimport {Button, Dropdown, Layout, Menu, message, Popover, Select} from 'antd';\nimport Icon from '@ant-design/icons';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport languageData from \"../languageData\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport HorizontalNav from \"../HorizontalNav\";\nimport {Link} from \"react-router-dom\";\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\nimport IntlMessages from \"../../../util/IntlMessages\";\n\nconst {Header} = Layout;\nconst Option = Select.Option;\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">Products</Menu.Item>\n    <Menu.Item key=\"2\">Apps</Menu.Item>\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\n  </Menu>\n);\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nconst HorizontalDefault = () => {\n\n  const dispatch = useDispatch();\n\n  const [searchText, setSearchText] = useState('');\n  const locale = useSelector(({settings}) => settings.locale);\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value)\n  };\n\n  return (\n    <div className=\"gx-header-horizontal\">\n      <div className=\"gx-header-horizontal-top\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-top-flex\">\n            <div className=\"gx-header-horizontal-top-left\">\n              <i className=\"icon icon-alert gx-mr-3\"/>\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\n            </div>\n            <ul className=\"gx-login-list\">\n              <li>Login</li>\n              <li>Signup</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <Header\n        className=\"gx-header-horizontal-main\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-main-flex\">\n\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\n              <i className=\"gx-icon-btn icon icon-menu\"\n                 onClick={() => {\n                   console.log(\"navCollapsed\",!navCollapsed)\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\n                 }}\n              />\n\n            </div>\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-w-logo\">\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\n              <img alt=\"\" src={require(\"assets/images/logo-white.png\")}/></Link>\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\n                         placeholder=\"Search in app...\"\n                         onChange={updateSearchChatUser}\n                         value={searchText}/>\n\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\n                <Option value=\"jack\">Products</Option>\n                <Option value=\"lucy\">Apps</Option>\n                <Option value=\"Yiminghe\">Blogs</Option>\n              </Select>\n            </div>\n\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\n                  <div className=\"gx-d-flex\">\n                    <Dropdown overlay={menu}>\n                      <Button>\n                        Category <Icon type=\"down\"/>\n                      </Button>\n                    </Dropdown>\n                    <SearchBox styleName=\"gx-popover-search-bar\"\n                               placeholder=\"Search in app...\"\n                               onChange={updateSearchChatUser}\n                               value={searchText}/>\n                  </div>\n                } trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\n\n                </Popover>\n              </li>\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\n                         trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={<MailNotification/>} trigger=\"click\">\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                <i className=\"icon icon-chat-new\"/>\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\n                </span>\n                </Popover>\n              </li>\n              <li className=\"gx-language\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={languageMenu()} trigger=\"click\">\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\n                className={`flag flag-24 flag-${locale.icon}`}/>\n              </span>\n                </Popover>\n              </li>\n              <li className=\"gx-user-nav\"><UserInfo/></li>\n            </ul>\n          </div>\n        </div>\n      </Header>\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-nav-flex\">\n            <HorizontalNav/>\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalDefault;\n","import React, {useState} from \"react\";\nimport {Button, Dropdown, Layout, Menu, message, Popover, Select} from 'antd';\nimport Icon from '@ant-design/icons';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport languageData from \"../languageData\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport {Link} from \"react-router-dom\";\nimport HorizontalNav from \"../HorizontalNav\";\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\nimport IntlMessages from \"../../../util/IntlMessages\";\n\nconst {Header} = Layout;\n\nconst Option = Select.Option;\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">Products</Menu.Item>\n    <Menu.Item key=\"2\">Apps</Menu.Item>\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\n  </Menu>\n);\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nconst HorizontalDark = () => {\n\n  const dispatch = useDispatch();\n\n  const [searchText, setSearchText] = useState('');\n  const locale = useSelector(({settings}) => settings.locale);\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\n\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value)\n  };\n\n  return (\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark\">\n      <div className=\"gx-header-horizontal-top\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-top-flex\">\n            <div className=\"gx-header-horizontal-top-left\">\n              <i className=\"icon icon-alert gx-mr-3\"/>\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\n            </div>\n            <ul className=\"gx-login-list\">\n              <li>Login</li>\n              <li>Signup</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n\n      <Header\n        className=\"gx-header-horizontal-main\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-main-flex\">\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\n              <i className=\"gx-icon-btn icon icon-menu\"\n                 onClick={() => {\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\n                 }}\n              />\n\n            </div>\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\n                         placeholder=\"Search in app...\"\n                         onChange={updateSearchChatUser}\n                         value={searchText}/>\n\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\n                <Option value=\"jack\">Products</Option>\n                <Option value=\"lucy\">Apps</Option>\n                <Option value=\"Yiminghe\">Blogs</Option>\n              </Select>\n            </div>\n\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\n                    <Button>\n                      Category <Icon type=\"down\"/>\n                    </Button>\n                  </Dropdown>\n                    <SearchBox styleName=\"gx-popover-search-bar\"\n                               placeholder=\"Search in app...\"\n                               onChange={updateSearchChatUser}\n                               value={searchText}/></div>\n                } trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\n\n                </Popover>\n              </li>\n\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\n                         trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={<MailNotification/>} trigger=\"click\">\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                <i className=\"icon icon-chat-new\"/>\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\n                </span>\n                </Popover>\n              </li>\n              <li className=\"gx-language\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={languageMenu()} trigger=\"click\">\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\n                className={`flag flag-24 flag-${locale.icon}`}/>\n              </span>\n                </Popover>\n              </li>\n              <li className=\"gx-user-nav\"><UserInfo/></li>\n            </ul>\n          </div>\n        </div>\n      </Header>\n      <div className=\"gx-header-horizontal-nav gx-d-none gx-d-lg-block\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-nav-flex\">\n            <HorizontalNav/>\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default HorizontalDark;\n","import React, {useState} from \"react\";\nimport {Button, Dropdown, Layout, Menu, message, Popover} from 'antd';\nimport {connect, useDispatch, useSelector} from \"react-redux\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport languageData from \"../languageData\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport HorizontalNav from \"../HorizontalNav\";\nimport {Link} from \"react-router-dom\";\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\n\nconst {Header} = Layout;\n\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">Products</Menu.Item>\n    <Menu.Item key=\"2\">Apps</Menu.Item>\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\n  </Menu>\n);\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n}\n\nconst InsideHeader = () => {\n\n  const dispatch = useDispatch();\n\n  const [searchText, setSearchText] = useState('');\n  const locale = useSelector(({settings}) => settings.locale);\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value)\n  };\n\n  return (\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-inside-header-horizontal\">\n      <div className=\"gx-header-horizontal-top\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-top-flex\">\n            <div className=\"gx-header-horizontal-top-left\">\n              <i className=\"icon icon-alert gx-mr-3\"/>\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\n            </div>\n            <ul className=\"gx-login-list\">\n              <li>Login</li>\n              <li>Signup</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n\n      <Header\n        className=\"gx-header-horizontal-main\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-main-flex\">\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3 6e\">\n              <i className=\"gx-icon-btn icon icon-menu\"\n                 onClick={() => {\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\n                 }}\n              />\n            </div>\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\n\n            <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\n              <HorizontalNav/>\n            </div>\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li className=\"gx-notify gx-notify-search\">\n                <Popover overlayClassName=\"gx-popover-horizantal\"\n                         placement=\"bottomRight\" content={\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\n                    <Button>\n                      Category <DownOutlined />\n                    </Button>\n                  </Dropdown>\n                    <SearchBox styleName=\"gx-popover-search-bar\"\n                               placeholder=\"Search in app...\"\n                               onChange={updateSearchChatUser}\n                               value={searchText}/></div>\n                } trigger=\"click\">\n\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\n\n                </Popover>\n              </li>\n\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\n                         trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={<MailNotification/>} trigger=\"click\">\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                <i className=\"icon icon-chat-new\"/>\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\n                </span>\n                </Popover>\n              </li>\n              <li className=\"gx-language\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={languageMenu()} trigger=\"click\">\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\n                className={`flag flag-24 flag-${locale.icon}`}/>\n              </span>\n                </Popover>\n              </li>\n              <li className=\"gx-user-nav\"><UserInfo/></li>\n            </ul>\n          </div>\n        </div>\n      </Header>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({settings}) => {\n  const {locale, navCollapsed} = settings;\n  return {locale, navCollapsed}\n};\nexport default connect(mapStateToProps, {toggleCollapsedSideNav, switchLanguage})(InsideHeader);\n","import React, { useState } from \"react\";\nimport { Button, Dropdown, Layout, Menu, message, Popover, Select } from 'antd';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\n\nimport languageData from \"../languageData\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport { switchLanguage, toggleCollapsedSideNav } from \"../../../appRedux/actions/Setting\";\n\nimport { TAB_SIZE } from \"../../../constants/ThemeSetting\";\nimport HorizontalNav from \"../HorizontalNav\";\nimport { Link } from \"react-router-dom\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\n\nconst { Header } = Layout;\n\nconst Option = Select.Option;\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">Products</Menu.Item>\n    <Menu.Item key=\"2\">Blog</Menu.Item>\n    <Menu.Item key=\"3\">Apps</Menu.Item>\n  </Menu>\n);\n\nfunction handleMenuClick() {\n  message.info('Click on menu item.');\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\n\nconst AboveHeader = () => {\n\n  const dispatch = useDispatch();\n\n  const [searchText, setSearchText] = useState('');\n  const locale = useSelector(({ settings }) => settings.locale);\n  const navCollapsed = useSelector(({ settings }) => settings.navCollapsed);\n  const width = useSelector(({ settings }) => settings.width);\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`} />\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value)\n  };\n\n  return (\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-above-header-horizontal\">\n\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-nav-flex\">\n            <HorizontalNav />\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\" /></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\" /></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\" /></span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"gx-header-horizontal-top\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-top-flex\">\n            <div className=\"gx-header-horizontal-top-left\">\n              <i className=\"icon icon-alert gx-mr-3\" />\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\" /></p>\n            </div>\n            <ul className=\"gx-login-list\">\n              <li><IntlMessages id=\"app.userAuth.login\" /></li>\n              <li><IntlMessages id=\"app.userAuth.signUp\" /></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <Header\n        className=\"gx-header-horizontal-main\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-main-flex\">\n\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\n              <i className=\"gx-icon-btn icon icon-menu\"\n                onClick={() => {\n                  if (width <= TAB_SIZE) {\n                    dispatch(toggleCollapsedSideNav(!navCollapsed));\n                  }\n                }}\n              />\n            </div>\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")} /></Link>\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\n              <img alt=\"\" src={require(\"assets/images/logo.png\")} /></Link>\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\n                placeholder=\"Search in app...\"\n                onChange={updateSearchChatUser}\n                value={searchText} />\n\n              <Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={handleChange}>\n                <Option value=\"jack\">Products</Option>\n                <Option value=\"lucy\">Apps</Option>\n                <Option value=\"Yiminghe\">Blogs</Option>\n              </Select>\n            </div>\n\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\n                    <Button>\n                      Category <DownOutlined />\n                    </Button>\n                  </Dropdown>\n                    <SearchBox styleName=\"gx-popover-search-bar\"\n                      placeholder=\"Search in app...\"\n                      onChange={updateSearchChatUser}\n                      value={searchText} /></div>\n                } trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\" /></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification />}\n                  trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\" /></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                  content={<MailNotification />} trigger=\"click\">\n                  <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                    <i className=\"icon icon-chat-new\" />\n                    <span className=\"gx-status gx-status-rtl gx-small gx-orange\" />\n                  </span>\n                </Popover>\n              </li>\n              <li className=\"gx-language\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                  content={languageMenu()} trigger=\"click\">\n                  <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\n                    className={`flag flag-24 flag-${locale.icon}`} />\n                  </span>\n                </Popover>\n              </li>\n              <li className=\"gx-user-nav\"><UserInfo /></li>\n            </ul>\n          </div>\n        </div>\n      </Header>\n    </div>\n  );\n};\n\n\nexport default AboveHeader;\n","import React, {useState} from \"react\";\nimport {Button, Dropdown,Layout, Menu, message, Popover, Select} from 'antd';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport languageData from \"../languageData\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\nimport HorizontalNav from \"../HorizontalNav\";\nimport {Link} from \"react-router-dom\";\nimport IntlMessages from \"util/IntlMessages\";\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\n\nconst {Header} = Layout;\n\nconst Option = Select.Option;\nconst menu = (\n  <Menu onClick={handleMenuClick}>\n    <Menu.Item key=\"1\">Products</Menu.Item>\n    <Menu.Item key=\"2\">Apps</Menu.Item>\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\n  </Menu>\n);\n\nfunction handleMenuClick(e) {\n  message.info('Click on menu item.');\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nconst BelowHeader = () => {\n\n  const dispatch = useDispatch();\n\n  const [searchText, setSearchText] = useState('');\n  const locale = useSelector(({settings}) => settings.locale);\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value)\n  };\n\n  return (\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-below-header-horizontal\">\n      <div className=\"gx-header-horizontal-top\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-top-flex\">\n            <div className=\"gx-header-horizontal-top-left\">\n              <i className=\"icon icon-alert gx-mr-3\"/>\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\n            </div>\n            <ul className=\"gx-login-list\">\n              <li>Login</li>\n              <li>Signup</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n\n      <Header\n        className=\"gx-header-horizontal-main\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-main-flex\">\n\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\n              <i className=\"gx-icon-btn icon icon-menu\"\n                 onClick={() => {\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\n                 }}\n              />\n            </div>\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\n                         placeholder=\"Search in app...\"\n                         onChange={updateSearchChatUser}\n                         value={searchText}/>\n\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\n                <Option value=\"jack\">Products</Option>\n                <Option value=\"lucy\">Apps</Option>\n                <Option value=\"Yiminghe\">Blogs</Option>\n              </Select>\n            </div>\n\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\n                    <Button>\n                      Category <DownOutlined />\n                    </Button>\n                  </Dropdown>\n                    <SearchBox styleName=\"gx-popover-search-bar\"\n                               placeholder=\"Search in app...\"\n                               onChange={updateSearchChatUser}\n                               value={searchText}/></div>\n                } trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\n                         trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={<MailNotification/>} trigger=\"click\">\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                <i className=\"icon icon-chat-new\"/>\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\n                </span>\n                </Popover>\n              </li>\n              <li className=\"gx-language\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                         content={languageMenu()} trigger=\"click\">\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\n                className={`flag flag-24 flag-${locale.icon}`}/>\n              </span>\n                </Popover>\n              </li>\n              <li className=\"gx-user-nav\"><UserInfo/></li>\n            </ul>\n          </div>\n        </div>\n      </Header>\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\n        <div className=\"gx-container\">\n          <div className=\"gx-header-horizontal-nav-flex\">\n            <HorizontalNav/>\n            <ul className=\"gx-header-notifications gx-ml-auto\">\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BelowHeader;\n","import React, { useState } from \"react\";\nimport { Layout, Popover } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport languageData from \"./languageData\";\nimport { switchLanguage, toggleCollapsedSideNav } from \"../../appRedux/actions/Setting\";\nimport SearchBox from \"components/SearchBox\";\nimport UserInfo from \"components/UserInfo\";\nimport AppNotification from \"components/AppNotification\";\nimport MailNotification from \"components/MailNotification\";\nimport Auxiliary from \"util/Auxiliary\";\n\n\nimport { NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_MINI_SIDEBAR, TAB_SIZE } from \"../../constants/ThemeSetting\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst { Header } = Layout;\n\nconst Topbar = () => {\n\n  const { locale, width, navCollapsed, navStyle } = useSelector(({ settings }) => settings);\n  const { searchText, setSearchText } = useState('');\n  const dispatch = useDispatch();\n\n  const languageMenu = () => (\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\n      <ul className=\"gx-sub-popover\">\n        {languageData.map(language =>\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\n            dispatch(switchLanguage(language))\n          }>\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`} />\n            <span className=\"gx-language-text\">{language.name}</span>\n          </li>\n        )}\n      </ul>\n    </CustomScrollbars>);\n\n  const updateSearchChatUser = (evt) => {\n    setSearchText(evt.target.value);\n  };\n  if (false) {\n    return (\n      <Header>\n        {navStyle === NAV_STYLE_DRAWER || ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR) && width < TAB_SIZE) ?\n          <div className=\"gx-linebar gx-mr-3\">\n            <i className=\"gx-icon-btn icon icon-menu\"\n              onClick={() => {\n                dispatch(toggleCollapsedSideNav(!navCollapsed));\n              }}\n            />\n          </div> : null}\n        <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer\">\n          <img alt=\"\" src={require(\"assets/images/w-logo.png\")} /></Link>\n\n        <SearchBox styleName=\"gx-d-none gx-d-lg-block gx-lt-icon-search-bar-lg\"\n          placeholder=\"Search in app...\"\n          onChange={updateSearchChatUser}\n          value={searchText} />\n        <ul className=\"gx-header-notifications gx-ml-auto\">\n          <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\n            <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\n              <SearchBox styleName=\"gx-popover-search-bar\"\n                placeholder=\"Search in app...\"\n                onChange={updateSearchChatUser}\n                value={searchText} />\n            } trigger=\"click\">\n              <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\" /></span>\n            </Popover>\n          </li>\n          {width >= TAB_SIZE ? null :\n            <Auxiliary>\n              <li className=\"gx-notify\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification />}\n                  trigger=\"click\">\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\" /></span>\n                </Popover>\n              </li>\n\n              <li className=\"gx-msg\">\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\n                  content={<MailNotification />} trigger=\"click\">\n                  <span className=\"gx-pointer gx-status-pos gx-d-block\">\n                    <i className=\"icon icon-chat-new\" />\n                    <span className=\"gx-status gx-status-rtl gx-small gx-orange\" />\n                  </span>\n                </Popover>\n              </li>\n            </Auxiliary>\n          }\n          <li className=\"gx-language\">\n            <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={languageMenu()}\n              trigger=\"click\">\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\">\n                <i className={`flag flag-24 flag-${locale.icon}`} />\n                <span className=\"gx-pl-2 gx-language-name\">{locale.name}</span>\n                <i className=\"icon icon-chevron-down gx-pl-2\" />\n              </span>\n            </Popover>\n          </li>\n          {width >= TAB_SIZE ? null :\n            <Auxiliary>\n              <li className=\"gx-user-nav\"><UserInfo /></li>\n            </Auxiliary>\n          }\n        </ul>\n      </Header>\n    );\n  } else {\n    return null\n  }\n};\n\nexport default Topbar;\n","import React, { useState, useEffect } from \"react\";\n\nconst Auth = (WrappedComponent, Roles) => {\n\n    const AuthCheck = (props) => {\n        const [isAuthorized, setIsAuthorized] = useState(false);\n\n        useEffect(() => {\n            let collectData = [];\n            let user = JSON.parse(localStorage.getItem('user'));\n            if (user) {\n                const userRole = user.role;\n                collectData = Roles.filter(data => userRole === data);\n                if (collectData.length) {\n                    setIsAuthorized(true)\n                }\n            } else {\n                props.history.push('/login');\n            }\n        }, [])\n\n        if (isAuthorized) {\n            return <WrappedComponent {...props} />;\n        } else {\n            return <div>YOU ARE NOT AUTHORIZED TO USE THE PAGE</div>;\n        }\n    }\n    return AuthCheck;\n};\n\nexport { Auth };\n","import { showMessage } from '../helpers';\n\nexport function handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 400) {\n                return Promise.reject(data);\n            }\n            if (response.status === 403) {\n                localStorage.removeItem('user');\n                window.location.reload();\n                showMessage('error', 'Access denied!');\n            }\n            if (response.status === 401) {\n                if (response.url && response.url.indexOf('/api/login') > 0) {\n                    showMessage('error', data.detail);\n                } else {\n                    // auto logout if 401 response returned from api\n                    localStorage.removeItem('user');\n                    window.location.reload();\n                    showMessage('info', 'Session timeout!');\n                }\n            }\n            if (response.status === 404) {\n                if (data.status === 'notfound') {\n                    window.location.replace('/error-404')\n                }\n                if (data.status === 'expired') {\n                    window.location.replace('/reset-password?token=reset')\n                    showMessage('info', 'Token expired');\n                }\n            }\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}\n","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const login = ({ email, password }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password })\n    };\n\n    return fetch(`${config.API_URL}/login/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const changePassword = ({ password }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ password }),\n    };\n    return fetch(`${config.API_URL}/account/update_password/`, requestOptions)\n        .then(handleResponse)\n}\n\n\n\nexport const tokenValidate = ({ token }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token }),\n    };\n    return fetch(`${config.API_URL}/password_reset/validate_token/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const passwordSet = ({ password, token }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ password, token }),\n    };\n    return fetch(`${config.API_URL}/password_reset/confirm/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const forgotPassword = ({ email }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n    };\n    return fetch(`${config.API_URL}/password_reset/`, requestOptions)\n        .then(handleResponse)\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const getPDT = (quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/pdt/`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/pdt/?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const postPDT = (data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/template/pdt/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const adminGetPDT = (id,quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/pdt/${id}/`, requestOptions)\n        .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/pdt/${id}/?quarter=` + quarter_name, requestOptions)\n        .then(handleResponse)\n    }\n    \n}\n\nexport const adminPostPDT = (id, data, quarter_name) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/pdt/${id}/`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/pdt/${id}/?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const submitPDT = ({ message }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message })\n    };\n\n    return fetch(`${config.API_URL}/template/pdt/submit/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const approvePDT = ({ partner_id, message, is_approved }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ partner_id, message, is_approved })\n    };\n\n    return fetch(`${config.API_URL}/template/pdt/message/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const markPDTMessageRead = (type) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/template/pdt/inbox/${type}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getPDTReport = (data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/report/pdt/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const downloadPDTReport = () => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n    };\n\n    return fetch(`${config.API_URL}/report/pdt/download/`, requestOptions)\n        .then((response) => response.blob())\n        .then((blob) => {\n            const url = window.URL.createObjectURL(new Blob([blob]));\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', `sample.${this.state.file}`);\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n        })\n        .catch((error) => {\n            console.log(error)\n        });\n}\n\nexport const downloadpdtReport = (quarter, requestObj) => {\n    requestObj['quarter']=quarter\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestObj),\n        responseType: 'blob'\n    };\n\n    return fetch(`${config.API_URL}/report/pdt/download/`, requestOptions)\n        .then(response => response.blob())\n\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const getSalesReport = (type, quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(quarter_name === null){\n        return fetch(`${config.API_URL}/template/sales/${type}`, requestOptions)\n        .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/sales/${type}?quarter=` + quarter_name, requestOptions)\n        .then(handleResponse)\n    }\n    \n}\n\nexport const postSalesReport = (type, data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/template/sales/${type}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const adminGetSalesReport = (type, id, quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(quarter_name === null){\n        return fetch(`${config.API_URL}/template/sales/${type}/${id}`, requestOptions)\n        .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/sales/${type}/${id}?quarter=` + quarter_name, requestOptions)\n        .then(handleResponse)\n    }\n    \n}\n\nexport const adminPostSalesReport = (type, id, data, quarter_name) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    if(quarter_name === null){\n        return fetch(`${config.API_URL}/template/sales/${type}/${id}`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/sales/${type}/${id}?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const submitSalesReport = ({ message }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message })\n    };\n\n    return fetch(`${config.API_URL}/template/sales/submit/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const approveSalesReport = ({ partner_id, message, is_approved }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ partner_id, message, is_approved })\n    };\n\n    return fetch(`${config.API_URL}/template/sales/message/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const markSalesReportMessageRead = (type) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/template/sales/inbox/${type}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getConsolidatedSalesReport = (type, data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/report/sales/${type}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const downloadConsolidatedSalesReport = (type, requestObj) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestObj),\n        responseType: 'blob'\n    };\n\n    return fetch(`${config.API_URL}/report/sales/download/${type}`, requestOptions)\n        .then(response => response.blob())\n}\n\nexport const getProductsToBeVerified = (id) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/template/product_verification/${id}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const postProductsToBeVerified = (id, data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/template/product_verification/${id}`, requestOptions)\n        .then(handleResponse)\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const getProjectCount = () => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    return fetch(`${config.API_URL}/admin/dashboard/project/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getProductCompanyCount = () => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    return fetch(`${config.API_URL}/admin/dashboard/product/company/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getProductCountryCount = (status) => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    if (status === 'Future-Quarters'){\n        return fetch(`${config.API_URL}/admin/dashboard/product/country/quarter/`, requestOptions)\n        .then(handleResponse)\n    }else{\n        const endpoint = `${config.API_URL}/admin/dashboard/product/country/?status=`.concat(status)\n        return fetch(endpoint, requestOptions)\n            .then(handleResponse)\n    }\n    \n}\n\nexport const getCompanyCount = () => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    return fetch(`${config.API_URL}/admin/dashboard/company/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getCountryProduct = (status) => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    const endpoint = `${config.API_URL}/admin/dashboard/country/?type=`.concat(status)\n    return fetch(endpoint, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const getSales = (map_with,to) => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    const endpoint = `${config.API_URL}/admin/dashboard/sales/`.concat('?map_with=').concat(map_with).concat('&for=').concat(to)\n    return fetch(endpoint, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getDashboardSummary = (type) => {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n    \n    const endpoint = `${config.API_URL}/admin/dashboard/`.concat('?type=').concat(type)\n    return fetch(endpoint, requestOptions)\n        .then(handleResponse)\n}\n\nexport const sendReminderBulkMail = (data) => {\n    \n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n    };\n    \n    return fetch(`${config.API_URL}/template/bulkReminder/`, requestOptions)\n        .then(handleResponse)\n}","import { loaderConstants } from '../../constants';\n\nexport const showLoader = () => {\n    return (dispatch) => {\n        dispatch({\n            type: loaderConstants.SHOW_LOADER,\n        });\n    }\n}\n\nexport const hideLoader = () => {\n    return (dispatch) => {\n        dispatch({\n            type: loaderConstants.HIDE_LOADER,\n        });\n    }\n}\n","import {\n    getProjectCount,\n    getProductCompanyCount,\n    getProductCountryCount,\n    getCompanyCount,\n    getCountryProduct,\n    getSales,\n    getDashboardSummary,\n    sendReminderBulkMail,\n} from '../../services';\nimport { adminDashboardConstants } from '../../constants'\nimport { hideLoader, showLoader } from './Loader';\nimport { showMessage } from '../../helpers';\n\nexport const projectCount = () => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_REQUEST });\n        getProjectCount().then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_FAILURE });\n            }\n        )\n    }\n}\n\nexport const productCompanyCount = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_REQUEST });\n        getProductCompanyCount().then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_FAILURE });\n            }\n        )\n    }\n}\n\nexport const productCountryCount = (status) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_REQUEST });\n        getProductCountryCount(status).then(\n            response => {\n                if (status === 'Future-Quarters') {\n                    dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_QUARTER_SUCCESS, data: response ? response : [] });\n                } else {\n                    dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SUCCESS, data: response ? response : [] });\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_FAILURE });\n            }\n        )\n    }\n}\n\nexport const companyCount = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_REQUEST });\n        getCompanyCount().then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_FAILURE });\n            }\n        )\n    }\n}\n\n\nexport const countryProduct = (type) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_REQUEST });\n        getCountryProduct(type).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_FAILURE });\n            }\n        )\n    }\n}\n\n\nexport const productCompanySales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_REQUEST });\n        getSales('product', 'company').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const productPeriodSales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_REQUEST });\n        getSales('product', period).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const productCountrySales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_REQUEST });\n        getSales('product', 'country').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const companyProductSales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_REQUEST });\n        getSales('company', 'product').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const companyPeriodSales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_REQUEST });\n        getSales('company', period).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const companyCountrySales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_REQUEST });\n        getSales('company', 'country').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const countryProductSales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_REQUEST });\n        getSales('country', 'product').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const countryPeriodSales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_REQUEST });\n        getSales('country', period).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const countryCompanySales = () => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_REQUEST });\n        getSales('country', 'company').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const periodProductSales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_REQUEST });\n        getSales(period, 'product').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const periodCountrySales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_REQUEST });\n        getSales(period, 'country').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const periodCompanySales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_REQUEST });\n        getSales(period, 'company').then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_FAILURE });\n            }\n        )\n    }\n}\n\n\nexport const packPeriodSales = (period) => {\n\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_REQUEST });\n        getSales('price_per_pack', period).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_FAILURE });\n            }\n        )\n    }\n}\n\nexport const treatmentPeriodSales = (period) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_REQUEST });\n        getSales('price_per_treatment', period).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_FAILURE });\n            }\n        )\n    }\n}\n\n\nexport const adminDashboardSummary = (type) => {\n    return dispatch => {\n        dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_REQUEST });\n        getDashboardSummary(type).then(\n            response => {\n                dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_FAILURE });\n            }\n        )\n    }\n}\n\nexport const bulkReminderMail = (data) => {\n    return dispatch => {\n        dispatch(showLoader())\n        dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_REQUEST });\n        sendReminderBulkMail(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_SUCCESS });\n                showMessage('success', 'Reminder sent!')\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_FAILURE });\n            }\n        )\n    }\n}\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst Widget = ({title, children, styleName, cover, extra, actions}) => {\n\n  return (\n    <Card title={title} actions={actions} cover={cover} className={`gx-card-widget ${styleName}`} extra={extra}>\n      {children}\n    </Card>\n  )\n};\n\nexport default Widget;\nWidget.defaultProps = {\n  styleName: '',\n};\n\nWidget.propTypes = {\n  title: PropTypes.node,\n  extra: PropTypes.node,\n  cover: PropTypes.node,\n  actions: PropTypes.node,\n  children: PropTypes.node.isRequired\n};\n","import React from 'react';\n\nimport Widget from 'components/Widget/index';\nimport imgUnderDevelopment from '../../assets/images/dashboard/under-development.svg'\nimport imgHold from '../../assets/images/dashboard/hold.svg'\nimport imgDropped from '../../assets/images/dashboard/dropped.svg'\nimport imgFiled from '../../assets/images/dashboard/filed.svg'\nimport imgApproved from '../../assets/images/dashboard/approved.svg'\n\n\nconst DashboardCountProjects = (props) => {\n  const { count, status } = props.data\n  let cardColor = 'cyan'\n  let dataStatus = status;\n  let icon = ''\n  if (status === 'ON_HOLD') {\n    cardColor = 'grey'\n    dataStatus = 'ON HOLD'\n    icon = imgHold\n  }\n  else if (status === 'UNDER_DEVELOPMENT') {\n    cardColor = 'secondary';\n    dataStatus = 'UNDER DEVELOPMENT'\n    icon = imgUnderDevelopment\n  }\n  else if (status === 'DROPPED') {\n    cardColor = 'red'\n    icon = imgDropped\n  }\n  else if (status === 'FILED') {\n    cardColor = 'primary'\n    icon = imgFiled\n  }\n  else if (status === 'APPROVED') {\n    cardColor = 'success'\n    icon = imgApproved\n  }\n\n  return (\n    <Widget styleName={`gx-card-full gx-p-3 gx-bg-${cardColor} gx-text-white mb-0 height-100 gx-flex-row gx-align-items-center`}>\n      <div className='gx-media gx-align-items-center gx-flex-nowrap'>\n        <div className='gx-mr-2 gx-mr-xxl-3'>\n          <img src={icon} className='width-30' />\n        </div>\n        <div className='gx-media-body'>\n          <h1 className='gx-fs-xxl gx-font-weight-semi-bold gx-mb-1 gx-text-white'>{count}</h1>\n          <p className='gx-mb-0 text-capitalize'>{dataStatus.toLowerCase()}</p>\n        </div>\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardCountProjects;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { projectCount } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Row, Col, Empty, Card } from 'antd';\nimport DashboardCountProjects from 'components/dashboardCountProjects/DashboardCountProjects';\nimport Widget from 'components/Widget/index';\n\nimport './project-count.css'\n\n\nexport const AdminDashboardProjectCount = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isProjectCountLoaded = useSelector(state => state.adminDashboard.isProjectCountLoaded);\n    const projectCountList = useSelector(state => state.adminDashboard.project_count)\n\n    useEffect(() => {\n        dispatch(projectCount())\n    }, [])\n\n    useEffect(() => {\n        let rowData = projectCountList.length ? projectCountList.map(\n            (value, index) => ({\n                key: index,\n                status: value.status,\n                count: value.count\n            })\n        ) : [];\n        setData(rowData)\n    }, [isProjectCountLoaded])\n\n    return (\n        <Col span={24}>\n            <Widget>\n                <h3 className='mb-20'>Project Wise Count</h3>\n                {\n                    data && data.length > 0 ?\n                        <Row className='project-count-row'>\n                            {\n                                data.map((value, index) =>\n                                    <Col xs={4}>\n                                        <DashboardCountProjects data={value} key={index} />\n                                    </Col>\n                                )\n                            }\n                        </Row> :\n                        <Card>\n                            <Empty description='No data available!' />\n                        </Card>\n                }\n\n            </Widget>\n        </Col>\n    )\n}\n","import React from 'react';\nimport { Table, Tooltip, Button } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst columns = [\n  {\n    title: 'Product Name',\n    dataIndex: 'product_name',\n    fixed: 'left',\n    width: 150\n  },\n  {\n    title: 'UNDER DEVELOPMENT',\n    dataIndex: 'UNDER_DEVELOPMENT',\n    width: 100,\n  },\n  {\n    title: 'DROPPED',\n    dataIndex: 'DROPPED',\n    width: 100\n  },\n  {\n    title: 'ON HOLD',\n    dataIndex: 'ON_HOLD',\n    width: 100\n  },\n  {\n    title: 'FILED',\n    dataIndex: 'FILED',\n    width: 100\n  },\n  {\n    title: 'APPROVED',\n    dataIndex: 'APPROVED',\n    width: 100\n  }\n];\n\n\nconst DashboardProductWise = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Product Wise Company Count</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-company')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div\n        className='gx-table-responsive'\n      >\n        <Table\n          className='gx-table-no-bordered mpp-list-table'\n          columns={columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small'\n          loading={props.loading}\n        />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardProductWise;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productCompanyCount } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardProductWiseCompany from '../../../../../components/dashboardProductWiseCompany/DashboardProductWiseCompany';\nexport const AdminDashboardProductCompanyCount = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isProductCompanyCountLoaded = useSelector(state => state.adminDashboard.isProductCompanyCountLoaded);\n    const productComapnyCountList = useSelector(state => state.adminDashboard.product_company_count)\n\n    useEffect(() => {\n        dispatch(productCompanyCount())\n    }, [])\n\n    useEffect(() => {\n        let rowData = productComapnyCountList.length ? productComapnyCountList.map(\n            value => ({\n                key: value.product_id,\n                product_name: value.product_name,\n                UNDER_DEVELOPMENT: value.UNDER_DEVELOPMENT,\n                DROPPED: value.DROPPED,\n                ON_HOLD: value.ON_HOLD,\n                FILED: value.FILED,\n                APPROVED: value.APPROVED\n            })\n        ) : [];\n        setData(rowData)\n    }, [isProductCompanyCountLoaded])\n\n    return (\n        <Col span={12}>\n            <DashboardProductWiseCompany loading={!isProductCompanyCountLoaded} data={data} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Select, Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst Option = Select.Option\n\nconst DashboardProductWiseCountry = (props) => {\n  const handleChange = (value) => {\n    props.updateStatus(value)\n  }\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <h2 className='gx-text-capitalize gx-mb-0'>\n          Product Wise Country Count</h2>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Select className='gx-select-md mr-15' defaultValue='Filed' onChange={handleChange}>\n            <Option value='Filed'>Filed</Option>\n            <Option value='Registered'>Registered</Option>\n            <Option value='Filing-Planned'>Filing-Planned</Option>\n            <Option value='Future-Quarters'>Future-Quarters</Option>\n          </Select>\n\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-country-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table\n          className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small'\n          loading={props.loading}\n        />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardProductWiseCountry;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productCountryCount } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardProductWiseCountry from 'components/dashboardProductWiseCountry/DashboardProductWiseCountry'\n\nexport const AdminDashboardProductCountryCount = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n    const [columns, setColumns] = useState([]);\n\n    const isProductCountryCountLoaded = useSelector(state => state.adminDashboard.isProductCountryCountLoaded);\n    const productCountryList = useSelector(state => state.adminDashboard.product_country_count)\n    const futureQuarters = useSelector(state => state.adminDashboard.future_quarters)\n\n    const [status, setStatus] = useState('Filed');\n\n    useEffect(() => {\n        dispatch(productCountryCount(status))\n    }, [status])\n\n    useEffect(() => {\n        if (status === 'Future-Quarters') {\n            let rowData = productCountryList.length ? productCountryList.map(\n                value => ({\n                    key: value.product_id,\n                    product_name: value.product_name,\n                    [futureQuarters[0]]: value[futureQuarters[0]],\n                    [futureQuarters[1]]: value[futureQuarters[1]],\n                    [futureQuarters[2]]: value[futureQuarters[2]],\n                    [futureQuarters[3]]: value[futureQuarters[3]]\n                })\n            ) : [];\n\n            const columns = [\n                {\n                    title: 'Product Name',\n                    dataIndex: 'product_name',\n                    key: 'product_name',\n                    width: 150\n                },\n                {\n                    title: futureQuarters[0],\n                    dataIndex: futureQuarters[0],\n                    key: futureQuarters[0],\n                    width: 80\n                },\n                {\n                    title: futureQuarters[1],\n                    dataIndex: futureQuarters[1],\n                    key: futureQuarters[1],\n                    width: 80\n                },\n                {\n                    title: futureQuarters[2],\n                    dataIndex: futureQuarters[2],\n                    key: futureQuarters[2],\n                    width: 80\n                },\n                {\n                    title: futureQuarters[3],\n                    dataIndex: futureQuarters[3],\n                    key: futureQuarters[3],\n                    width: 80\n                },\n            ]\n            setData(rowData)\n            setColumns(columns)\n        } else {\n            let rowData = productCountryList.length ? productCountryList.map(\n                value => ({\n                    key: value.product_id,\n                    product_name: value.product_name,\n                    count: value.count\n                })\n            ) : [];\n            const columns = [\n                {\n                    title: 'Product Name',\n                    dataIndex: 'product_name',\n                    key: 'product_name',\n                    width: 150\n                },\n                {\n                    title: status,\n                    dataIndex: 'count',\n                    key: 'count',\n                    width: 80\n                },\n            ]\n            setData(rowData)\n            setColumns(columns)\n        }\n    }, [isProductCountryCountLoaded])\n\n    const updateStatus = (value) => {\n        setStatus(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardProductWiseCountry status={status} data={data} columns={columns} updateStatus={updateStatus} loading={!isProductCountryCountLoaded} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button, Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardProductWise = ({ columns, loading, data, }) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Company Wise Product Count</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(data.map(val => omit(val, 'key')), 'company-wise-product')}\n              disabled={loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table\n          className='gx-table-no-bordered mpp-list-table'\n          columns={columns}\n          loading={loading}\n          dataSource={data}\n          scroll={{ y: 285 }}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardProductWise;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { companyCount } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardCompanyWiseStatus from 'components/dashboardCompanyWiseStatus/DashboardCompanyWiseStatus'\n\nexport const AdminDashboardCompanyCount = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isCompanyCountLoaded = useSelector(state => state.adminDashboard.isCompanyCountLoaded);\n    const comapnyCountList = useSelector(state => state.adminDashboard.company_count)\n\n    useEffect(() => {\n        dispatch(companyCount())\n    }, [])\n\n    useEffect(() => {\n        let rowData = comapnyCountList.length ? comapnyCountList.map(\n            value => ({\n                key: value.partner_id,\n                company_name: value.company_name,\n                UNDER_DEVELOPMENT: value.UNDER_DEVELOPMENT,\n                DROPPED: value.DROPPED,\n                ON_HOLD: value.ON_HOLD,\n                FILED: value.FILED,\n                APPROVED: value.APPROVED\n            })\n        ) : [];\n        setData(rowData)\n    }, [isCompanyCountLoaded])\n\n    const columns = [\n        {\n            title: 'Partner Name/ Company Name',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'DEVELOPING',\n            dataIndex: 'UNDER_DEVELOPMENT',\n            key: 'UNDER_DEVELOPMENT',\n            width: 100\n        },\n        {\n            title: 'DROPPED',\n            dataIndex: 'DROPPED',\n            key: 'DROPPED',\n            width: 100\n        },\n        {\n            title: 'ON_HOLD',\n            dataIndex: 'ON_HOLD',\n            key: 'ON_HOLD',\n            width: 100\n        },\n        {\n            title: 'FILED with USFDA/ WHO-PQ',\n            dataIndex: 'FILED',\n            key: 'FILED',\n            width: 100\n        },\n        {\n            title: 'Approval from USFDA/ WHO-PQ',\n            dataIndex: 'APPROVED',\n            key: 'APPROVED',\n            width: 100\n        },\n    ]\n\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardCompanyWiseStatus data={data} columns={columns} loading={!isCompanyCountLoaded} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport { Table, Select, Button, Tooltip } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\nimport { exportToXLXS } from '../../helpers';\nconst Option = Select.Option\n\nconst DashboardCountryWiseProduct = (props) => {\n\n  const handleChange = (value) => {\n    props.updateStatus(value)\n  }\n\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <h2 className='gx-text-capitalize gx-mb-0'>\n          Country Wise Product Count</h2>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Select className='gx-select-md mr-15' defaultValue='Filed' onChange={handleChange}>\n            <Option value='Filed'>Filed</Option>\n            <Option value='Registered'>Registered</Option>\n            <Option value='status'>Future Quarter Status</Option>\n          </Select>\n\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['key', 'product_id'])), props.status === 'partner' ? 'country-wise-product-count' + '-Filed/Registered' : 'country-wise-product-count' + '-Future Quarter Status')}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n\n      }>\n      <div className='gx-table-responsive'>\n        <Table\n          className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          bordered={false}\n          size='small'\n          loading={props.loading}\n          scroll={{ y: 300 }} />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardCountryWiseProduct;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { countryProduct } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardCountryWiseProduct from 'components/dashboardCountryWiseProduct/DashboardCountryWiseProduct'\n\nexport const AdminDashboardCountryProduct = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryProductLoaded);\n    const List = useSelector(state => state.adminDashboard.country_product_count)\n\n    const [type, setType] = useState('Filed');\n    const [columns, setColumns] = useState([]);\n\n    useEffect(() => {\n        dispatch(countryProduct(type))\n    }, [type])\n\n    useEffect(() => {\n        if (type === 'Filed' || type === 'Registered') {\n            let temp_id = 0\n            let rowData = List.length ? List.map(\n                value => ({\n                    key: ++temp_id,\n                    country_name: value.country_name,\n                    product_id: value.product_id,\n                    product_name: value.product_name,\n                    no_of_partners: value.no_of_partners\n                })\n            ) : [];\n            setData(rowData)\n            const columns = [\n                {\n                    title: 'Country Name',\n                    dataIndex: 'country_name',\n                    key: 'country_name',\n                    fixed: 'left',\n                    width: 150\n                },\n                {\n                    title: 'Product Name',\n                    dataIndex: 'product_name',\n                    key: 'product_name',\n                    width: 100\n                },\n                {\n                    title: 'Number of Partners',\n                    dataIndex: 'no_of_partners',\n                    key: 'no_of_partners',\n                    width: 100\n                }\n            ]\n            setColumns(columns)\n        } else if (type === 'status') {\n            let temp_id = 0\n            let rowData = List.length ? List.map(\n                value => ({\n                    key: ++temp_id,\n                    country_name: value.country_name,\n                    product_id: value.product_id,\n                    product_name: value.product_name,\n                    status: value.status\n                })\n            ) : [];\n            setData(rowData)\n            const columns = [\n                {\n                    title: 'Country Name',\n                    dataIndex: 'country_name',\n                    key: 'country_name',\n                    fixed: 'left',\n                    width: 150\n                },\n                {\n                    title: 'Product Name',\n                    dataIndex: 'product_name',\n                    key: 'product_name',\n                    width: 100\n                },\n                {\n                    title: 'Status',\n                    dataIndex: 'status',\n                    key: 'status',\n                    width: 100\n                }\n            ]\n            setColumns(columns)\n        }\n    }, [isLoaded])\n\n    const updateStatus = (value) => {\n        setType(value)\n    }\n\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardCountryWiseProduct\n                loading={!isLoaded}\n                data={data}\n                columns={columns}\n                updateStatus={updateStatus}\n                status={type}\n            />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Table, Tooltip, Button } from 'antd';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst DashboardSalesProductWiseCompany = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Company</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['company_id','product_id','key'])), 'product-wise-company-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          loading={props.loading}\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesProductWiseCompany;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productCompanySales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesProductWiseCompany from 'components/dashboardSalesProductWiseCompany/DashboardSalesProductWiseCompany'\nexport const AdminDashboardProductCompanySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isProductCompanySalesLoaded = useSelector(state => state.adminDashboard.isProductCompanySalesLoaded);\n    const productCompanySalesList = useSelector(state => state.adminDashboard.product_company_sales)\n\n    useEffect(() => {\n        dispatch(productCompanySales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = productCompanySalesList.length ? productCompanySalesList.map(\n            value => ({\n                key: ++temp_id,\n                product_id: value.product_id,\n                product_name: value.product_name,\n                company_id: value.company_id,\n                company_name: value.company_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isProductCompanySalesLoaded])\n\n    const columns = [\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            width: 150\n        },\n        {\n            title: 'Company Name',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            width: 150\n        },\n        {\n            title: 'Sales = SUM(pack_size*quantity)',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n\n    return (\n        <Col span={12}  className='mb-30'>\n            <DashboardSalesProductWiseCompany loading={!isProductCompanySalesLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesProductWisePeriod = (props) => {\n  return (\n    <Widget styleName='gx-order-history min-height-520'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Over Time</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-sales-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          loading={props.loading}\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesProductWisePeriod;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesProductWisePeriod from '../../../../../../components/dashboardSalesProductWisePeriod/DashboardSalesProductWisePeriod';\n\nexport const AdminDashboardProductPeriodSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isProductPeriodSalesLoaded = useSelector(state => state.adminDashboard.isProductPeriodSalesLoaded);\n    const productPeriodSalesList = useSelector(state => state.adminDashboard.product_period_sales)\n    const [period, setPeriod] = useState(\"period\");\n\n    useEffect(() => {\n        dispatch(productPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = productPeriodSalesList.length ? productPeriodSalesList.map(\n            value => ({\n                key: ++temp_id,\n                product_name: value.product_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isProductPeriodSalesLoaded])\n\n    const columns = [\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12}  className='mb-30'>\n            <DashboardSalesProductWisePeriod status={period} loading={!isProductPeriodSalesLoaded} data={data} columns={columns} updateStatus={updateStatus} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesProductWiseCountry = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <h2 className='gx-text-capitalize gx-mb-0'>\n          In Countries</h2>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['product_id','country_id','key'])), 'product-wise-country-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          loading={props.loading}\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesProductWiseCountry;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productCountrySales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesProductWiseCountry from 'components/dashboardSalesProductWiseCountry/DashboardSalesProductWiseCountry'\nexport const AdminDashboardProductCountrySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isProductCountrySalesLoaded);\n    const List = useSelector(state => state.adminDashboard.product_country_sales)\n\n    useEffect(() => {\n        dispatch(productCountrySales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                product_id: value.product_id,\n                product_name: value.product_name,\n                country_id: value.country_id,\n                country_name: value.country_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            width:150\n        },\n        {\n            title: 'Country',\n            dataIndex: 'country_name',\n            key: 'country_name',\n            width:150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width:150\n        }\n    ]\n\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesProductWiseCountry loading={!isLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport { Table, Tooltip, Button } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst DashboardSalesCompanyWiseProduct = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Product</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['product_id','company_id','key'])), 'company-wise-product-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCompanyWiseProduct;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { companyProductSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCompanyWiseProduct from '../../../../../../components/dashboardSalesCompanyWiseProduct/DashboardCompanyWiseProduct';\n\nexport const AdminDashboardCompanyProductSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyProductSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.company_product_sales)\n\n    useEffect(() => {\n        dispatch(companyProductSales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                company_id: value.company_id,\n                company_name: value.company_name,\n                product_id: value.product_id,\n                product_name: value.product_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Company Name',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            width: 150\n        },\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCompanyWiseProduct loading={!isLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesCompanyWisePeriod = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Over Time</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'company-wise-sales-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          loading={props.loading}\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCompanyWisePeriod;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { companyPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCompanyWisePeriod from '../../../../../../components/dashboardSalesCompanyWisePeriod/DashboardSalesCompanyWisePeriod';\n\nexport const AdminDashboardCompanyPeriodSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyPeriodSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.company_period_sales)\n    const [period, setPeriod] = useState('period');\n\n    useEffect(() => {\n        dispatch(companyPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                company_name: value.company_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Company Name',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCompanyWisePeriod status={period} data={data} loading={!isLoaded} columns={columns} updateStatus={updateStatus} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport { Table, Tooltip, Button } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst DashboardSalesCompanyWiseCountry = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            In Countries</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','key'])), 'company-wise-country-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCompanyWiseCountry;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { companyCountrySales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCompanyWiseCountry from '../../../../../../components/dashboardSalesCompanyWiseCountry/DashboardSalesCompanyWiseCountry';\n\nexport const AdminDashboardCompanyCountrySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyCountrySalesLoaded);\n    const List = useSelector(state => state.adminDashboard.company_country_sales)\n\n    useEffect(() => {\n        dispatch(companyCountrySales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                company_name: value.company_name,\n                country_id: value.country_id,\n                country_name: value.country_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Company',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            width: 150\n        },\n        {\n            title: 'Country',\n            dataIndex: 'country_name',\n            key: 'country_name',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCompanyWiseCountry loading={!isLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport { Table, Tooltip, Button } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst DashboardSalesCountryWiseProduct = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Product</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','product_id','key'])), 'country-wise-product-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCountryWiseProduct;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { countryProductSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCountryWiseProduct from '../../../../../../components/dashboardSalesCountryWiseProduct/DashboardSalesCountryWiseProduct';\n\nexport const AdminDashboardCountryProductSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryProductSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.country_product_sales)\n\n    useEffect(() => {\n        dispatch(countryProductSales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                country_id: value.country_id,\n                country_name: value.country_name,\n                product_id: value.product_id,\n                product_name: value.product_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Country',\n            dataIndex: 'country_name',\n            key: 'country_name',\n        },\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n        }\n    ]\n\n    return (\n\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCountryWiseProduct loading={!isLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesCountryWisePeriod = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Over Time</h2>\n        </div>\n      }\n      extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'country-wise-sales-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCountryWisePeriod;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { countryPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCountryWisePeriod from '../../../../../../components/dashboardSalesCountryWisePeriod/DashboardSalesCountryWisePeriod';\n\nexport const AdminDashboardCountryPeriodSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryPeriodSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.country_period_sales)\n    const [period, setPeriod] = useState(\"period\");\n\n    useEffect(() => {\n        dispatch(countryPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                country_name: value.country_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Country Name',\n            dataIndex: 'country_name',\n            key: 'country_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCountryWisePeriod status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport { Table, Tooltip, Button } from 'antd';\nimport Widget from 'components/Widget/index';\nimport { exportToXLXS } from '../../helpers';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport IntlMessages from 'util/IntlMessages';\nimport { omit } from 'lodash';\n\nconst DashboardSalesCountryWiseCompany = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Company</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              disabled={props.loading}\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','key'])), 'country-wise-company-sales')} >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }\n    >\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesCountryWiseCompany;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { countryCompanySales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesCountryWiseCompany from 'components/dashboardSalesCountryWiseCompany/DashboardSalesCountryWiseCompany'\n\nexport const AdminDashboardCountryCompanySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryCompanySalesLoaded);\n    const List = useSelector(state => state.adminDashboard.country_company_sales)\n\n    useEffect(() => {\n        dispatch(countryCompanySales())\n    }, [])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                country_id: value.country_id,\n                country_name: value.country_name,\n                company_name: value.company_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Country',\n            dataIndex: 'country_name',\n            key: 'country_name',\n            width: 150\n        },\n        {\n            title: 'Company',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n\n    return (\n\n        <Col span={12} className='mb-30'>\n            <DashboardSalesCountryWiseCompany loading={!isLoaded} data={data} columns={columns} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\n\nconst DashboardSalesPeriodWiseProduct = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Product</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          \n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-product-sales')}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table\n          className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          // pagination={{ pageSize: 20 }}\n          scroll={{ y: 300 }}\n          loading={props.loading}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesPeriodWiseProduct;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { productPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesPeriodWiseProduct from '../../../../../../components/dashboardSalesPeriodWiseProduct/DashboardSalesPeriodWiseProduct';\n\nexport const AdminDashboardPeriodProductSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isProductPeriodSalesLoaded = useSelector(state => state.adminDashboard.isProductPeriodSalesLoaded);\n    const productPeriodSalesList = useSelector(state => state.adminDashboard.product_period_sales)\n    const [period, setPeriod] = useState(\"period\");\n\n    useEffect(() => {\n        dispatch(productPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = productPeriodSalesList.length ? productPeriodSalesList.map(\n            value => ({\n                key: ++temp_id,\n                product_name: value.product_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isProductPeriodSalesLoaded])\n\n    const columns = [\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12}  className='mb-30'>\n            <DashboardSalesPeriodWiseProduct status={period} loading={!isProductPeriodSalesLoaded} data={data} columns={columns} updateStatus={updateStatus} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesPeriodWiseCompany = (props) => {\n\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Company</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          \n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-company-sales')}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          loading={props.loading}\n          bordered={false}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesPeriodWiseCompany;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { companyPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesPeriodWiseCompany from '../../../../../../components/dashboardSalesPeriodWiseCompany/DashboardSalesPeriodWiseCompany';\n\nexport const AdminDashboardPeriodCompanySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyPeriodSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.company_period_sales)\n    const [period, setPeriod] = useState('period');\n\n    useEffect(() => {\n        dispatch(companyPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                company_name: value.company_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Company Name',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesPeriodWiseCompany status={period} data={data} loading={!isLoaded} columns={columns} updateStatus={updateStatus} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesPeriodWiseCountry = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            By Country</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          \n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-country-sales')}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          loading={props.loading}\n          bordered={false}\n          size='small'\n        />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesPeriodWiseCountry;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { countryPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesPeriodWiseCountry from 'components/dashboardSalesPeriodWiseCountry/DashboardSalesPeriodWiseCountry'\n\nexport const AdminDashboardPeriodCountrySales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryPeriodSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.country_period_sales)\n    const [period, setPeriod] = useState(\"period\");\n\n    useEffect(() => {\n        dispatch(countryPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                country_name: value.country_name,\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name,\n                total_value: value.total_value\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Country Name',\n            dataIndex: 'country_name',\n            key: 'country_name',\n            fixed: 'left',\n            width: 150\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'total_value',\n            key: 'total_value',\n            width: 150\n        }\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesPeriodWiseCountry status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\n        </Col>\n\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\n\nconst DashboardSalesPricePerPack = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Price Per Pack By Time Period</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'price-per-pack-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesPricePerPack;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { packPeriodSales } from '../../../../../appRedux/actions/AdminDashboard'\nimport { Col } from 'antd';\nimport DashboardSalesPricePerPack from 'components/dashboardSalesPricePerPack/DashboardSalesPricePerPack'\n\nexport const AdminDashboardPackPeriodSales = (props) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    const isLoaded = useSelector(state => state.adminDashboard.isPackPeriodSalesLoaded);\n    const List = useSelector(state => state.adminDashboard.pack_period_sales)\n    const [period, setPeriod] = useState(\"period\");\n\n    \n    useEffect(() => {\n        dispatch(packPeriodSales(period))\n    }, [period])\n\n    useEffect(() => {\n        let temp_id = 0\n        let rowData = List.length ? List.map(\n            value => ({\n                key: ++temp_id,\n                price_per_pack: Number(value.price_per_pack),\n                year: value.year,\n                month: value.month,\n                quarter: value.quarter_name\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const columns = [\n        {\n            title: 'Price per pack',\n            dataIndex: 'price_per_pack',\n            key: 'price_per_pack',\n            fixed: 'left',\n            width: 150,\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            key: 'year',\n            width: 150\n        },\n        {\n            title: 'Month',\n            dataIndex: 'month',\n            key: 'month',\n            width: 150\n        },\n        {\n            title: 'Quarter',\n            dataIndex: 'quarter',\n            key: 'quarter',\n            width: 150\n        },\n    ]\n    const updateStatus = (value) => {\n        setPeriod(value)\n    }\n    return (\n        <Col span={12} className='mb-30'>\n            <DashboardSalesPricePerPack status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\n        </Col>\n    )\n}\n","import React from 'react';\nimport Widget from 'components/Widget/index';\nimport { Tooltip, Button,Table } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { exportToXLXS } from '../../helpers';\nimport { omit } from 'lodash';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nconst DashboardSalesPricePerTreatment = (props) => {\n  return (\n    <Widget styleName='gx-order-history dashboard-min-height'\n      title={\n        <div className='gx-flex-row gx-align-items-center'>\n          <h2 className='gx-text-capitalize line-height-27'>\n            Price Per Treatment By Time Period</h2>\n        </div>\n      } extra={\n        <div className='gx-flex-row gx-align-items-center'>\n          <Tooltip title={<IntlMessages id='report.download' />}>\n            <Button\n              className='mr-0 mb-0'\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'price-per-treatment-' + props.status)}\n              disabled={props.loading}\n            >\n              <DownloadOutlined className='font-20' />\n            </Button>\n          </Tooltip>\n        </div>\n      }>\n      <div className='gx-table-responsive'>\n        <Table className='gx-table-no-bordered mpp-list-table'\n          columns={props.columns}\n          dataSource={props.data}\n          scroll={{ y: 300 }}\n          bordered={false}\n          loading={props.loading}\n          size='small' />\n      </div>\n    </Widget>\n  );\n};\n\nexport default DashboardSalesPricePerTreatment;\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { treatmentPeriodSales } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPricePerTreatment from 'components/dashboardSalesPricePerTreatment/DashboardSalesPricePerTreatment'\r\n\r\nexport const AdminDashboardTreatmentPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isTreatmentPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.treatment_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(treatmentPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                price_per_treatment: Number(value.price_per_treatment),\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Price per treatment',\r\n            dataIndex: 'price_per_treatment',\r\n            key: 'price_per_treatment',\r\n            fixed: 'left',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesPricePerTreatment status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { adminDashboardSummary, bulkReminderMail } from '../../../../appRedux/actions/AdminDashboard'\r\nimport { Table, Col, Button, Select, Tooltip } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { BarChartOutlined, BellOutlined, FileSearchOutlined } from '@ant-design/icons';\r\nimport { getQuarter, getRole } from '../../../../helpers';\r\n\r\nconst { Option } = Select\r\n\r\nexport const AdminDashboardSummary = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const List = useSelector(state => state.adminDashboard.admin_dashboard_summary)\r\n    const isLoaded = useSelector(state => state.adminDashboard.isAdminDashboardSummaryLoaded);\r\n\r\n    const [type, setType] = useState('all_three_submitted');\r\n    const [data, setData] = useState([]);\r\n    const [columns, setColumns] = useState();\r\n    const [showName, setShowName] = useState();\r\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(adminDashboardSummary(type))\r\n        if (type === 'all_three_submitted') { setShowName('View Report'); }\r\n        if (type === 'not_submitted') { setShowName('Reminder'); }\r\n        if (type === 'saved_but_not_submitted') { setShowName('Reminder'); }\r\n        if (type === 'submitted_not_approved') { setShowName('View Report'); }\r\n    }, [type])\r\n\r\n    useEffect(() => {\r\n        setIsUserAdmin(() => {\r\n            return (getRole() === 'ADMIN')\r\n        })\r\n        if (isLoaded) {\r\n            let columnData, rowData = []\r\n            if (type === 'all_three_submitted') {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email,\r\n                            [showName]: { 'partner_id': value.partner.partner_id }\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                    {\r\n                        title: showName,\r\n                        dataIndex: showName,\r\n                        key: showName,\r\n                        render: (data) => {\r\n                            return (\r\n\r\n                                <>\r\n                                    <div className='gx-flex-row gx-align-items-center font-20'>\r\n                                        <Tooltip title='PDT'>\r\n                                            <i onClick={() => navigateToPdt(data.partner_id)} className='icon icon-timeline color-blue' />\r\n                                        </Tooltip>\r\n                                        <Tooltip\r\n                                            title='Filing Plans'\r\n                                        >\r\n                                            <FileSearchOutlined onClick={() => navigateToFilingPlans(data.partner_id)} className='font-20 color-blue mr-20 ml-20' />\r\n                                        </Tooltip>\r\n                                        <Tooltip title='Sales report'>\r\n                                            <BarChartOutlined onClick={() => navigateToSalesReport(data.partner_id)} className='font-20 color-blue' />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            else if (type === 'submitted_not_approved') {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email,\r\n                            [showName]: { 'partner_id': value.partner.partner_id, 'template_data': value.partner.template_data }\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                    {\r\n                        title: showName,\r\n                        dataIndex: showName,\r\n                        key: showName,\r\n                        render: (data) => {\r\n                            let showPDT = false\r\n                            let showFilingPlan = false\r\n                            let showSales = false\r\n                            const template_data = data.template_data\r\n                            template_data.map(obj => {\r\n\r\n                                if (obj !== null) {\r\n                                    if (obj.template_type === 'pdt' && obj.is_approved !== true) {\r\n                                        showPDT = true\r\n                                    }\r\n\r\n                                    if (obj.template_type === 'filing plan' && obj.is_approved !== true) {\r\n                                        showFilingPlan = true\r\n                                    }\r\n\r\n                                    if (obj.template_type === 'sales' && obj.is_approved !== true) {\r\n                                        showSales = true\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                            return (\r\n                                <>\r\n                                    <div className='gx-flex-row gx-align-items-center font-20'>\r\n                                        {\r\n                                            showPDT ?\r\n                                                <Tooltip title='PDT'>\r\n                                                    <i onClick={() => navigateToPdt(data.partner_id)} className='icon icon-timeline color-blue mr-20' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                        {\r\n                                            showFilingPlan ?\r\n                                                <Tooltip\r\n                                                    title='Filing Plans'\r\n                                                >\r\n                                                    <FileSearchOutlined onClick={() => navigateToFilingPlans(data.partner_id)} className='font-20 color-blue mr-20' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                        {\r\n                                            showSales ?\r\n                                                <Tooltip title='Sales report'>\r\n                                                    <BarChartOutlined onClick={() => navigateToSalesReport(data.partner_id)} className='font-20 color-blue' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n                    }\r\n                ]\r\n            } else {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                ]\r\n            }\r\n            setData(rowData)\r\n            setColumns(columnData)\r\n        }\r\n    }, [isLoaded])\r\n\r\n    const navigateToPdt = (item) => {\r\n        props.history.push('/admin/development-timeline/' + item)\r\n    }\r\n\r\n    const navigateToFilingPlans = (item) => {\r\n        props.history.push('/admin/filing-plans/' + item)\r\n    }\r\n\r\n    const navigateToSalesReport = (item) => {\r\n        props.history.push('/admin/sales-report/' + item)\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setType(value)\r\n    }\r\n\r\n    const sendEmail = () => {\r\n        let temp = []\r\n        if (type === 'not_submitted' || type === 'saved_but_not_submitted') {\r\n            if (List.length > 0) {\r\n                List.map(value => {\r\n                    let not_submitted = []\r\n                    const template_data = value.partner.template_data\r\n                    if (template_data.length < 1) {\r\n                        not_submitted = ['pdt', 'filing plan', 'sales']\r\n                    } else {\r\n                        template_data.map(obj => {\r\n                            if (obj !== null) {\r\n                                if (obj.report_status !== 'Submitted' && obj.report_status !== 'Approved') {\r\n                                    not_submitted.push(obj.template_type)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    temp.push({\r\n                        'email_id': value.email,\r\n                        'not_submitted': not_submitted\r\n                    })\r\n                })\r\n            }\r\n        }\r\n        dispatch(bulkReminderMail({ 'data': temp }))\r\n    }\r\n\r\n    return (\r\n        <Col xs={24} className='mb-30'>\r\n            <Widget styleName='gx-order-history dashboard-min-height'\r\n                title={\r\n                    <div className='gx-flex-row gx-align-items-center'>\r\n                        <h2 className='gx-text-capitalize line-height-27 mb-0'>\r\n                            {getQuarter() ? 'Admin Dashboard Summary for ' + '(' + getQuarter() + ')' : 'Admin Dashboard Summary'}\r\n\r\n                        </h2>\r\n                        <Select className='gx-select-md ml-20' defaultValue='all_three_submitted' onChange={handleChange}>\r\n                            <Option value='all_three_submitted'>All data submitted</Option>\r\n                            <Option value='not_submitted'>Yet to submit data</Option>\r\n                            <Option value='saved_but_not_submitted'>Saved but not submitted data</Option>\r\n                            <Option value='submitted_not_approved'>Submitted but not approved</Option>\r\n                        </Select>\r\n                    </div>\r\n                }\r\n                extra={\r\n                    <div className='gx-flex-row gx-align-items-center'>\r\n                        {\r\n                            type === 'not_submitted' || type === 'saved_but_not_submitted' ?\r\n                                <Button\r\n                                    type='primary'\r\n                                    className='mb-0'\r\n                                    onClick={sendEmail}\r\n                                    disabled={!isLoaded || !isUserAdmin}\r\n                                >\r\n                                    <BellOutlined /> Send Reminder\r\n                                </Button>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                }>\r\n                <div\r\n                    className='gx-table-responsive'\r\n                >\r\n                    <Table\r\n                        className='gx-table-no-bordered mpp-list-table'\r\n                        columns={columns}\r\n                        dataSource={data}\r\n                        bordered={false}\r\n                        size='small'\r\n                        loading={!isLoaded}\r\n                    />\r\n                </div>\r\n            </Widget>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react'\nimport { Row, Tabs } from 'antd';\nimport {\n    AdminDashboardProjectCount,\n    AdminDashboardProductCompanyCount,\n    AdminDashboardProductCountryCount,\n    AdminDashboardCompanyCount,\n    AdminDashboardCountryProduct,\n    AdminDashboardProductCompanySales,\n    AdminDashboardProductPeriodSales,\n    AdminDashboardProductCountrySales,\n    AdminDashboardCompanyProductSales,\n    AdminDashboardCompanyPeriodSales,\n    AdminDashboardCompanyCountrySales,\n    AdminDashboardCountryProductSales,\n    AdminDashboardCountryPeriodSales,\n    AdminDashboardCountryCompanySales,\n    AdminDashboardPeriodProductSales,\n    AdminDashboardPeriodCountrySales,\n    AdminDashboardPeriodCompanySales,\n    AdminDashboardPackPeriodSales,\n    AdminDashboardTreatmentPeriodSales,\n    AdminDashboardSummary\n\n} from './dashboard-tables'\n\nimport './admin-dashboard.css'\n\nconst { TabPane } = Tabs;\n\nconst AdminDashboard = (props) => {\n\n    return (\n        <>\n            <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\n                <h1 className='title gx-mb-4'>Dashboard</h1>\n            </div>\n            <Tabs\n                tabPosition='top'\n                type='card'\n            >\n                <TabPane tab='Product / Project' key='1'>\n                    <Row>\n                        <AdminDashboardProjectCount />\n                        <AdminDashboardProductCompanyCount />\n                        <AdminDashboardCompanyCount />\n                    </Row>\n                </TabPane>\n\n                <TabPane tab='Summary' key='2'>\n                    <Row>\n                        <AdminDashboardSummary history={props.history} />\n                    </Row>\n                </TabPane>\n\n                <TabPane tab='Country Filings' key='3'>\n                    <Row>\n                        <AdminDashboardProductCountryCount />\n                        <AdminDashboardCountryProduct />\n                    </Row>\n                </TabPane>\n\n                <TabPane tab='Sales by Product' key='4'>\n                    <Row>\n                        <AdminDashboardProductCompanySales />\n                        <AdminDashboardProductPeriodSales />\n                        <AdminDashboardProductCountrySales />\n                    </Row>\n                </TabPane>\n                <TabPane tab='Sales by Company' key='5'>\n                    <Row>\n                        <AdminDashboardCompanyProductSales />\n                        <AdminDashboardCompanyPeriodSales />\n                        <AdminDashboardCompanyCountrySales />\n                    </Row>\n                </TabPane>\n                <TabPane tab='Sales by Country' key='6'>\n                    <Row>\n                        <AdminDashboardCountryProductSales />\n                        <AdminDashboardCountryPeriodSales />\n                        <AdminDashboardCountryCompanySales />\n                    </Row>\n                </TabPane>\n                <TabPane tab='Sales over Time' key='7'>\n                    <Row>\n                        <AdminDashboardPeriodProductSales />\n                        <AdminDashboardPeriodCountrySales />\n                        <AdminDashboardPeriodCompanySales />\n                    </Row>\n                </TabPane>\n                <TabPane tab='Price' key='8'>\n                    <Row>\n                        <AdminDashboardPackPeriodSales />\n                        <AdminDashboardTreatmentPeriodSales />\n                    </Row>\n                </TabPane>\n            </Tabs>\n        </>\n    )\n}\n\n\nexport default AdminDashboard","import { partnerDashboardConstants } from '../../constants';\nimport { getPartnerDashboard } from '../../services';\nimport { hideLoader, showLoader } from './Loader';\n\nexport const getPartnerDashboardAction = () => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_REQUEST });\n        getPartnerDashboard().then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch(showLoader());\n                dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\n","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const getPartnerDashboard = () => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/partner/dashboard/`, requestOptions)\n        .then(handleResponse)\n}","import React from 'react';\nimport Widget from 'components/Widget';\nimport { Col } from 'antd';\nimport { FileSearchOutlined, BarChartOutlined } from '@ant-design/icons'\nimport moment from 'moment';\nimport './template-tile.css'\n\nconst TemplateTile = (props) => {\n  const navigate = () => {\n    const { template_type } = props.data\n    if (template_type === 'pdt') {\n      props.history.push('/partner/development-timeline')\n    }\n    else if (template_type === 'filing plan') {\n      props.history.push('/partner/filing-plans')\n    }\n    else if (template_type === 'sales') {\n      props.history.push('/partner/sales-report')\n    }\n\n  }\n  const { template_type, report_status, no_of_days_to_submit, last_message } = props.data\n\n  return (\n    <Col span={8} onClick={navigate} className='tile-hover'>\n      <Widget  >\n        <div className='gx-flex-column template-tile-icon'>\n          {\n            template_type === 'pdt' ?\n              <span className='font-45'><i className='icon icon-timeline mb-20 color-purple' /></span> :\n              template_type === 'filing plan' ?\n                <FileSearchOutlined className='color-purple font-40' /> :\n                <BarChartOutlined className='color-purple font-40' />\n          }\n          <h3 className='color-purple mb-30'>\n            {\n              template_type === 'pdt' ?\n                'Product Development Timeline' :\n                template_type === 'filing plan' ?\n                  'Filing Plan' :\n                  'Sales Report'\n            }\n          </h3>\n        </div>\n        <div key={props.key} className='gx-media gx-align-items-center gx-flex-nowrap gx-pro-contact-list'>\n          <div className='gx-media-body'>\n            <p className='gx-fs-lg color-black'>For Quarter: <span className='gx-mb-0 gx-fs-lg color-gray'>\n              {props.quarter ? props.quarter : '---'}</span></p>\n            <p className='gx-fs-lg color-black'>Last Date of Submission:\n            <span className='gx-mb-0 gx-fs-lg color-red'>{no_of_days_to_submit ? ' ' + moment(no_of_days_to_submit).format('Do MMM YYYY') : '---'}</span>\n            </p>\n            <p className='gx-fs-lg color-black'>Report Status:<span className={\n              report_status === 'Approved' ? 'gx-mb-0 gx-fs-lg color-green' :\n                report_status === 'Rejected' ? 'gx-mb-0 gx-fs-lg color-red' : 'gx-mb-0 gx-fs-lg color-blue'\n            }> {report_status}</span>\n            </p>\n            <p className='gx-fs-lg color-black'>Last Message: <span className='gx-mb-0 gx-fs-lg color-gray'>\n              {last_message ? last_message : '---'}</span></p>\n          </div>\n        </div>\n      </Widget>\n    </Col>\n  )\n}\n\nexport default TemplateTile;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Row, Empty } from 'antd';\nimport { getPartnerDashboardAction } from '../../../appRedux/actions/PartnerDashboard';\nimport TemplateTile from 'components/TemplateTile';\n\nimport './partner-dashboard.css'\nimport { getQuarter } from '../../../helpers';\n\nconst PartnerDashboard = (props) => {\n\n    const { isLoaded, partnerList } = useSelector(({ partnerDashboard }) => partnerDashboard);\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        dispatch(getPartnerDashboardAction());\n    }, [])\n\n    useEffect(() => {\n        if (isLoaded) {\n            setData(partnerList)\n        }\n    }, [isLoaded, partnerList])\n\n    return (\n        <div>\n            <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\n                <h1 className='title gx-mb-4'><IntlMessages id='sidebar.partnerDashboard' /></h1>\n            </div>\n            {\n                data && data.length > 0 ?\n                    <Row>\n                        {\n                            data.map((value, index) => <TemplateTile quarter={getQuarter()} data={value} history={props.history} key={index} />)\n                        }\n                    </Row>\n                    :\n                    <Card>\n                        <Empty description='No data available!' />\n                    </Card>\n            }\n        </div>\n    )\n}\n\nexport default PartnerDashboard","import { adminPartnerConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { addPartner, deletePartner, editPartner, getPartner, getPartnerList, getRegionList, getReportCutOffDate, sendReportReminder, setReportCutOffDate } from '../../services';\nimport { showMessage } from '../../helpers'\n\nexport const adminAddPartner = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.ADD_PARTNER_REQUEST });\n        addPartner(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.ADD_PARTNER_SUCCESS });\n                showMessage('success', 'Partner added succcessfully!');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.ADD_PARTNER_FAILURE });\n                let errorMsg = error && error.error ? error.error.filter(\n                    (value) => value !== 'None'\n                ) : ''\n                if (errorMsg.length) {\n                    showMessage('error', errorMsg[0]);\n                }\n            }\n        )\n    }\n}\n\nexport const adminEditPartner = (id, data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.EDIT_PARTNER_REQUEST });\n        editPartner(id, data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.EDIT_PARTNER_SUCCESS });\n                showMessage('success', 'Partner edited succcessfully!');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.EDIT_PARTNER_FAILURE });\n                let errorMsg = error && error.error ? error.error.filter(\n                    (value) => value !== 'None'\n                ) : ''\n                if (errorMsg.length) {\n                    showMessage('error', errorMsg[0]);\n                }\n            }\n        )\n    }\n}\n\nexport const getAdminPartnerList = () => {\n    return dispatch => {\n        dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_REQUEST });\n        getPartnerList().then(\n            response => {\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminSinglePartner = (id, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.GET_PARTNER_REQUEST });\n        getPartner(id).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const deleteAdminSinglePartner = (id, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.DELETE_PARTNER_REQUEST });\n        deletePartner(id).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.DELETE_PARTNER_SUCCESS });\n                showMessage('success', 'Partner successfully removed!')\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.DELETE_PARTNER_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const adminSendReminder = (id, type, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.SEND_REMINDER_REQUEST });\n        sendReportReminder(id, type).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.SEND_REMINDER_SUCCESS });\n                showMessage('success', 'Reminder sent!');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.SEND_REMINDER_FAILURE });\n                console.log('error', error)\n            }\n        )\n    }\n}\n\nexport const resetEditPartner = () => {\n    return dispatch => {\n        dispatch({ type: adminPartnerConstants.RESET_EDIT_PARTNER });\n    }\n}\n\nexport const getAdminCountryList = () => {\n    return dispatch => {\n        dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_REQUEST });\n        getRegionList().then(\n            response => {\n                dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const adminSetCutOffDate = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_REQUEST });\n        setReportCutOffDate(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_SUCCESS });\n                showMessage('success', 'Submission Date set successfully!')\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_FAILURE });\n                console.log('error', error)\n            }\n        )\n    }\n}\n\nexport const adminGetCutOffDate = () => {\n    return dispatch => {\n        dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_REQUEST });\n        getReportCutOffDate().then(\n            response => {\n                dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_SUCCESS, data: response ? response : {} });\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_FAILURE });\n                console.log('error', error)\n            }\n        )\n    }\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\n\nexport const addPartner = (data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/admin/partner/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const editPartner = (id, data) => {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getPartnerList = () => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/partner/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getPartner = (id) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const deletePartner = (id) => {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const sendReportReminder = (partner_id, template_type) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ partner_id, template_type })\n    };\n\n    return fetch(`${config.API_URL}/template/reminder/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const getRegionList = () => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/country_list/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const setReportCutOffDate = ({ date }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ date })\n    };\n\n    return fetch(`${config.API_URL}/admin/cut_off_date/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getReportCutOffDate = () => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/cut_off_date/`, requestOptions)\n        .then(handleResponse)\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Table, Row, Col, Button, Checkbox, Space, Input, Tag, Tooltip } from 'antd';\nimport { SearchOutlined, InfoCircleTwoTone, EyeTwoTone, BellTwoTone, CheckCircleTwoTone, CloseCircleTwoTone, EditTwoTone, DeleteTwoTone, UsergroupAddOutlined } from '@ant-design/icons';\nimport { adminSendReminder, deleteAdminSinglePartner, getAdminPartnerList } from '../../../appRedux/actions/AdminPartner';\nimport { findIndex, has } from 'lodash';\nimport moment from 'moment';\n\nimport './partner-list.css'\nimport { showConfirm, getRole } from '../../../helpers';\n\nconst PartnerList = (props) => {\n\n    const isLoaded = useSelector(state => state.adminPartner.isLoaded);\n    const adminPartnerList = useSelector(state => state.adminPartner.partnerList);\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n    const [searchedColumn, setSearchedColumn] = useState('');\n    const searchInput = useRef();\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n\n    useEffect(() => {\n        setIsUserAdmin(() => {\n            return (getRole() === 'ADMIN')\n        })\n        dispatch(getAdminPartnerList());\n    }, [])\n\n    useEffect(() => {\n        if (isLoaded) {\n            let rowData = adminPartnerList.length ? adminPartnerList.filter(\n                value => value.partner\n            ).map(\n                value => ({\n                    key: value.partner.partner_id,\n                    name: value.partner.company_name,\n                    email: value.email,\n                    active_products: value.partner.active_products,\n                    pdt: getTemplateData(value.partner.template_data, 'pdt', value.partner.partner_id),\n                    filing_plans: getTemplateData(value.partner.template_data, 'filing plan', value.partner.partner_id),\n                    sales_report: getTemplateData(value.partner.template_data, 'sales', value.partner.partner_id),\n                })\n            ) : [];\n            setData(rowData)\n        }\n    }, [isLoaded])\n\n    const getTemplateData = (templateList, type, partner_id) => {\n        let templateData = templateList[findIndex(templateList, { template_type: type })];\n        return templateData ? { ...templateData, partner_id } : { partner_id }\n    }\n\n    const navigateToAddPartner = () => {\n        const { history } = props;\n        history.push('/admin/add-partner')\n    }\n\n    const navigateToContent = (item) => {\n        props.history.push('/admin/edit-partner/' + item.key)\n    }\n\n    const navigateToPdt = (item) => {\n        props.history.push('/admin/development-timeline/' + item)\n    }\n\n    const navigateToFilingPlans = (item) => {\n        props.history.push('/admin/filing-plans/' + item)\n    }\n\n    const navigateToSalesReport = (item) => {\n        props.history.push('/admin/sales-report/' + item)\n    }\n\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        setSearchedColumn(dataIndex);\n    };\n\n    const handleReset = clearFilters => {\n        clearFilters();\n    };\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={searchInput}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Space>\n                    <Button\n                        type='primary'\n                        onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n                        icon={<SearchOutlined />}\n                        size='small'\n                        style={{ width: 90 }}\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={() => handleReset(clearFilters)} size='small' style={{ width: 90 }}>\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n        onFilter: (value, record) =>\n            record[dataIndex]\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n                : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                // setTimeout(() => this.searchInput.select(), 100);\n            }\n        },\n        render: text =>\n            searchedColumn === dataIndex ? (\n                text\n            ) : (\n                    text\n                ),\n    });\n\n    const setColumns = () => {\n        let columns = [{\n            title: 'Company Name',\n            dataIndex: 'name',\n            key: 'name',\n            ...getColumnSearchProps('name'),\n            sorter: (a, b) => a.name.localeCompare(b.name),\n            width: 200,\n            render: name => <span className='gx-text-capitalize'>{name}</span>\n        }, {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n            width: 140\n        }, {\n            title: 'Active Products',\n            dataIndex: 'active_products',\n            key: 'active_products',\n            width: 240,\n            render: products => (\n                <>\n                    {products.map(\n                        value => <Tag key={value.product_id}>{value.product_name}</Tag>\n                    )}\n                </>\n            )\n        }, {\n            title: (<h5 className='mb-0'>Product Development Timeline</h5>),\n            dataIndex: 'pdt',\n            key: 'pdt',\n            align: 'center',\n            width: 140,\n            render: (data) => renderTemplateData(\n                data,\n                () => navigateToPdt(data.partner_id),\n                () => dispatch(adminSendReminder(data.partner_id, 'PDT')),\n                'pdt'\n            )\n        }, {\n            title: (<h5 className='mb-0'>Filing Plans</h5>),\n            dataIndex: 'filing_plans',\n            key: 'filing_plans',\n            align: 'center',\n            width: 140,\n            render: (data) => renderTemplateData(\n                data,\n                () => navigateToFilingPlans(data.partner_id),\n                () => dispatch(adminSendReminder(data.partner_id, 'Filing Plans')),\n                'filing-plans'\n            )\n        }, {\n            title: (<h5 className='mb-0'>Sales Report</h5>),\n            dataIndex: 'sales_report',\n            key: 'sales_report',\n            align: 'center',\n            width: 140,\n            render: (data) => renderTemplateData(\n                data,\n                () => navigateToSalesReport(data.partner_id),\n                () => dispatch(adminSendReminder(data.partner_id, 'Sales')),\n                'sales'\n            ),\n        }, {\n            title: 'Action',\n            key: 'operation',\n            align: 'center',\n            width: 140,\n            render: item => (\n                <div style={{ display: 'inline-flex', alignItems: 'center' }}>\n                    <Button\n                        type='link'\n                        className='margin-0'\n                        onClick={() => navigateToContent(item)}\n                        id={'edit-partner-' + item.key}\n                        disabled={!isUserAdmin}\n                    >\n                        <Tooltip title='Edit Partner'>\n                            <EditTwoTone twoToneColor='#00AEEF' className='font-20' />\n                        </Tooltip>\n                    </Button>\n                    <Button\n                        type='link'\n                        className='margin-0'\n                        onClick={() => showDeletePartner(item)}\n                        id={'delete-partner-' + item.key}\n                        disabled={!isUserAdmin}\n                    >\n                        <Tooltip title='Deactivate Partner'>\n                            <DeleteTwoTone twoToneColor='#00AEEF' className='font-20' />\n                        </Tooltip>\n                    </Button>\n                </div>\n            ),\n        }];\n        return columns\n    }\n\n    const renderTemplateData = (data, viewReport, sendReminder, templateName) => {\n        if (has(data, 'is_read')) {\n            const { quarter_name, is_approved, submission_time, updated_at, report_status, partner_id } = data;\n            return (\n                <div className='gx-flex-row gx-align-items-center gx-justify-content-center font-20'>\n                    <Tooltip title={'For Quarter: ' + quarter_name}>\n                        <InfoCircleTwoTone twoToneColor='#00AEEF' />\n                    </Tooltip>\n                    <Tooltip\n                        title={'Report ' + report_status + ' on ' + moment(report_status === 'Submitted' ? submission_time : updated_at).format('Do MMM YYYY, hh:mm A')}\n                    >\n                        {\n                            is_approved === null ?\n                                <Checkbox className='ml-20' checked={false}></Checkbox> :\n                                is_approved ?\n                                    <CheckCircleTwoTone className='ml-20' twoToneColor='#52c41a' /> :\n                                    <CloseCircleTwoTone className='ml-20' twoToneColor='#f44336' />\n                        }\n                    </Tooltip>\n                    <Tooltip title='View report'>\n                        <EyeTwoTone\n                            className='ml-20'\n                            twoToneColor='#00AEEF'\n                            onClick={() => viewReport()}\n                            id={'view-' + templateName + '-' + partner_id}\n                        />\n                    </Tooltip>\n                </div>\n            )\n        } else {\n            return (\n                <div className='gx-flex-row gx-align-items-center gx-justify-content-center font-20'>\n                    <Tooltip title='Send Reminder'>\n                        <BellTwoTone\n                            twoToneColor='#00AEEF'\n                            onClick={isUserAdmin ? () => sendReminder() : ''}\n                            id={'reminder-' + templateName + '-' + data.partner_id}\n                        />\n                    </Tooltip>\n                </div>\n            )\n        }\n    }\n\n    const showDeletePartner = (item) => {\n        showConfirm('Do you want to deactivate ' + item.name.toUpperCase() + ' ?', () => {\n            dispatch(deleteAdminSinglePartner(item.key, () => { dispatch(getAdminPartnerList()) }))\n        })\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <div className='gx-flex-row align-items-center'>\n                        <h1 className='title gx-mb-4'><IntlMessages id='sidebar.partnerList' /></h1>\n                        <Button id='partner-list-add-partner' onClick={navigateToAddPartner} type='primary' className='gx-ml-auto' disabled={!isUserAdmin}>\n                            <UsergroupAddOutlined /> <IntlMessages id='partner.list.addPartner' />\n                        </Button> \n                    </div>\n                </Col>\n                <Col span={24}>\n                    <Card className='mb-0'>\n                        <Table\n                            className='gx-table-responsive mpp-list-table'\n                            columns={setColumns()}\n                            dataSource={data}\n                            bordered\n                            loading={!isLoaded}\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PartnerList","import React from 'react';\nimport IntlMessages from \"util/IntlMessages\";\n\n\nconst PartnerPerformance = () => {\n    return (\n        <div>\n            <h1 className=\"title gx-mb-4\"><IntlMessages id=\"sidebar.partnerList\" /></h1>\n        </div>\n    )\n}\n\nexport default PartnerPerformance\n","import { authConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { login, changePassword, tokenValidate, passwordSet, forgotPassword } from '../../services';\nimport { showMessage } from '../../helpers'\n\nexport const userLogin = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader())\n        login(data).then(\n            response => {\n                dispatch(hideLoader());\n                if (!response) {\n                    showMessage('error', 'User Does not exist');\n                    dispatch({ type: authConstants.LOGIN_FAILURE });\n                } else {\n                    dispatch({ type: authConstants.LOGIN_SUCCESS });\n                    localStorage.setItem('user', JSON.stringify(response));\n                    showMessage('success', 'User logged in successfully');\n                    if (onSuccess) {\n                        onSuccess()\n                    }\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.LOGIN_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const userLogout = () => {\n    return dispatch => {\n        dispatch({ type: authConstants.LOGOUT_SUCCESS });\n        localStorage.removeItem('user');\n    }\n}\n\nexport const userChangePassword = (data) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: authConstants.CHANGE_PASSWORD_REQUEST });\n        changePassword(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.CHANGE_PASSWORD_SUCCESS });\n                showMessage('success', 'Password changed successfully');\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.CHANGE_PASSWORD_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const resetChangePassword = () => {\n    return dispatch => dispatch({ type: authConstants.CHANGE_PASSWORD_REQUEST })\n}\n\nexport const validateToken = (data) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: authConstants.VALIDATE_TOKEN_REQUEST });\n        tokenValidate(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.VALIDATE_TOKEN_SUCCESS });\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.VALIDATE_TOKEN_FAILURE });\n                console.log(error)\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const setPassword = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: authConstants.SET_PASSWORD_REQUEST });\n        passwordSet(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.SET_PASSWORD_SUCCESS });\n                showMessage('success', 'Password set successfully');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.SET_PASSWORD_FAILURE });\n                showMessage('error', error['password'][0]);\n            }\n        )\n    }\n}\n\nexport const userForgetPassword = (data) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: authConstants.FORGOT_PASSWORD_REQUEST });\n        forgotPassword(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.FORGOT_PASSWORD_SUCCESS });\n                showMessage('success', 'Email to change password has been sent to given email id!');\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: authConstants.FORGOT_PASSWORD_FAILURE });\n                if (error && error.email) {\n                    showMessage('error', error.email[0]);\n                }\n            }\n        )\n    }\n}","import { adminProductConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { addProduct, deleteProduct, editProduct, getProduct, getProductDetails, getProductList } from '../../services';\nimport { showMessage } from '../../helpers'\n\nexport const adminAddProduct = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminProductConstants.ADD_PRODUCT_REQUEST });\n        addProduct(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.ADD_PRODUCT_SUCCESS });\n                showMessage('success', 'Product added succcessfully!');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.ADD_PRODUCT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const adminEditProduct = (id, data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminProductConstants.EDIT_PRODUCT_REQUEST });\n        editProduct(id, data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.EDIT_PRODUCT_SUCCESS });\n                showMessage('success', 'Product edited succcessfully!');\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.EDIT_PRODUCT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const getAdminProductList = (showRecent) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_REQUEST });\n        getProductList(showRecent).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_SUCCESS, data: response ? response : [] });\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminProduct = (id, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminProductConstants.GET_PRODUCT_REQUEST });\n        getProduct(id).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.GET_PRODUCT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) { onSuccess() }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.GET_PRODUCT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const deleteAdminProduct = (id, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: adminProductConstants.DELETE_PRODUCT_REQUEST });\n        deleteProduct(id).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.DELETE_PRODUCT_SUCCESS });\n                showMessage('success', 'Product Deactivated!')\n                if (onSuccess) { onSuccess() }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: adminProductConstants.DELETE_PRODUCT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminProductDetails = (data, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_REQUEST });\n        getProductDetails(data).then(\n            response => {\n                dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response ? response : {})\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const resetProduct = () => {\n    return dispatch => {\n        dispatch({ type: adminProductConstants.RESET_PRODUCT });\n    }\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\n\nexport const addProduct = (data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/admin/product/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const editProduct = (id, data) => {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getProduct = (id) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const deleteProduct = (id) => {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getProductList = (showRecent) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/admin/product/?recent=${showRecent}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getProductDetails = ({ product_name, partner_id }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ product_name, partner_id })\n    };\n\n    return fetch(`${config.API_URL}/admin/product_detail/`, requestOptions)\n        .then(handleResponse)\n}","import * as FileSaver from 'file-saver';\nimport { pdtConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { getPDT, postPDT, adminGetPDT, adminPostPDT, approvePDT, submitPDT, markPDTMessageRead, getPDTReport, downloadpdtReport } from '../../services';\nimport { showMessage } from '../../helpers'\n\nexport const getPdtData = (onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.GET_PDT_REQUEST });\n        getPDT(quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.GET_PDT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.GET_PDT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminPDTReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: pdtConstants.GET_PDT_REPORT_REQUEST });\n        getPDTReport(data).then(\n            response => {\n                dispatch({ type: pdtConstants.GET_PDT_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: pdtConstants.GET_PDT_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const downloadPDTReport = (filename, quarter, requestObj, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_REQUEST });\n        downloadpdtReport(quarter, requestObj).then(response => {\n            dispatch(hideLoader());\n            dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_SUCCESS });\n            FileSaver.saveAs(response, filename);\n            if (onSuccess) {\n                onSuccess()\n            }\n        }).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postPdtData = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.POST_PDT_REQUEST });\n        postPDT(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.POST_PDT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.POST_PDT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const getAdminPdtData = (id, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.GET_ADMIN_PDT_REQUEST });\n        adminGetPDT(id,quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.GET_ADMIN_PDT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.GET_ADMIN_PDT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postAdminPdtData = (id, data, onSuccess, quarter_name=null) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.POST_ADMIN_PDT_REQUEST });\n        adminPostPDT(id, data, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.POST_ADMIN_PDT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.POST_ADMIN_PDT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const approvePDTReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.APPROVE_PDT_REQUEST });\n        approvePDT(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.APPROVE_PDT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.APPROVE_PDT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const submitPDTReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: pdtConstants.REPORT_PDT_REQUEST });\n        submitPDT(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.REPORT_PDT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: pdtConstants.REPORT_PDT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const partnerMarkMessageRead = (type, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: pdtConstants.MESSAGE_READ_REQUEST });\n        markPDTMessageRead(type).then(\n            response => {\n                dispatch({ type: pdtConstants.MESSAGE_READ_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: pdtConstants.MESSAGE_READ_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}","import * as FileSaver from 'file-saver';\nimport { filingPlansConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { showMessage } from '../../helpers'\nimport { adminGetFilingPlans, adminPostFilingPlans, approveFilingPlans, downloadFilingPlansReport, getFilingPlans, getFilingPlansReport, markFilingPlansMessageRead, postFilingPlans, submitFilingPlans } from '../../services/FilingPlans';\n\nexport const getFilingPlansData = (onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REQUEST });\n        getFilingPlans(quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminFilingPlansReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_REQUEST });\n        getFilingPlansReport(data).then(\n            response => {\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const downloadFilingReport = (filename, quarter, requestObj, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_REQUEST });\n        downloadFilingPlansReport(quarter, requestObj).then(response => {\n            dispatch(hideLoader());\n            dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_SUCCESS });\n            FileSaver.saveAs(response, filename);\n            if (onSuccess) {\n                onSuccess()\n            }\n        }).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postFilingPlansData = (data, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.POST_FILING_PLANS_REQUEST });\n        postFilingPlans(data, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.POST_FILING_PLANS_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.POST_FILING_PLANS_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const getAdminFilingPlansData = (id, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_REQUEST });\n        adminGetFilingPlans(id, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postAdminFilingPlansData = (id, data, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_REQUEST });\n        adminPostFilingPlans(id, data, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const approveFilingPlansReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_REQUEST });\n        approveFilingPlans(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const submitFilingPlansReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_REQUEST });\n        submitFilingPlans(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const partnerMarkFilingPlansMessageRead = (type, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: filingPlansConstants.MESSAGE_READ_REQUEST });\n        markFilingPlansMessageRead(type).then(\n            response => {\n                dispatch({ type: filingPlansConstants.MESSAGE_READ_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: filingPlansConstants.MESSAGE_READ_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}","import { config } from '../constants';\nimport { authHeader } from '../helpers';\nimport { handleResponse } from './handle-response';\n\nexport const getFilingPlans = (quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/filing/`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/filing/?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const postFilingPlans = (data, quarter_name) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/filing/`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/filing/?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const adminGetFilingPlans = (id, quarter_name) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/filing/${id}/`, requestOptions)\n        .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/filing/${id}/?quarter=` + quarter_name, requestOptions)\n        .then(handleResponse)\n    }\n}\n\nexport const adminPostFilingPlans = (id, data, quarter_name) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n\n    if(!quarter_name){\n        return fetch(`${config.API_URL}/template/filing/${id}/`, requestOptions)\n            .then(handleResponse)\n    }else{\n        return fetch(`${config.API_URL}/template/filing/${id}/?quarter=` + quarter_name, requestOptions)\n            .then(handleResponse)\n    }\n}\n\nexport const submitFilingPlans = ({message}) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({message})\n    };\n\n    return fetch(`${config.API_URL}/template/filing/submit/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const approveFilingPlans = ({ partner_id, message, is_approved }) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify({ partner_id, message, is_approved })\n    };\n\n    return fetch(`${config.API_URL}/template/filing/message/`, requestOptions)\n        .then(handleResponse)\n}\n\n\nexport const markFilingPlansMessageRead = (type) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    };\n\n    return fetch(`${config.API_URL}/template/filing/inbox/${type}`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const getFilingPlansReport = (data) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(`${config.API_URL}/report/filing/`, requestOptions)\n        .then(handleResponse)\n}\n\nexport const downloadFilingPlansReport = (quarter, requestObj) => {\n    requestObj['quarter']=quarter\n    const requestOptions = {\n        method: 'POST',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestObj),\n        responseType: 'blob'\n    };\n\n    return fetch(`${config.API_URL}/report/filing/download/`, requestOptions)\n        .then(response => response.blob())\n}","import * as FileSaver from 'file-saver';\nimport { salesReportConstants } from '../../constants';\nimport { hideLoader, showLoader } from './Loader';\nimport { showMessage } from '../../helpers'\nimport { getConsolidatedSalesReport, getSalesReport, downloadConsolidatedSalesReport, postSalesReport, adminGetSalesReport, adminPostSalesReport, approveSalesReport, submitSalesReport, markSalesReportMessageRead, getProductsToBeVerified, postProductsToBeVerified } from '../../services';\n\nexport const getApiSalesData = (onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_REQUEST });\n        getSalesReport('api', quarter_name).then(\n            response => {\n                dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getFdfSalesData = (onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_REQUEST });\n        getSalesReport('fdf', quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminConsolidatedApiReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_REQUEST });\n        getConsolidatedSalesReport('api', data).then(\n            response => {\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminConsolidatedFdfReport = (data, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST });\n        getConsolidatedSalesReport('fdf', data).then(\n            response => {\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const downloadApiSalesReport = (filename, apiRequestObj,onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_REQUEST });\n        downloadConsolidatedSalesReport('api', apiRequestObj).then(response => {\n            dispatch(hideLoader());\n            dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_SUCCESS });\n            FileSaver.saveAs(response, filename);\n            if (onSuccess) {\n                onSuccess()\n            }\n        }).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const downloadFdfSalesReport = (filename, fdfRequestObj, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_REQUEST });\n        downloadConsolidatedSalesReport('fdf', fdfRequestObj).then(response => {\n            dispatch(hideLoader());\n            dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_SUCCESS });\n            FileSaver.saveAs(response, filename);\n            if (onSuccess) {\n                onSuccess()\n            }\n        }).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postApiSalesReportData = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_REQUEST });\n        postSalesReport('api', data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const postFdfSalesReportData = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_REQUEST });\n        postSalesReport('fdf', data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const getAdminApiSalesData = (id, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_REQUEST });\n        adminGetSalesReport('api', id, quarter_name).then(\n            response => {\n                dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const getAdminFdfSalesData = (id, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_REQUEST });\n        adminGetSalesReport('fdf', id, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\n                if (onSuccess) {\n                    onSuccess(response)\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postAdminApiSalesData = (id, data, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_REQUEST });\n        adminPostSalesReport('api', id, data, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const postAdminFdfSalesData = (id, data, onSuccess, quarter_name) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_REQUEST });\n        adminPostSalesReport('fdf', id, data, quarter_name).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const approveSalesReportData = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_REQUEST });\n        approveSalesReport(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const submitSalesReportData = (data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_REQUEST });\n        submitSalesReport(data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_SUCCESS });\n                showMessage('success', 'Reports submitted successfully!')\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                if (onSuccess) {\n                    onSuccess()\n                }\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const partnerMarkSalesReportMessageRead = (type, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: salesReportConstants.MESSAGE_READ_REQUEST });\n        markSalesReportMessageRead(type).then(\n            response => {\n                dispatch({ type: salesReportConstants.MESSAGE_READ_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: salesReportConstants.MESSAGE_READ_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}\n\nexport const getAdminProductsToBeVerified = (id, onSuccess) => {\n    return dispatch => {\n        dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_REQUEST });\n        getProductsToBeVerified(id).then(\n            response => {\n                dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_SUCCESS, data: response ? response : [] });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_FAILURE });\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport const postAdminProductsToBeVerified = (id, data, onSuccess) => {\n    return dispatch => {\n        dispatch(showLoader());\n        dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_REQUEST });\n        postProductsToBeVerified(id, data).then(\n            response => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_SUCCESS });\n                if (onSuccess) {\n                    onSuccess()\n                }\n            }\n        ).catch(\n            error => {\n                dispatch(hideLoader());\n                dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_FAILURE });\n                showMessage('error', error.toString());\n            }\n        )\n    }\n}","import React, { useEffect, useState } from 'react';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAdminProduct, getAdminProductList } from '../../../appRedux/actions';\nimport { DeleteTwoTone, EditTwoTone, MedicineBoxOutlined } from '@ant-design/icons';\nimport { showConfirm, getRole } from '../../../helpers';\n\nconst ProductList = (props) => {\n\n    const isLoaded = useSelector(state => state.adminProducts.isLoaded);\n    const adminProductList = useSelector(state => state.adminProducts.productList);\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n    const [filteredInfo, setFilteredInfo] = useState({});\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n\n    useEffect(() => {\n        setIsUserAdmin(() => {\n            return (getRole() === 'ADMIN')\n        })\n        dispatch(getAdminProductList(true));\n    }, [])\n\n    useEffect(() => {\n        let rowData = adminProductList.length ? adminProductList.map(\n            value => ({\n                key: value.product_id,\n                name: value.product_name,\n                category: value.category,\n                therapyArea: value.therapy_area,\n            })\n        ) : [];\n        setData(rowData)\n    }, [isLoaded])\n\n    const navigateToAddProduct = () => {\n        const { history } = props;\n        history.push('/admin/add-product')\n    }\n\n    const navigateToEditProduct = (item) => {\n        const { history } = props;\n        history.push('/admin/edit-product/' + item.key)\n    }\n\n    const columns = [{\n        title: 'Product Name',\n        dataIndex: 'name',\n        key: 'name',\n        ellipsis: true,\n        sorter: (a, b) => a.name.localeCompare(b.name),\n        render: name => <span>{name}</span>\n    }, {\n        title: 'Category',\n        dataIndex: 'category',\n        key: 'category',\n        filters: [\n            { text: 'FDF', value: 'FDF' },\n            { text: 'API', value: 'API' },\n        ],\n        filteredValue: filteredInfo.category,\n        onFilter: (value, record) => record.category.includes(value),\n    }, {\n        title: 'Therapy Area',\n        dataIndex: 'therapyArea',\n        key: 'therapyArea',\n    },\n    {\n        title: 'Action',\n        key: 'operation',\n        align: 'center',\n        render: item => (\n            <div style={{ display: 'inline-flex', alignItems: 'center' }}>\n                <Button\n                    type='link'\n                    className='margin-0'\n                    onClick={() => navigateToEditProduct(item)}\n                    id={'edit-product-' + item.key}\n                    disabled={!isUserAdmin}\n                >\n                    <Tooltip title='Edit Product'>\n                        <EditTwoTone twoToneColor='#00AEEF' className='font-20' />\n                    </Tooltip>\n                </Button>\n                <Button\n                    type='link'\n                    className='margin-0'\n                    onClick={() => showDeleteProduct(item)}\n                    id={'delete-product-' + item.key}\n                    disabled={!isUserAdmin}\n                >\n                    <Tooltip title='Deactivate Product'>\n                        <DeleteTwoTone twoToneColor='#00AEEF' className='font-20' />\n                    </Tooltip>\n                </Button>\n            </div>\n        ),\n    }\n    ];\n\n    const showDeleteProduct = (item) => {\n        showConfirm('Do you want to deactivate ' + item.name.toUpperCase() + ' ?', () => {\n            dispatch(deleteAdminProduct(item.key, () => { dispatch(getAdminProductList()) }))\n        })\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <div className='gx-flex-row align-items-center'>\n                        <h1 className='title gx-mb-4'><IntlMessages id='sidebar.productList' /></h1>\n                        <Button id='add-product-btn' type='primary' className='gx-ml-auto' onClick={navigateToAddProduct} disabled={!isUserAdmin}>\n                            <MedicineBoxOutlined /> <IntlMessages id='product.list.addProduct' />\n                        </Button>\n                    </div>\n                </Col>\n                <Col span={24}>\n                    <Card className='mb-0'>\n                        <Table\n                            className='gx-table-responsive mpp-list-table'\n                            columns={columns}\n                            dataSource={data}\n                            bordered\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default ProductList\n","import React from 'react';\nimport moment from 'moment';\nimport { UserOutlined } from '@ant-design/icons';\nimport Avatar from 'antd/lib/avatar/avatar';\n\nconst NotificationItem = ({ notification, isAdmin }) => {\n  const { created_at, message, is_approved, is_partner_message } = notification;\n  return (\n    <li className='gx-media'>\n      <div className='gx-user-thumb gx-mr-3'>\n        {\n          !is_partner_message ?\n            isAdmin ?\n              <Avatar className='gx-size-50' icon={<UserOutlined />} /> :\n              <Avatar className='gx-size-50' ><span className='font-20'>A</span></Avatar>\n            :\n            isAdmin ?\n              <Avatar className='gx-size-50' ><span className='font-20'>P</span></Avatar> :\n              <Avatar className='gx-size-50' icon={<UserOutlined />} />\n        }\n      </div>\n      <div className='gx-media-body'>\n\n        {\n          !is_partner_message ?\n            <p className={is_approved ? 'color-green mb-0 ' : 'color-red mb-0 '}>Report is <span>{is_approved ? 'Approved' : 'Rejected'}</span></p> :\n            <p className={'color-blue mb-0 '}>Report is <span>Submitted</span></p>\n        }\n        <p className='gx-fs-sm'>{message}</p>\n        <div className='gx-flex-row gx-justify-content-between gx-align-items-center'>\n          <span className='gx-meta-date'><small>{moment(created_at).format('Do MMM YYYY, hh:mm A')}</small></span>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default NotificationItem;\n","import React from \"react\";\nimport NotificationItem from \"./NotificationItem\";\nimport CustomScrollbars from 'util/CustomScrollbars'\nimport Auxiliary from \"util/Auxiliary\";\nimport { Empty } from \"antd\";\n\nconst AdminNotifications = ({ data, isAdmin }) => {\n  return (\n    <Auxiliary>\n      <div className=\"gx-popover-header\">\n        <h3 className=\"gx-mb-0\">Messages</h3>\n        <i className=\"gx-icon-btn icon icon-charvlet-down\" />\n      </div>\n      <CustomScrollbars className=\"gx-popover-scroll\">\n        {\n          data && data.length > 0 ?\n            <ul className=\"gx-sub-popover\">\n              {data.map((notification, index) => <NotificationItem isAdmin={isAdmin} key={index}\n                notification={notification} />)}\n            </ul>\n            : <Empty className='mt-20' description='No messages' />\n        }\n      </CustomScrollbars>\n    </Auxiliary>\n  )\n};\n\nexport default AdminNotifications;\n\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Card, Empty } from 'antd';\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\nimport $ from 'jquery'\nimport datepicker from 'jquery-ui/ui/widgets/datepicker';\nimport AdminNotifications from 'components/AdminNotifications';\nimport IntlMessages from 'util/IntlMessages';\nimport { getAdminPdtData, getPdtData, postAdminPdtData, postPdtData, approvePDTReport, submitPDTReport, partnerMarkMessageRead } from '../../../appRedux/actions/ProductDevelopmentTimeline';\nimport { showMessage, statusArray } from '../../../helpers';\nimport moment from 'moment';\nimport { findIndex, isEmpty } from 'lodash'\nimport { getRole } from '../../../helpers';\nimport './pdt.css';\n\nconst confirm = Modal.confirm;\n\nfunction getDatePicker() {\n\n    function Datepicker() { }\n    Datepicker.prototype.init = function (params) {\n        this.eInput = document.createElement('input');\n        this.eInput.value = params.value;\n        this.eInput.classList.add('ag-input');\n        this.eInput.style.height = '100%';\n        $(this.eInput).datepicker({ dateFormat: 'mm/dd/yy' });\n    };\n    Datepicker.prototype.getGui = function () {\n        return this.eInput;\n    };\n    Datepicker.prototype.afterGuiAttached = function () {\n        this.eInput.focus();\n        this.eInput.select();\n    };\n    Datepicker.prototype.getValue = function () {\n        return this.eInput.value;\n    };\n    Datepicker.prototype.destroy = function () { };\n    Datepicker.prototype.isPopup = function () {\n        return false;\n    };\n    return Datepicker;\n}\n\nconst DevelopmentTimeline = (props) => {\n    const [isDataReady, setIsDataReady] = useState(false);\n    const [showReport, setShowReport] = useState(false);\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n    const [isUserStaff, setIsUserStaff] = useState(false);\n    const [reportDetails, setReportDetails] = useState({});\n    const [quarterEditDetails, setQuarterEditDetails] = useState({});\n    const [messageCount, setMessageCount] = useState(0);\n    const [partnerId, setPartnerId] = useState(null);\n    const [gridApi, setGridApi] = useState({});\n    const [rowData, setRowData] = useState(null);\n    const [quarterDropdown, setQuarterDropdown] = useState([])\n    const [quarterDropdownCurrent, setQuarterDropdownCurrent] = useState(\"Loading...\")\n    const [isHistoricQuarter, setIsHistoricQuarter] = useState(false)\n    const [isNotInitial, setIsNotInitial] = useState(false)\n    let [flag, setFlag] = useState(1)\n    const [quarterOrder, setQuarterOrder] = useState([]);\n    const [columnDefs, setColumnDefs] = useState([\n        {\n            headerName: 'Products',\n            field: 'product',\n            editable: false,\n            rowGroup: true,\n            hide: true,\n        }\n    ]);\n    const { pdtList } = useSelector(({ pdt }) => pdt);\n    const [form] = Form.useForm();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setPDT()\n    }, [])\n\n    useEffect(() => {\n        if (isDataReady) {\n            addQuarter();\n        }\n    }, [isDataReady])\n\n    useEffect(() => {\n        if (isNotInitial) {\n            addQuarter();\n        }\n    }, [flag])\n\n    const navigateBack = () => {\n        if (isUserAdmin || isUserStaff) {\n            props.history.push('/admin/partner-list')\n        }\n    }\n\n    const setPDT = (quarter_name = null) => {\n        const { id } = props.match.params;\n        if (id) {\n            setIsUserAdmin(() => {\n                return (getRole() === 'ADMIN')\n            })\n            setIsUserStaff(() => {\n                return (getRole() === 'STAFF')\n            })\n            dispatch(getAdminPdtData(id, (data) => {\n                setValues(data)\n                setPartnerId(id)\n            }, quarter_name))\n        } else {\n            dispatch(getPdtData((data) => {\n                setValues(data)\n            }, quarter_name))\n        }\n    }\n\n    \n    const setValues = (data) => {\n        setRowData(data.rows);\n        setQuarterOrder(data.quarter_order);\n        setMessageCount(data.unread_message_count);\n        setReportDetails(data.pdt_meta);\n        setQuarterEditDetails(data.quarter_editable)\n        setShowReport(!isEmpty(data));\n        setQuarterDropdown(data.quarter_dropdown)\n        setQuarterDropdownCurrent(data.quarter_order[0])\n        setFlag(++flag)\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setIsDataReady(true);\n    }\n\n    const addQuarter = () => {\n        const { report_status } = reportDetails;\n        const quarterNumber = quarterOrder ? quarterOrder.length : 0\n        const column = [\n            ...columnDefs,\n            {\n                headerName: 'Status',\n                field: 'product_status',\n                width: 150,\n                editable: (params) => {\n                    return params.data.editable && (isUserAdmin ? true : isUserStaff ? false : isHistoricQuarter ? false : report_status !== 'Approved')\n                },\n                cellClass: (params) => {\n                    const { data } = params;\n                    if (data) {\n                        return (data.editable) && (isUserAdmin ? true : isUserStaff ? false : isHistoricQuarter ? false : report_status !== 'Approved') ? 'editable-cell' : 'non-editable-cell'\n                    }\n                },\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: statusArray.map(value => value.id) }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!statusArray.map(value => value.id).includes(value) && value)\n                    },\n                },\n            },\n            {\n                headerName: 'Notes',\n                field: 'notes',\n                editable: isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved',\n                cellClass: (params) => {\n                    const { data } = params;\n                    if (data) {\n                        return (isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved') ? 'editable-cell' : 'non-editable-cell'\n                    }\n                },\n                width: 250,\n            }\n        ];\n        for (let i = 0; i < quarterNumber; i++) {\n            const obj = {\n                headerName: quarterOrder[i],\n                children: [\n                    {\n                        headerName: 'Start Date (MM/DD/YYYY)',\n                        field: 'start_date_' + quarterOrder[i],\n                        editable: isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved',\n                        cellEditor: 'datePicker',\n                        cellClass: (params) => {\n                            const { data } = params;\n                            if (data) {\n                                return (isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved') ? 'editable-cell' : 'non-editable-cell'\n                            }\n                        },\n                        cellClassRules: {\n                            'error-cell': (params) => {\n                                const { value } = params\n                                return (!checkDate(value) && value)\n                            },\n                        },\n                        sortable: false,\n                        width: 200\n                    },\n                    {\n                        headerName: 'End Date (MM/DD/YYYY)',\n                        field: 'end_date_' + quarterOrder[i],\n                        sortable: false,\n                        editable: isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved',\n                        cellClass: (params) => {\n                            const { data } = params;\n                            if (data) {\n                                return (isUserAdmin ? true : isUserStaff ? false: isHistoricQuarter ? false : report_status !== 'Approved') ? 'editable-cell' : 'non-editable-cell'\n                            }\n                        },\n                        cellClassRules: {\n                            'error-cell': (params) => {\n                                const { value } = params\n                                return (!checkDate(value) && value)\n                            },\n                        },\n                        cellEditor: 'datePicker',\n                        width: 200\n                    }\n                ],\n            }\n            column.push(obj)\n        }\n        setColumnDefs(column)\n        gridApi.setColumnDefs(column)\n        gridApi.forEachNode((node) => {\n            if (node.key === rowData[0].product) {\n                node.setExpanded(true);\n            }\n        });\n        handleUndefinedValues();\n        setIsNotInitial(true)\n    }\n\n    const handleUndefinedValues = () => {\n        let tempRowData = [...rowData];\n        gridApi.forEachNode((node) => {\n            const { data } = node;\n            if (data) {\n                quarterOrder.forEach((value) => {\n                    if (!data.hasOwnProperty('start_date_' + value)) {\n                        tempRowData[findIndex(tempRowData, { stage_id: data.stage_id })]['start_date_' + value] = null;\n                        tempRowData[findIndex(tempRowData, { stage_id: data.stage_id })]['end_date_' + value] = null;\n                    }\n                })\n            }\n        });\n        setRowData(tempRowData)\n    }\n\n    const checkDataValues = (dataList) => {\n        return !dataList.some(value => checkRow(value))\n    }\n\n    const checkRow = (rowData) => {\n        let statusFlag = false\n        for (let key in rowData) {\n            if (rowData.hasOwnProperty(key)) {\n                if (key === 'product_status' && rowData['editable'] && !statusArray.map(value => value.id).includes(rowData['product_status'])) {\n                    statusFlag = true;\n                    break;\n                }\n            }\n        }\n        let dateFlag = Object.keys(rowData).filter(value => value.split('_')[0] === 'start' || value.split('_')[0] === 'end')\n            .some(value => (!checkDate(rowData[value]) && rowData[value] !== undefined && rowData[value] !== null && rowData[value] !== ''))\n\n        return statusFlag || dateFlag\n    }\n\n    const saveReportBeforeAction = (callback) => {\n        gridApi.stopEditing();\n        gridApi.selectAll();\n        const obj = {};\n        let selectedNodes = gridApi.getSelectedNodes().filter(d => d.data);\n        if (checkDataValues(selectedNodes.map(value => value.data))) {\n            selectedNodes.forEach(node => {\n                const { product_id, stage_id, editable, product_status, notes } = node.data;\n                if (obj[product_id] === undefined) {\n                    obj[product_id] = {}\n                }\n                if (obj[product_id][stage_id] === undefined) {\n                    obj[product_id][stage_id] = {}\n                }\n                if (editable) {\n                    obj[product_id]['product_status'] = product_status;\n                }\n                obj[product_id][stage_id]['notes'] = notes;\n                quarterOrder.forEach((quarter) => {\n                    const start_date_name = 'start_date_' + quarter\n                    const end_date_name = 'end_date_' + quarter\n\n                    const start_date = node.data[start_date_name]\n                    const end_date = node.data[end_date_name]\n\n                    obj[product_id][stage_id][quarter] = {\n                        start_date: start_date === '' ? null : start_date,\n                        end_date: end_date === '' ? null : end_date\n                    }\n                })\n            })\n            if (isUserAdmin) {\n                if (isHistoricQuarter){\n                    dispatch(postAdminPdtData(partnerId, obj, callback(), quarterDropdownCurrent))\n                }else{\n                    dispatch(postAdminPdtData(partnerId, obj, callback()))\n                }\n            } else {\n                dispatch(postPdtData(obj, callback()))\n            }\n            gridApi.deselectAll()\n        } else {\n            Modal.error({\n                title: 'Invalid data!',\n                content: 'Please input valid entries!',\n            });\n            gridApi.deselectAll()\n        }\n    }\n\n    const saveData = () => {\n        saveReportBeforeAction(\n            () => {\n                showMessage('success', 'Data recorded successfully!')\n            }\n        )\n    }\n\n    const showSubmitConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    content: showCommentsForm(),\n                    okText: 'Submit',\n                    cancelText: 'Cancel',\n                    title: 'Do you want to submit the report?',\n                    className: 'btn-confirm-green',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                dispatch(submitPDTReport(\n                                    { message: msg },\n                                    () => {\n                                        showMessage('success', 'Report has been submitted to the admin!');\n                                        setPDT();\n                                        form.resetFields(['commentData'])\n                                    }\n                                ))\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const approver = (msg, isApproved) => {\n        let data = {\n            'partner_id': partnerId,\n            'message': msg,\n            'is_approved': isApproved\n        }\n        dispatch(approvePDTReport(data, () => {\n            if (isApproved) {\n                showMessage('success', 'Report Approved!');\n            } else {\n                showMessage('success', 'Report Rejected!');\n            }\n            form.resetFields(['commentData'])\n            setPDT()\n        }))\n    }\n\n    const showCommentsForm = () => {\n        return (\n            <Form\n                form={form}\n                layout=\"vertical\"\n                className='mt-20'\n            >\n                <div className='mb-10'>\n                    <span>\n                        {\n                            isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'\n                        }\n                    </span>\n                </div>\n                <Form.Item\n                    name='commentData'\n                    className='mb-0'\n                    rules={[\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\n                    ]}\n                >\n                    <Input.TextArea placeholder=\"Enter comments here\" />\n                </Form.Item>\n            </Form>\n        )\n    }\n\n    const showRejectConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    title: 'Do you want to reject the report?',\n                    className: 'btn-confirm-red',\n                    content: showCommentsForm(),\n                    okText: 'Reject',\n                    cancelText: 'Cancel',\n                    icon: (<CloseCircleOutlined />),\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                approver(msg, false);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const showApproveConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    title: 'Do you want to approve the report?',\n                    className: 'btn-confirm-green',\n                    content: showCommentsForm(),\n                    icon: (<CheckCircleOutlined />),\n                    okText: 'Approve',\n                    cancelText: 'Cancel',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                approver(msg, true);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const displayHeader = () => {\n        if (showReport) {\n            if (reportDetails) {\n                const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\n                return (\n                    <div className='gx-mb-4'>\n                        <h1 className='title '>{isUserAdmin || isUserStaff ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Product Development Timeline {isUserAdmin || isUserStaff ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\n                            <span className='text-capitalize'>({quarter_name})</span>\n                        </h1>\n                        <h4 className={isUserAdmin || isUserStaff ? 'ml-30' : ''}>Report Status:&nbsp;\n                            <span className='text-capitalize'> {report_status}</span>\n                            <span>\n                                {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\n                            </span>\n                        </h4>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className='gx-mb-4'>\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null}Product Development Timeline {isUserAdmin && reportDetails ? <span>for <span className='text-capitalize'>{reportDetails.partner_name}</span></span> : null}\n                    </h1>\n                </div>\n            )\n        }\n    }\n\n    const displayCTA = () => {\n        if (showReport) {\n            const { report_status } = reportDetails\n            if (isUserAdmin || isUserStaff) {\n                return (\n                    <>\n                    <div className='gx-flex-row'>\n                        <Button\n                            type='primary'\n                            onClick={() => { saveData(false) }}\n                            id='pdt-save'\n                            disabled={isUserStaff}\n                        >\n                            Save\n                        </Button>\n                        <Button\n                            className='gx-btn-success'\n                            onClick={() => showApproveConfirm()}\n                            id='pdt-approve'\n                            disabled={isHistoricQuarter || isUserStaff}\n                        >\n                            Approve\n                        </Button>\n                        <Button\n                            className='gx-btn-danger'\n                            onClick={() => showRejectConfirm()}\n                            id='pdt-reject'\n                            disabled={isHistoricQuarter || isUserStaff}\n                        >\n                            Reject\n                        </Button>\n                        <Tooltip title={<IntlMessages id='report.download' />}>\n                            <Button onClick={() => downloadExcel()} id='pdt-download-excel' >\n                                <DownloadOutlined />\n                            </Button>\n                        </Tooltip>\n                        <Badge count={messageCount}>\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={pdtList && pdtList.messages ? pdtList.messages : []} />} trigger='click'>\n                                <Button\n                                    className='mr-0'\n                                    id='pdt-msg-box'\n                                    onClick={() => dispatch(partnerMarkMessageRead(\n                                        isUserAdmin ? 'admin' : 'partner',\n                                        () => setMessageCount(0)\n                                    ))}\n                                >\n                                    <MailOutlined />\n                                </Button>\n                            </Popover>\n                        </Badge>\n                    </div>\n                    <div className=\"quarter-dropdown-container-admin-pdt\">\n                        <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                            {\n                                quarterDropdown.map((quarter) => (\n                                    <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                ))\n                            }\n                        </select>\n                    </div>\n                    </>\n                )\n            } else {\n                return (\n                    <>\n                        <div className='gx-flex-row'>\n                            <Button\n                                type='primary'\n                                onClick={() => { saveData(false) }}\n                                disabled={report_status === 'Approved' || isHistoricQuarter}\n                                id='pdt-save'\n                            >\n                                Save\n                            </Button>\n                            <Button\n                                onClick={() => showSubmitConfirm()}\n                                className='gx-btn-success'\n                                disabled={report_status === 'Approved' || isHistoricQuarter}\n                                id='pdt-submit'\n                            >\n                                Submit Report\n                            </Button>\n                            <Badge count={messageCount}>\n                                <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                    content={<AdminNotifications data={pdtList && pdtList.messages ? pdtList.messages : []} />} trigger='click'>\n                                    <Button\n                                        id='pdt-msg-box'\n                                        className='mr-0'\n                                        onClick={() => dispatch(partnerMarkMessageRead(\n                                            isUserAdmin ? 'admin' : 'partner',\n                                            () => setMessageCount(0)\n                                        ))}\n                                    >\n                                        <MailOutlined />\n                                    </Button>\n                                </Popover>\n                            </Badge>\n                            <Tooltip title={<IntlMessages id='report.download' />}>\n                                <Button id='pdt-download-excel' className='mr-0' onClick={() => downloadExcel()} >\n                                    <DownloadOutlined />\n                                </Button>\n                            </Tooltip>\n                            <div className=\"quarter-dropdown-container-user-pdt\">\n                                <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                    {\n                                        quarterDropdown.map((quarter) => (\n                                            <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                        ))\n                                    }\n                                </select>\n                            </div>\n                        </div>\n                    </>\n                )\n            }\n        } else {\n            return null\n        }\n    }\n\n    const downloadExcel = () => {\n        gridApi.selectAll();\n        gridApi.exportDataAsExcel({\n            sheetName: 'pdt',\n            fileName: 'pdt'\n        })\n        gridApi.deselectAll();\n    }\n\n    const checkDate = (value) => {\n        return moment(value, 'M/D/YYYY').format('M/D/YYYY') === value || moment(value, 'MM/DD/YYYY').format('MM/DD/YYYY') === value\n    }\n\n    const handleCellValueChange = (params) => {\n        const { colDef, node, newValue, oldValue } = params;\n        let rowNode = gridApi.getRowNode(node.id);\n        let fieldNameList = colDef.field.split('_');\n        if (newValue !== oldValue) {\n            if (fieldNameList[0] === 'start' || fieldNameList[0] === 'end') {\n                if (newValue === ' ') {\n                    rowNode.setDataValue(colDef.field, null)\n                }\n            }\n        }\n    }\n\n    const setReportHeight = () => {\n        return window.innerHeight - 120\n    }\n\n    const changeQuarter = (e) => {\n        setColumnDefs([\n            {\n                headerName: 'Products',\n                field: 'product',\n                editable: false,\n                rowGroup: true,\n                hide: true,\n            }\n        ])\n        if (e.target.value !== quarterDropdown[0]){\n            setPDT(e.target.value)\n            setIsHistoricQuarter(true)\n        }else{\n            setPDT()\n            setIsHistoricQuarter(false)\n        }\n    }\n\n    return (\n        <div>\n            <div className='gx-flex-row gx-justify-content-between'>\n                {displayHeader()}\n                {displayCTA()}\n            </div>\n            {\n                showReport ?\n                    <div className='ag-theme-balham ag-scroll-bar-fix' style={{ height: setReportHeight(), paddingBottom: 20 }}>\n                        <AgGridReact\n                            onGridReady={onGridReady}\n                            columnDefs={columnDefs}\n                            rowData={rowData}\n                            defaultColGroupDef={{ marryChildren: true }}\n                            defaultColDef={{\n                                filter: true,\n                                sortable: true,\n                                width: 300,\n                                resizable: true,\n                            }}\n                            autoGroupColumnDef={{\n                                headerName: 'Products',\n                                field: 'stage',\n                                editable: false,\n                                minWidth: 250,\n                            }}\n                            suppressRowTransform={true}\n                            enableRangeSelection={true}\n                            enableCellChangeFlash={true}\n                            onCellValueChanged={handleCellValueChange}\n                            animateRows={true}\n                            components={{ datePicker: getDatePicker() }}\n                        />\n                    </div>\n                    :\n                    <Card>\n                        <Empty\n                            description={\n                                (<p className='empty-msg'>\n                                    <span>No Data Available</span><br />\n                                    <span>Please contact Admin for more information!</span>\n                                </p>)\n                            }\n                        />\n                    </Card>\n            }\n\n        </div>\n    )\n}\n\nexport default DevelopmentTimeline\n\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport IntlMessages from 'util/IntlMessages';\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Card, Empty } from 'antd';\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\nimport AdminNotifications from 'components/AdminNotifications';\nimport { showMessage } from '../../../helpers';\nimport { approveFilingPlansReport, getAdminFilingPlansData, getFilingPlansData, partnerMarkFilingPlansMessageRead, postAdminFilingPlansData, postFilingPlansData, submitFilingPlansReport } from '../../../appRedux/actions/FilingPlans';\nimport moment from 'moment';\nimport { findIndex, isEmpty } from 'lodash';\nimport './filing-plans.css';\nimport { getRole } from '../../../helpers';\n\nconst confirm = Modal.confirm;\n\nconst FilingPlans = (props) => {\n    const [isDataReady, setIsDataReady] = useState(false);\n    const [showReport, setShowReport] = useState(false);\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n    const [isUserStaff, setIsUserStaff] = useState(false);\n    const [messageCount, setMessageCount] = useState(0);\n    const [partnerId, setPartnerId] = useState(null);\n    const [gridApi, setGridApi] = useState({});\n    const [rowData, setRowData] = useState(null);\n    const [productList, setProductList] = useState([]);\n    const [reportDetails, setReportDetails] = useState({});\n    const [apiStatusArray, setApiStatusArray] = useState([]);\n    const [fdfStatusArray, setFdfStatusArray] = useState([]);\n    const [columnDefs, setColumnDefs] = useState([\n        {\n            headerName: 'Sr.No',\n            valueGetter: 'node.rowIndex + 1',\n            width: 100\n        },\n        {\n            headerName: 'Country',\n            field: 'country',\n            editable: false\n        }\n    ]);\n    const plansList = useSelector(({ filingPlans }) => filingPlans.plansList);\n    const [form] = Form.useForm();\n    const dispatch = useDispatch();\n    const [quarterDropdown, setQuarterDropdown] = useState([])\n    const [quarterDropdownCurrent, setQuarterDropdownCurrent] = useState(\"Loading...\")\n    const [isHistoricQuarter, setIsHistoricQuarter] = useState(false)\n    const [isNotInitial, setIsNotInitial] = useState(false)\n    let [flag, setFlag] = useState(1)\n\n    useEffect(() => {\n        setFilingPlans()\n        return () => {\n            setIsDataReady(false)\n        }\n    }, [])\n\n    useEffect(() => {\n        if (isDataReady) {\n            addProduct();\n        }\n    }, [isDataReady])\n    useEffect(() => {\n        if (isNotInitial) {\n            addProduct();\n        }\n    }, [flag])\n\n    const navigateBack = () => {\n        if (isUserAdmin || isUserStaff) {\n            props.history.push('/admin/partner-list')\n        }\n    }\n\n    const setFilingPlans = (quarter_name = null) => {\n        const { id } = props.match.params;\n        if (id) {\n            setIsUserAdmin(() => {\n                return (getRole() === 'ADMIN')\n            })\n            setIsUserStaff(() => {\n                return (getRole() === 'STAFF')\n            })\n            dispatch(getAdminFilingPlansData(id, (data) => {\n                setValues(data)\n                setPartnerId(id)\n            },quarter_name))\n        } else {\n            dispatch(getFilingPlansData((data) => {\n                setValues(data)\n            },quarter_name))\n        }\n    }\n\n    const setValues = (data) => {\n        let rowData = data.rows ? data.rows.map(value => {\n            let rowValue = { ...value };\n            data.product_details.forEach(\n                value => {\n                    if (!rowValue.hasOwnProperty(value.product_name) || !rowValue[value.product_name]) {\n                        rowValue[value.product_name] = '0'\n                    }\n                }\n            )\n            return rowValue\n        }) : [];\n        setRowData(rowData);\n        setProductList(data.product_details)\n        setMessageCount(data.unread_message_count)\n        setReportDetails(data.filing_meta);\n        setApiStatusArray(data.status_dropdown['API'])\n        setFdfStatusArray(data.status_dropdown['FDF'])\n        setShowReport(!isEmpty(data))\n        setQuarterDropdown(data.quarter_dropdown)\n        setQuarterDropdownCurrent(data.filing_meta.quarter_name)\n        setFlag(++flag)\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setIsDataReady(true)\n    }\n\n    const addProduct = () => {\n        const { report_status } = reportDetails;\n        let column;\n        if(!isNotInitial){\n            column = [...columnDefs];\n        }\n        else{\n            column = columnDefs.slice(0,2);\n        }\n        \n        \n        productList.forEach((value) => {\n            const obj = {\n                headerName: value.product_name,\n                field: value.product_name,\n                editable: isUserAdmin ? true : isUserStaff ? false : isHistoricQuarter ? false : report_status !== 'Approved',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: value.product_type === 'API' ? apiStatusArray : fdfStatusArray }\n                    }\n                },\n                cellClass: (params) => {\n                    const { data } = params;\n                    if (data) {\n                        return ((isUserAdmin ? true : isUserStaff ? false : isHistoricQuarter ? false : report_status !== 'Approved') ? 'editable-cell' : 'non-editable-cell');\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        if (value.product_type === 'API') {\n                            return !apiStatusArray.includes(params.value)\n                        } else {\n                            return !fdfStatusArray.includes(params.value)\n                        }\n                    },\n                },\n                width: 200\n            }\n            column.push(obj)\n        })\n        setColumnDefs(column)\n        gridApi.setColumnDefs(column)\n        setIsNotInitial(true)\n    }\n\n    const checkDataValues = (dataList) => {\n        return !dataList.some(value => checkRow(value))\n    }\n\n    const checkRow = (rowData) => {\n        let apiFlag = Object.keys(rowData).filter(value => productList\n            .map(d => d.product_name).includes(value) && productList[findIndex(productList, { 'product_name': value })].product_type === 'API')\n            .some(val => !apiStatusArray.includes(rowData[val]))\n\n        let fdfFlag = Object.keys(rowData).filter(value => productList\n            .map(d => d.product_name).includes(value) && productList[findIndex(productList, { 'product_name': value })].product_type === 'FDF')\n            .some(val => !fdfStatusArray.includes(rowData[val]))\n\n        return apiFlag || fdfFlag\n    }\n\n    const saveReportBeforeAction = (callback) => {\n        gridApi.stopEditing();\n        gridApi.selectAll();\n        const obj = {}\n        let selectedNodes = gridApi.getSelectedNodes().filter(d => d.data);\n        if (checkDataValues(selectedNodes.map(value => value.data))) {\n            selectedNodes.forEach(node => {\n                const { country_id } = node.data;\n                if (obj[country_id] === undefined) {\n                    obj[country_id] = {}\n                }\n                productList.forEach((value) => {\n                    obj[country_id][value.product_id] = node.data[value.product_name]\n                })\n            })\n            if (isUserAdmin) {\n                if (isHistoricQuarter){\n                    dispatch(postAdminFilingPlansData(partnerId, obj, callback(), quarterDropdownCurrent))\n                }else{\n                    dispatch(postAdminFilingPlansData(partnerId, obj, callback()))\n                }\n            } else {\n                dispatch(postFilingPlansData(obj, callback()))\n            }\n            gridApi.deselectAll()\n        } else {\n            Modal.error({\n                title: 'Invalid data!',\n                content: 'Please input valid entries!',\n            });\n            gridApi.deselectAll()\n        }\n    }\n\n    const saveData = () => {\n        saveReportBeforeAction(\n            () => {\n                showMessage('success', 'Data recorded successfully!')\n            }\n        )\n    }\n\n    const showSubmitConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    content: showCommentsForm(),\n                    okText: 'Submit',\n                    cancelText: 'Cancel',\n                    title: 'Do you want to submit the report?',\n                    className: 'btn-confirm-green',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                dispatch(submitFilingPlansReport(\n                                    { message: msg },\n                                    () => {\n                                        showMessage('success', 'Report has been submitted to the admin!');\n                                        setFilingPlans();\n                                        form.resetFields(['commentData'])\n                                    }\n                                ))\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const approver = (msg, isApproved) => {\n        let data = {\n            'partner_id': partnerId,\n            'message': msg,\n            'is_approved': isApproved\n        }\n        dispatch(approveFilingPlansReport(data, () => {\n            if (isApproved) {\n                showMessage('success', 'Report Approved!');\n            } else {\n                showMessage('success', 'Report Rejected!');\n            }\n            form.resetFields(['commentData'])\n            setFilingPlans()\n        }))\n    }\n\n    const showCommentsForm = () => {\n        return (\n            <Form\n                form={form}\n                layout='vertical'\n                className='mt-20'\n            >\n                <div className='mb-10'>\n                    <span>\n                        {\n                            isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'\n                        }\n                    </span>\n                </div>\n                <Form.Item\n                    name='commentData'\n                    className='mb-0'\n                    rules={[\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\n                    ]}\n                >\n                    <Input.TextArea placeholder='Enter comments here' />\n                </Form.Item>\n            </Form>\n        )\n    }\n\n    const showRejectConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    title: 'Do you want to reject the report?',\n                    className: 'btn-confirm-red',\n                    content: showCommentsForm(),\n                    okText: 'Reject',\n                    cancelText: 'Cancel',\n                    icon: (<CloseCircleOutlined />),\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                approver(msg, false);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const showApproveConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    title: 'Do you want to approve the report?',\n                    className: 'btn-confirm-green',\n                    content: showCommentsForm(),\n                    icon: (<CheckCircleOutlined />),\n                    okText: 'Approve',\n                    cancelText: 'Cancel',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData ? values.commentData : '';\n                                approver(msg, true);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const downloadExcel = () => {\n        gridApi.selectAll();\n        gridApi.exportDataAsExcel({\n            sheetName: 'filing-plans',\n            fileName: 'filing-plans'\n        })\n        gridApi.deselectAll();\n    }\n\n    const displayHeader = () => {\n        if (showReport) {\n            if (reportDetails) {\n                const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\n                return (\n                    <div className='gx-mb-4'>\n                        <h1 className='title '>{isUserAdmin || isUserStaff ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Filing Plans {isUserAdmin || isUserStaff ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\n                            <span className='text-capitalize'>({quarter_name})</span>\n                        </h1>\n                        <h4 className={isUserAdmin || isUserStaff ? 'ml-30' : ''}>Report Status:&nbsp;\n                            <span className='text-capitalize'> {report_status}</span>\n                            <span>\n                                {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\n                            </span>\n                        </h4>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className='gx-mb-4'>\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null} Filing Plans{isUserAdmin && reportDetails ? <span>for <span className='text-capitalize'>{reportDetails.partner_name}</span></span> : null}\n                    </h1>\n                </div>\n            )\n        }\n\n    }\n\n    const displayCTA = () => {\n        if (showReport) {\n            const { report_status } = reportDetails\n            if (isUserAdmin || isUserStaff) {\n                return (\n                    <div className='gx-flex-row'>\n                        <Button\n                            type='primary'\n                            onClick={() => { saveData(false) }}\n                            id='filing-save'\n                            disabled={isUserStaff}\n                        >\n                            Save\n                        </Button>\n                        <Button\n                            className='gx-btn-success'\n                            onClick={() => showApproveConfirm()}\n                            id='filing-approve'\n                            disabled={isHistoricQuarter || isUserStaff}\n                        >\n                            Approve\n                        </Button>\n                        <Button\n                            className='gx-btn-danger'\n                            onClick={() => showRejectConfirm()}\n                            id='filing-reject'\n                            disabled={isHistoricQuarter || isUserStaff}\n                        >\n                            Reject\n                        </Button>\n                        <Tooltip title={<IntlMessages id='report.download' />}>\n                            <Button onClick={() => downloadExcel()} id='filing-download-excel'>\n                                <DownloadOutlined />\n                            </Button>\n                        </Tooltip>\n                        <Badge count={messageCount}>\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={plansList && plansList.messages ? plansList.messages : []} />} trigger='click'>\n                                <Button\n                                id='filing-msg-box'\n                                    className='mr-0'\n                                    onClick={() => dispatch(partnerMarkFilingPlansMessageRead(\n                                        isUserAdmin ? 'admin' : 'partner',\n                                        () => setMessageCount(0)\n                                    ))}\n                                >\n                                    <MailOutlined />\n                                </Button>\n                            </Popover>\n                        </Badge>\n                        <div className=\"quarter-dropdown-container-admin-filing-plans\">\n                        <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                            {\n                                quarterDropdown.map((quarter) => (\n                                    <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                ))\n                            }\n                        </select>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className='gx-flex-row'>\n                        <Button\n                            type='primary'\n                            onClick={() => { saveData(false) }}\n                            disabled={report_status === 'Approved' || isHistoricQuarter}\n                            id='filing-save'\n                        >\n                            Save\n                        </Button>\n                        <Button\n                            onClick={() => showSubmitConfirm()}\n                            className='gx-btn-success'\n                            disabled={report_status === 'Approved' || isHistoricQuarter}\n                            id='filing-submit'\n                        >\n                            Submit Report\n                        </Button>\n                        <Badge count={messageCount}>\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={plansList && plansList.messages ? plansList.messages : []} />} trigger='click'>\n                                <Button\n                                id='filing-msg-box'\n                                    className='mr-0'\n                                    onClick={() => dispatch(partnerMarkFilingPlansMessageRead(\n                                        isUserAdmin ? 'admin' : 'partner',\n                                        () => setMessageCount(0)\n                                    ))}\n                                >\n                                    <MailOutlined />\n                                </Button>\n                            </Popover>\n                        </Badge>\n                        <Tooltip title={<IntlMessages id='report.download' />}>\n                            <Button className='mr-0' onClick={() => downloadExcel()} id='filing-download-excel'>\n                                <DownloadOutlined />\n                            </Button>\n                        </Tooltip>\n                        <div className=\"quarter-dropdown-container-user-filing-plans\">\n                                <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                    {\n                                        quarterDropdown.map((quarter) => (\n                                            <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                        ))\n                                    }\n                                </select>\n                        </div>\n                    </div>\n                )\n            }\n        } else {\n            return null\n        }\n\n    }\n\n    const handleCellValueChange = (params) => {\n        const { colDef, node, newValue, oldValue } = params;\n        let rowNode = gridApi.getRowNode(node.id);\n        if (newValue !== oldValue && newValue === '') {\n            rowNode.setDataValue(colDef.field, '0');\n        }\n    }\n\n    const setReportHeight = () => {\n        return window.innerHeight - 120\n    }\n\n    const changeQuarter = (e) => {\n        setColumnDefs(columnDefs.slice(0,2))\n        if (e.target.value !== quarterDropdown[0]){\n            setFilingPlans(e.target.value)\n            setIsHistoricQuarter(true)\n        }else{\n            setFilingPlans()\n            setIsHistoricQuarter(false)\n        }\n    }\n\n\n    return (\n        <div>\n            <div className='gx-flex-row gx-justify-content-between'>\n                {displayHeader()}\n                {displayCTA()}\n            </div>\n            {\n                showReport ?\n                    <div className='ag-theme-balham ag-scroll-bar-fix' style={{ height: setReportHeight(), paddingBottom: 20 }}>\n                        <AgGridReact\n                            onGridReady={onGridReady}\n                            columnDefs={columnDefs}\n                            rowData={rowData}\n\n                            defaultColGroupDef={{ marryChildren: true }}\n                            defaultColDef={{\n                                filter: true,\n                                sortable: true,\n                                width: 300,\n                                resizable: true,\n                            }}\n                            enableRangeSelection={true}\n                            enableCellChangeFlash={true}\n                            onCellValueChanged={handleCellValueChange}\n                            animateRows={true}\n                        />\n                    </div>\n                    :\n                    <Card>\n                        <Empty\n                            description={\n                                (<p className='empty-msg'>\n                                    <span>No Data Available</span><br />\n                                    <span>Please contact Admin for more information!</span>\n                                </p>)\n                            }\n                        />\n                    </Card>\n            }\n\n        </div>\n    )\n}\n\nexport default FilingPlans\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'ag-grid-enterprise';\nimport { Select } from 'antd';\n\nconst { Option } = Select\n\n\n\nexport const SearchSelect = forwardRef((props, ref) => {\n\n    const [optionValue, setOptionValue] = useState(props.value);\n    const [editing, setEditing] = useState(true);\n    const [productList, setProductList] = useState([])\n    const [productNameList, setProductNameList] = useState([])\n    const refContainer = useRef(null);\n    const productSelect = useRef(null);\n\n    useEffect(() => {\n        focus();\n        setProductList(props.colDef.selectValues)\n        if (props.value) {\n            let tempSelectValues = [...props.colDef.selectValues]\n            tempSelectValues.push(props.value)\n            setProductNameList(tempSelectValues)\n        } else {\n            setProductNameList(props.colDef.selectValues);\n        }\n    }, []);\n\n    useImperativeHandle(ref, () => {\n        return {\n            getValue() {\n                return optionValue;\n            },\n            isPopup() {\n                return true;\n            }\n        }\n    });\n\n    useEffect(() => {\n        if (!editing) {\n            props.api.stopEditing()\n        }\n    }, [editing]);\n\n    const focus = () => {\n        window.setTimeout(() => {\n            let container = ReactDOM.findDOMNode(refContainer.current);\n            if (container) {\n                container.focus();\n                productSelect.current.focus();\n            }\n        })\n    };\n\n    const setValues = () => {\n        return productNameList.map(val => <Option key={val} >{val}</Option>)\n    }\n\n\n    const handleSelect = (val) => {\n        setOptionValue(val);\n        setEditing(false)\n    }\n\n    const handleSearch = (value) => {\n        let tempProductList = [...productList]\n        if (!tempProductList.includes(value)) {\n            tempProductList.push(value)\n        }\n        setProductNameList(tempProductList)\n    }\n\n    return (\n        <div ref={refContainer}\n            tabIndex={1} // important - without this the key presses wont be caught\n        >\n            <Select\n                showSearch\n                showArrow={true}\n                allowClear\n                placeholder='Enter product name'\n                style={{ width: 200 }}\n                onSelect={handleSelect}\n                onSearch={handleSearch}\n                defaultValue={props.value}\n                ref={productSelect}\n            >\n                {setValues()}\n            </Select>\n        </div>\n    );\n});\n","export const initRowData = (data) => {\n    let rowValueList = [...data]\n    for (let i = 0; i < 500; i++) {\n        rowValueList.push({})\n    }\n    return rowValueList\n}\n\nexport const suppressEnter = (params) => {\n    var KEY_ENTER = 13;\n    var event = params.event;\n    var key = event.which;\n    var suppress = key === KEY_ENTER;\n    return suppress;\n}\n\nexport const getReportHeight = () => {\n    return window.innerHeight - 230\n}","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Select, Form, Radio, Card, Modal, Button } from 'antd';\nimport { pick } from 'lodash'\nimport { postAdminProductsToBeVerified } from '../../../appRedux/actions/SalesReport';\nimport { getAdminProductDetails } from '../../../appRedux/actions/AdminProducts';\n\n\nconst ProductVerificationModal = (props) => {\n    const { visible, statusArray, hideVerificationModal, partnerId, setSalesReport, quarter_name } = props;\n\n    const dispatch = useDispatch();\n    const [verificationForm] = Form.useForm();\n    const { productVerificationList } = useSelector(({ salesReport }) => salesReport);\n    const [toBeVerifiedProductList, setToBeVerifiedProductList] = useState([])\n    const [productList, setProductList] = useState([])\n    const [productNameList, setProductNameList] = useState([])\n\n    useEffect(() => {\n        setToBeVerifiedProductList(productVerificationList.pending_products)\n        setProductList(productVerificationList.existing_products)\n        setProductNameList(productVerificationList.existing_products.map(value => value.product_name))\n    }, [])\n\n    const handleVerification = () => {\n        verificationForm.validateFields().then(\n            values => {\n                dispatch(postAdminProductsToBeVerified(\n                    partnerId,\n                    values.active_products.map(value => pick(value, ['product_verification_id', 'product_name', 'is_approved', 'category', 'therapy_area', 'product_status'])),\n                    () => {\n                        hideVerificationModal()\n                        setSalesReport(quarter_name)\n                    }\n                ))\n            }\n        )\n    }\n\n    const handleFormValueChange = (newValue, newValueList) => {\n        setToBeVerifiedProductList(newValueList.active_products)\n    }\n\n    const handleProductSearch = (value) => {\n        let tempProductList = productList.map(value => value.product_name)\n        if (!tempProductList.includes(value)) {\n            tempProductList.push(value)\n        }\n        setProductNameList(tempProductList)\n    }\n\n    const handleProductSelect = (value, key) => {\n        if (productList.map(val => val.product_name).includes(value)) {\n            dispatch(getAdminProductDetails(\n                {\n                    'product_name': value,\n                    'partner_id': partnerId\n                },\n                (data) => {\n                    if (data) {\n                        const { category, therapy_area, product_status } = data;\n                        let tempToBeVerifiedProductList = [...toBeVerifiedProductList];\n                        tempToBeVerifiedProductList[key].category = category;\n                        tempToBeVerifiedProductList[key].therapy_area = therapy_area;\n                        tempToBeVerifiedProductList[key].product_status = product_status;\n                        tempToBeVerifiedProductList[key].product_name = value;\n                        tempToBeVerifiedProductList[key].does_product_exist = true;\n                        verificationForm.setFieldsValue({\n                            active_products: tempToBeVerifiedProductList\n                        })\n                        setToBeVerifiedProductList(tempToBeVerifiedProductList)\n                    }\n                }\n            ))\n        } else {\n            let tempToBeVerifiedProductList = [...toBeVerifiedProductList];\n            tempToBeVerifiedProductList[key].product_name = value;\n            tempToBeVerifiedProductList[key].does_product_exist = false;\n            verificationForm.setFieldsValue({\n                active_products: tempToBeVerifiedProductList\n            })\n            setToBeVerifiedProductList(tempToBeVerifiedProductList)\n        }\n    }\n\n    return (\n        <Modal\n            title='Product Verification'\n            visible={visible}\n            okText='Submit'\n            onCancel={() => {\n                let errMsg = () => {\n                    return (\n                        <div>\n                            <p>Please note that you still have Unverified Products in the list</p>\n                        </div>\n                    )\n                }\n                Modal.confirm({\n                    title: 'Unverified Products',\n                    content: errMsg(),\n                    onOk: () => { hideVerificationModal() }\n                });\n            }}\n            width={900}\n            footer={[\n                <Button id='product-verification-submit' key='submit' type='primary' onClick={() => { handleVerification() }}>Submit</Button>,\n                <Button id='product-verification-cancel' key='cancel' onClick={() => { hideVerificationModal() }}>Cancel</Button>\n            ]}\n        >\n            <Form\n                form={verificationForm}\n                layout='vertical'\n                initialValues={{\n                    active_products: productVerificationList ?\n                        productVerificationList.pending_products\n                        : []\n                }}\n                onValuesChange={handleFormValueChange}\n            >\n                <Form.List\n                    name='active_products'\n                >\n                    {(fields, { add, remove }) => {\n                        return (\n                            <div>\n                                {fields.map((field, index) => (\n                                    <Form.Item\n                                        key={field.key}\n                                        validateTrigger={['onChange', 'onBlur']}\n                                        rules={[\n                                            {\n                                                required: false,\n                                                message: 'Please enter details',\n                                            },\n                                        ]}\n                                    >\n                                        <div className='flex-d-row'>\n                                            <Col span={24}>\n                                                <Card className='mb-0'>\n                                                    <Row className='gx-flex-row'>\n                                                        <Col span={16}>\n                                                            <Form.Item\n                                                                {...field}\n                                                                className='mb-0'\n                                                                label='Product name'\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                name={[field.name, 'product_name']}\n                                                                fieldKey={[field.fieldKey, 'product_name']}\n                                                                rules={[\n                                                                    {\n                                                                        required: true,\n                                                                        message: 'Please Enter Product name',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <Select\n                                                                    placeholder='Enter product name'\n                                                                    id={'product-verification-name-' + field.fieldKey}\n                                                                    showSearch\n                                                                    showArrow={true}\n                                                                    onSearch={handleProductSearch}\n                                                                    onSelect={(value) => handleProductSelect(value, field.key)}\n                                                                >\n                                                                    {\n                                                                        productNameList.map(value => <Select.Option key={value}>{value}</Select.Option>)\n                                                                    }\n                                                                </Select>\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={8}>\n                                                            <Form.Item\n                                                                {...field}\n                                                                className='mb-0'\n                                                                label='Approve Status'\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                name={[field.name, 'is_approved']}\n                                                                fieldKey={[field.fieldKey, 'is_approved']}\n                                                                rules={[\n                                                                    {\n                                                                        required: true,\n                                                                        message: 'Please enter status.',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <Radio.Group buttonStyle='solid' >\n                                                                    <Radio.Button id={'product-verification-confirm-' + field.fieldKey} value={true}>Confirm</Radio.Button>\n                                                                    <Radio.Button id={'product-verification-reject-' + field.fieldKey} value={false}>Reject</Radio.Button>\n                                                                </Radio.Group>\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={8}>\n                                                            <Form.Item\n                                                                {...field}\n                                                                className='mb-0 mt-20'\n                                                                label='Category'\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                name={[field.name, 'category']}\n                                                                fieldKey={[field.fieldKey, 'category']}\n                                                                rules={[\n                                                                    {\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)),\n                                                                        message: 'Please select category',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <Radio.Group\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)}\n                                                                >\n                                                                    <Radio id={'product-verification-fdf-' + field.fieldKey} value='FDF'>FDF</Radio>\n                                                                    <Radio id={'product-verification-api-' + field.fieldKey} value='API'>API</Radio>\n                                                                </Radio.Group>\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={8}>\n                                                            <Form.Item\n                                                                {...field}\n                                                                className='mb-0 mt-20'\n                                                                label='Therapy Area'\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                name={[field.name, 'therapy_area']}\n                                                                fieldKey={[field.fieldKey, 'therapy_area']}\n                                                                rules={[\n                                                                    {\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)),\n                                                                        message: 'Please select therapy area.',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <Select\n                                                                    id={'product-verification-region-' + field.fieldKey}\n                                                                    placeholder='Select therapy area'\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)}\n                                                                >\n                                                                    <Select.Option id={'product-verification-hiv-' + field.fieldKey} value='HIV'>HIV</Select.Option >\n                                                                    <Select.Option id={'product-verification-hcv-' + field.fieldKey} value='HCV'>HCV</Select.Option >\n                                                                    <Select.Option id={'product-verification-hbv-' + field.fieldKey} value='HBV'>HBV</Select.Option >\n                                                                </Select>\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={8}>\n                                                            <Form.Item\n                                                                {...field}\n                                                                className='mb-0 mt-20'\n                                                                label='Product Status'\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                name={[field.name, 'product_status']}\n                                                                fieldKey={[field.fieldKey, 'product_status']}\n                                                                rules={[\n                                                                    {\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false)),\n                                                                        message: 'Please enter status.',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <Select\n                                                                    placeholder='Please select product status'\n                                                                    className='product-select'\n                                                                    id={'product-verification-product-status-' + field.fieldKey}\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false)}\n                                                                >\n                                                                    {\n                                                                        statusArray && statusArray.length ? statusArray.map(\n                                                                            value => (<Select.Option id={value.id} key={statusArray.indexOf(value)} value={value.id}>{value.name}</Select.Option>)\n                                                                        ) : []\n                                                                    }\n                                                                </Select>\n                                                            </Form.Item>\n                                                        </Col>\n                                                    </Row>\n                                                </Card>\n                                            </Col>\n                                        </div>\n                                    </Form.Item>\n                                ))}\n                            </div>\n                        );\n                    }}\n                </Form.List>\n            </Form>\n        </Modal>\n    )\n}\n\nexport default ProductVerificationModal\n\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'ag-grid-enterprise';\nimport { Select } from 'antd';\n\nconst { Option } = Select\n\n\n\nexport const CountrySelect = forwardRef((props, ref) => {\n\n    const [optionValue, setOptionValue] = useState(props.value);\n    const [editing, setEditing] = useState(true);\n    const refContainer = useRef(null);\n    const productSelect = useRef(null);\n\n    useEffect(() => {\n        focus();\n    }, []);\n\n    useImperativeHandle(ref, () => {\n        return {\n            getValue() {\n                return optionValue;\n            },\n            isPopup() {\n                return true;\n            }\n        }\n    });\n\n    useEffect(() => {\n        if (!editing) {\n            props.api.stopEditing()\n        }\n    }, [editing]);\n\n    const focus = () => {\n        window.setTimeout(() => {\n            let container = ReactDOM.findDOMNode(refContainer.current);\n            if (container) {\n                container.focus();\n                productSelect.current.focus();\n            }\n        })\n    };\n\n    const setValues = () => {\n        return props.colDef.selectValues.map(val => <Option key={val} >{val}</Option>)\n    }\n\n    const handleSelect = (val) => {\n        setOptionValue(val);\n        setEditing(false)\n    }\n\n    const handleClear = () => {\n        setOptionValue(null);\n        setEditing(false)\n    }\n\n    return (\n        <div ref={refContainer}\n            tabIndex={1} // important - without this the key presses wont be caught\n        >\n            <Select\n                showSearch\n                showArrow={true}\n                allowClear\n                placeholder='Enter country name'\n                style={{ width: 200 }}\n                onSelect={handleSelect}\n                defaultValue={props.value}\n                onClear={handleClear}\n                ref={productSelect}\n            >\n                {setValues()}\n            </Select>\n        </div>\n    );\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport IntlMessages from 'util/IntlMessages';\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Tabs, InputNumber, Alert, Divider } from 'antd';\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\nimport AdminNotifications from 'components/AdminNotifications';\nimport { monthArray, showMessage, yearList, formulationType, currencyList, statusArray } from '../../../helpers';\nimport { approveSalesReportData, getAdminApiSalesData, getAdminFdfSalesData, getAdminProductsToBeVerified, getApiSalesData, getFdfSalesData, partnerMarkSalesReportMessageRead, postAdminApiSalesData, postAdminFdfSalesData, postApiSalesReportData, postFdfSalesReportData, submitSalesReportData } from '../../../appRedux/actions/SalesReport';\nimport { isEmpty, findIndex, has } from 'lodash';\nimport moment from 'moment'\n\nimport { SearchSelect } from './searchSelect'\n\nimport './sales-report.css'\nimport { initRowData, suppressEnter } from './sales-report-util';\nimport ProductVerificationModal from './productVerificationModal';\nimport { CountrySelect } from './countrySelect';\nimport { getRole } from '../../../helpers';\n\nconst confirm = Modal.confirm;\nconst TabPane = Tabs.TabPane;\n\n\nconst SalesReport = (props) => {\n    const [isDataReady, setIsDataReady] = useState(false);\n    const [isFdfInitialized, setIsFdfInitialized] = useState(false);\n    const [areApiRowsSelected, setAreApiRowsSelected] = useState(false);\n    const [areFdfRowsSelected, setAreFdfRowsSelected] = useState(false);\n    const [deleteApiIds, setDeleteApiIds] = useState([]);\n    const [deleteFdfIds, setDeleteFdfIds] = useState([]);\n    const [addApiRowNumber, setAddApiRowNumber] = useState(0);\n    const [addFdfRowNumber, setAddFdfRowNumber] = useState(0);\n\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n    const [isUserStaff, setIsUserStaff] = useState(false);\n    const [showVerificationModal, setShowVerificationModal] = useState(false);\n    const [pendingProducts, setPendingProducts] = useState(0);\n    const [partnerId, setPartnerId] = useState(null);\n    const [reportDetails, setReportDetails] = useState({});\n\n    const [apiGridApi, setApiGridApi] = useState(null);\n    const [fdfGridApi, setFdfGridApi] = useState(null);\n    const [ApiRowData, setApiRowData] = useState([]);\n    const [FdfRowData, setFdfRowData] = useState([]);\n    const [ApiColumnDefs, setApiColumnDefs] = useState([]);\n    const [FdfColumnDefs, setFdfColumnDefs] = useState([]);\n\n    const [messageCount, setMessageCount] = useState(0);\n    const [countryOrder, setCountryOrder] = useState([]);\n    const [countryDropdown, setCountryDropdown] = useState([]);\n    const [apiProductOrder, setApiProductOrder] = useState([]);\n    const [apiProductDropdown, setApiProductDropdown] = useState([]);\n    const [fdfProductOrder, setFdfProductOrder] = useState([]);\n    const [fdfProductDropdown, setFdfProductDropdown] = useState([]);\n    const [yearDropdown, setYearDropdown] = useState([]);\n    const [monthDropdown, setMonthDropdown] = useState([]);\n    const [tabKey, setTabKey] = useState('api');\n\n    const [quarterDropdown, setQuarterDropdown] = useState([])\n    const [quarterDropdownCurrent, setQuarterDropdownCurrent] = useState(\"Loading...\")\n    const [isHistoricQuarter, setIsHistoricQuarter] = useState(false)\n\n    const { apiSalesList, fdfSalesList } = useSelector(({ salesReport }) => salesReport);\n    const [form] = Form.useForm();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setSalesReport()\n        return () => {\n            setIsDataReady(false)\n        }\n    }, [])\n\n    useEffect(() => {\n        if (isDataReady && !isFdfInitialized) { addApiColumns(); }\n        if (isFdfInitialized) { addFdfColumns(); }\n    }, [isDataReady, isFdfInitialized])\n\n    const changeQuarter = (e) => {\n        if(e.target.value === quarterDropdown[0]){\n            apiGridApi.isHistoricQuarter=false\n            apiGridApi.refreshCells()\n            if(isFdfInitialized){\n                fdfGridApi.isHistoricQuarter=false\n                fdfGridApi.refreshCells()\n            }\n            setIsHistoricQuarter(false)\n            setSalesReport()\n        }else{\n            apiGridApi.isHistoricQuarter=true\n            apiGridApi.refreshCells()\n            if(isFdfInitialized){\n                fdfGridApi.isHistoricQuarter=true\n                fdfGridApi.refreshCells()\n            }\n            setIsHistoricQuarter(true)\n            setSalesReport(e.target.value)\n        }\n    }\n\n    const navigateBack = () => {\n        if (isUserAdmin || isUserStaff) {\n            props.history.push('/admin/partner-list')\n        }\n    }\n\n    const setSalesReport = (quarter_name = null) => {\n        const { id } = props.match.params;\n        if (id) {\n            setIsUserAdmin(() => {\n                return (getRole() === 'ADMIN')\n            })\n            setIsUserStaff(() => {\n                return (getRole() === 'STAFF')\n            })\n            dispatch(getAdminApiSalesData(id, (apiData) => {\n                setApiValues(apiData);\n                setQuarterDropdown(apiData.quarter_dropdown)\n                setQuarterDropdownCurrent(apiData.sales_meta.quarter_name)\n                dispatch(getAdminFdfSalesData(id, (fdfData) => {\n                    setFdfValues(fdfData);\n                    setIsDataReady(true);\n                    setPartnerId(id)\n                }, quarter_name))\n            }, quarter_name))\n        } else {\n            dispatch(getApiSalesData((apiData) => {\n                setApiValues(apiData);\n                setQuarterDropdown(apiData.quarter_dropdown)\n                setQuarterDropdownCurrent(apiData.sales_meta.quarter_name)\n                dispatch(getFdfSalesData((fdfData) => {\n                    setFdfValues(fdfData);\n                    setIsDataReady(true)\n                }, quarter_name))\n            }, quarter_name))\n        }\n    }\n\n    const setApiValues = (data) => {\n        const { country_order, product_order, rows, sales_meta, unread_message_count, pending_product_count } = data;\n        setCountryOrder(country_order && country_order.length ? country_order : []);\n        setCountryDropdown(country_order && country_order.length ? country_order.map(\n            value => value.country_name\n        ) : [])\n        setApiProductOrder(product_order && product_order.length ? product_order : []);\n        setApiProductDropdown(product_order && product_order.length ? product_order.map(\n            value => value.product_name\n        ) : [])\n        setYearDropdown(yearList());\n        setMonthDropdown(monthArray.map(value => value.name))\n        setApiRowData(initRowData(rows))\n        setReportDetails(sales_meta)\n        setMessageCount(unread_message_count)\n        setPendingProducts(pending_product_count)\n    }\n\n    const setFdfValues = (data) => {\n        const { product_order, rows, sales_meta, unread_message_count } = data;\n        setFdfProductOrder(product_order && product_order.length ? product_order : []);\n        setFdfProductDropdown(product_order && product_order.length ? product_order.map(\n            value => value.product_name\n        ) : [])\n        setFdfRowData(initRowData(rows));\n        setReportDetails(sales_meta)\n        setMessageCount(unread_message_count)\n    }\n\n    const onApiGridReady = (params) => {\n        params.api['isHistoricQuarter']=isHistoricQuarter\n        setApiGridApi(params.api);\n    }\n\n    const onFdfGridReady = (params) => {\n        params.api['isHistoricQuarter']=isHistoricQuarter\n        setFdfGridApi(params.api);\n        setIsFdfInitialized(true)\n    }\n\n    const addApiColumns = () => {\n        let apiColumns = [\n            {\n                headerName: 'Sr.No',\n                checkboxSelection: true,\n                valueGetter: 'node.rowIndex + 1',\n                headerCheckboxSelection: true,\n                width: 100\n            },\n            {\n                headerName: 'Year',\n                field: 'year',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: yearDropdown }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return ((isNaN(value) || (!isNaN(value) && !yearDropdown.includes(value))) && (value))\n                    },\n                },\n                width: 120\n            },\n            {\n                headerName: 'Month',\n                field: 'month',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: monthDropdown }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!monthDropdown.includes(value) && (value))\n                    },\n                },\n                width: 150\n            },\n            {\n                headerName: 'Country',\n                field: 'country_name',\n                cellEditor: 'countrySelector',\n                selectValues: countryDropdown,\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!countryDropdown.includes(value) && (value))\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Purchaser',\n                field: 'purchaser',\n                width: 200\n            },\n            {\n                headerName: 'Api Name',\n                field: 'product_name',\n                cellEditor: 'searchSelector',\n                selectValues: apiProductDropdown,\n                suppressKeyboardEvent: (params) => {\n                    return suppressEnter(params)\n                },\n                width: 200,\n                editable: (params) => {\n                    if(isUserAdmin && params.api.isHistoricQuarter !== true){\n                        return true\n                    }else if(!isUserStaff && apiSalesList.sales_meta.report_status !== 'Approved' && params.api.isHistoricQuarter !== true){\n                        return true\n                    }\n                    else{\n                        return false\n                    }\n                },\n                cellClassRules: {\n                    'non-editable-cell': (params) => {\n                        const { isHistoricQuarter } = params.api\n                        if(!isUserAdmin && apiSalesList.sales_meta.report_status === 'Approved'){\n                            return true\n                        }\n                        else if(!isUserAdmin && isHistoricQuarter){\n                            return true\n                        }\n                        else if(isUserAdmin && params.api.isHistoricQuarter === true){\n                            return true\n                        }\n                        else if(isUserStaff){\n                            return true\n                        }\n                        else{\n                            return false\n                        }\n                    },\n                },\n            },\n            {\n                headerName: 'Quantity (Kg)',\n                field: 'quantity',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && value !== null && value !== undefined)\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Total Value (USD)',\n                field: 'total_value',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && value !== null && value !== undefined)\n                    },\n                },\n                width: 200\n            }\n        ]\n        setApiColumnDefs(apiColumns);\n        if (apiProductDropdown && apiProductDropdown.length) {\n            apiGridApi.setColumnDefs(apiColumns);\n        }\n    }\n\n    const addFdfColumns = () => {\n        let fdfColumns = [\n            {\n                headerName: 'Sr.No',\n                checkboxSelection: true,\n                valueGetter: 'node.rowIndex + 1',\n                headerCheckboxSelection: true,\n                width: 100\n            },\n            {\n                headerName: 'Year',\n                field: 'year',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: yearDropdown }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return ((isNaN(value) || (!isNaN(value) && !yearDropdown.includes(value))) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Month',\n                field: 'month',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: monthDropdown }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!monthDropdown.includes(value) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Country',\n                field: 'country_name',\n                cellEditor: 'countrySelector',\n                selectValues: countryDropdown,\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!countryDropdown.includes(value) && (value))\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Purchaser',\n                field: 'purchaser',\n                width: 200\n            },\n            {\n                headerName: 'Product',\n                field: 'product_name',\n                cellEditor: 'searchSelector',\n                selectValues: fdfProductDropdown,\n                suppressKeyboardEvent: (params) => {\n                    return suppressEnter(params)\n                },\n                width: 200,\n                editable: (params) => {\n                    if(isUserAdmin && params.api.isHistoricQuarter !== true){\n                        return true\n                    }else if(!isUserStaff && apiSalesList.sales_meta.report_status !== 'Approved' && params.api.isHistoricQuarter !== true){\n                        return true\n                    }\n                    else{\n                        return false\n                    }\n                },\n                cellClassRules: {\n                    'non-editable-cell': (params) => {\n                        const { isHistoricQuarter } = params.api\n                        if(!isUserAdmin && apiSalesList.sales_meta.report_status === 'Approved'){\n                            return true\n                        }\n                        else if(!isUserAdmin && isHistoricQuarter){\n                            return true\n                        }\n                        else if(isUserAdmin && params.api.isHistoricQuarter === true){\n                            return true\n                        }\n                        else if(isUserStaff){\n                            return true\n                        }\n                        else{\n                            return false\n                        }\n                    },\n                }\n            },\n            {\n                headerName: 'Strength',\n                field: 'strength',\n                width: 150\n            },\n            {\n                headerName: 'Formulation Type',\n                field: 'formulation_md',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: formulationType }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (!formulationType.includes(value) && (value))\n                    },\n                },\n                width: 150\n            },\n            {\n                headerName: 'Pack Size',\n                field: 'pack_size',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Quantity',\n                field: 'quantity',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Currency',\n                field: 'currency',\n                cellEditorSelector: (params) => {\n                    return {\n                        component: 'agRichSelect',\n                        params: { values: Object.keys(currencyList) }\n                    }\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        let currenyArr = Object.keys(currencyList)\n                        return (!currenyArr.includes(value) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Gross Sale Price (per pack) (Local Currency)',\n                field: 'gross_sale_price_currency',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 300\n            },\n            {\n                headerName: 'Applicable Currency Exchange Rate to USD',\n                field: 'usd_exchange_rate',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 300\n            },\n            {\n                headerName: 'Gross Sale Price (per pack) (USD)',\n                field: 'gross_sale_price_usd',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 300\n            },\n            {\n                headerName: 'Total Gross Sales Value (USD)',\n                field: 'total_gross_value',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 300\n            },\n            {\n                headerName: 'Deductable Expenses (USD)',\n                field: 'deductable_expenses',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Total Net Sales Value',\n                field: 'total_value',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Royalty %',\n                field: 'royalty_percent',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 100\n            },\n            {\n                headerName: 'Royalty Due',\n                field: 'royalty_due',\n                type: 'valueColumn',\n                valueParser: (params) => {\n                    const { newValue } = params\n                    return isNaN(newValue) ? newValue : Number(newValue)\n                },\n                cellClassRules: {\n                    'error-cell': (params) => {\n                        const { value } = params\n                        return (isNaN(value) && (value))\n                    },\n                },\n                width: 200\n            },\n            {\n                headerName: 'Procurement Agency End-Country',\n                field: 'procurement_end_country',\n                width: 150\n            },\n            {\n                headerName: 'Comments',\n                field: 'comments',\n                width: 200\n            }\n        ]\n        setFdfColumnDefs(fdfColumns);\n        if (fdfProductDropdown && fdfProductDropdown.length) {\n            fdfGridApi.setColumnDefs(fdfColumns);\n        }\n    }\n\n    const addApiRow = () => {\n        let rowData = [...ApiRowData];\n        for (let i = 0; i < addApiRowNumber; i++) {\n            rowData.push({});\n        }\n        setApiRowData(rowData)\n        setAddApiRowNumber(0)\n    }\n\n    const addFdfRow = () => {\n        let rowData = [...FdfRowData];\n        for (let i = 0; i < addFdfRowNumber; i++) {\n            rowData.push({});\n        }\n        setFdfRowData(rowData)\n        setAddFdfRowNumber(0)\n    }\n\n    const checkApiRowNodes = (dataList) => {\n        if (dataList.some(value => checkApiRow(value).flag)) {\n            let errorData = dataList.filter(val => checkApiRow(val).flag)\n            let errorIndex = dataList.map((val, index) => {\n                if (checkApiRow(val).flag === true) {\n                    return index + 1\n                }\n            }).filter(val => val !== undefined)\n            let apiErrorList = errorData.map((val, index) => ({ errorkeys: checkApiRow(val).errorKey, index: errorIndex[index] }));\n            let errMsg = () => {\n                return (\n                    <div>\n                        <p className='mt-20 mb-10'>Please Check API Table</p>\n                        {\n                            apiErrorList.map((value, rowNo) => {\n                                return (\n                                    <div>\n                                        <h4 className='mr-5 mt-10'>Row No. {value.index}: </h4>\n                                        <p>{value.errorkeys.map((val, index) => value.errorkeys.length === (index + 1) ? val : val + ', ')}</p>\n                                        {\n                                            apiErrorList.length === (rowNo + 1) ? null : <Divider />\n                                        }\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            }\n\n            Modal.error({\n                title: 'Invalid data!',\n                content: errMsg(),\n            });\n        }\n        return !dataList.some(value => checkApiRow(value).flag)\n    }\n\n    const checkApiRow = (rowData) => {\n        let flag = false;\n        let errorKey = [];\n        for (let key in rowData) {\n            if (rowData.hasOwnProperty(key)) {\n                if (key === 'year' && ((isNaN(rowData['year']) || !yearDropdown.includes(Number(rowData['year']))) && rowData['year'] !== '' && rowData['year'] !== null)) {\n                    flag = true;\n                    errorKey.push('Year');\n                } if (key === 'month' && (!monthDropdown.includes(rowData['month']) && rowData['month'] !== '' && rowData['month'] !== null)) {\n                    flag = true\n                    errorKey.push('Month');\n                } if (key === 'country_name' && (!countryDropdown.includes(rowData['country_name']) && rowData['country_name'] !== '' && rowData['country_name'] !== null)) {\n                    flag = true\n                    errorKey.push('Country');\n                } if (key === 'quantity' && (isNaN(rowData['quantity']) && rowData['quantity'] !== null)) {\n                    flag = true\n                    errorKey.push('Quantity');\n                } if (key === 'total_value' && (isNaN(rowData['total_value']) && rowData['total_value'] !== null)) {\n                    flag = true\n                    errorKey.push('Total Value');\n                }\n            }\n        }\n        return { flag, errorKey }\n    }\n\n    const checkFdfRowNodes = (dataList) => {\n        if (dataList.some(value => checkFdfRow(value).flag)) {\n            let errorData = dataList.filter(val => checkFdfRow(val).flag)\n            let errorIndex = dataList.map((val, index) => {\n                if (checkFdfRow(val).flag === true) {\n                    return index + 1\n                }\n            }).filter(val => val !== undefined)\n            let fdfErrorList = errorData.map((val, index) => ({ errorkeys: checkFdfRow(val).errorKey, index: errorIndex[index] }));\n            let errMsg = () => {\n                return (\n                    <div>\n                        <p>Please Check FDF Table:</p>\n                        {\n                            fdfErrorList.map((value, rowNo) => {\n                                return (\n                                    <div>\n                                        <h4 className='mr-5 mt-10'>Row No. {value.index}: </h4>\n                                        <p>{value.errorkeys.map((val, index) => value.errorkeys.length === (index + 1) ? val : val + ', ')}</p>\n                                        {\n                                            fdfErrorList.length === (rowNo + 1) ? null : <Divider />\n                                        }\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            }\n\n            Modal.error({\n                title: 'Invalid data!',\n                content: errMsg(),\n            });\n        }\n        return !dataList.some(value => checkFdfRow(value).flag)\n    }\n\n    const checkFdfRow = (rowData) => {\n        let flag = false;\n        let errorKey = [];\n        for (let key in rowData) {\n            if (rowData.hasOwnProperty(key)) {\n                if (key === 'year' && ((isNaN(rowData['year']) || !yearDropdown.includes(Number(rowData['year']))) && rowData['year'] !== '' && rowData['year'] !== null)) {\n                    flag = true;\n                    errorKey.push('Year');\n                }\n                if (key === 'month' && (!monthDropdown.includes(rowData['month']) && rowData['month'] !== '' && rowData['month'] !== null)) {\n                    flag = true;\n                    errorKey.push('Month');\n                }\n                if (key === 'country_name' && (!countryDropdown.includes(rowData['country_name']) && rowData['country_name'] !== '' && rowData['country_name'] !== null)) {\n                    flag = true;\n                    errorKey.push('Country');\n                }\n                if (key === 'quantity' && (isNaN(rowData['quantity']) && rowData['quantity'] !== null)) {\n                    flag = true\n                    errorKey.push('Quantity');\n                }\n                if (key === 'formulation_md' && (!formulationType.includes(rowData['formulation_md']) && rowData['formulation_md'] !== '' && rowData['formulation_md'] !== null)) {\n                    flag = true;\n                    errorKey.push('Formulation Type');\n                }\n                if (key === 'pack_size' && (isNaN(rowData['pack_size']) && rowData['pack_size'] !== null)) {\n                    flag = true\n                    errorKey.push('Pack Size');\n                }\n                if (key === 'currency' && (!Object.keys(currencyList).includes(rowData['currency']) && rowData['currency'] && rowData['currency'] !== null)) {\n                    flag = true\n                    errorKey.push('Currency');\n                }\n                if (key === 'gross_sale_price_currency' && (isNaN(rowData['gross_sale_price_currency']) && rowData['gross_sale_price_currency'] !== null)) {\n                    flag = true\n                    errorKey.push('Gross Sale Price (per pack) (Local Currency)');\n                }\n                if (key === 'usd_exchange_rate' && (isNaN(rowData['usd_exchange_rate']) && rowData['usd_exchange_rate'] !== null)) {\n                    flag = true\n                    errorKey.push('Applicable Currency Exchange Rate');\n                }\n                if (key === 'gross_sale_price_usd' && (isNaN(rowData['gross_sale_price_usd']) && rowData['gross_sale_price_usd'] !== null)) {\n                    flag = true\n                    errorKey.push('Gross Sale Price (per pack) (USD)');\n                }\n                if (key === 'total_gross_value' && (isNaN(rowData['total_gross_value']) && rowData['total_gross_value'] !== null)) {\n                    flag = true\n                    errorKey.push('Total Gross Sales Value (USD)');\n                }\n                if (key === 'deductable_expenses' && (isNaN(rowData['deductable_expenses']) && rowData['deductable_expenses'] !== null)) {\n                    flag = true\n                    errorKey.push('Deductable Expenses (USD)');\n                }\n                if (key === 'total_value' && (isNaN(rowData['total_value']) && rowData['total_value'] !== null)) {\n                    flag = true\n                    errorKey.push('Total Net Sales Value');\n                }\n                if (key === 'royalty_percent' && isNaN(rowData['royalty_percent'])) {\n                    flag = true\n                    errorKey.push('Royalty %');\n                }\n                if (key === 'royalty_due' && isNaN(rowData['royalty_due'])) {\n                    flag = true\n                    errorKey.push('Royalty Due');\n                }\n            }\n        }\n        return { flag, errorKey }\n    }\n\n    const checkNullRow = (rowData) => {\n        let flag = true;\n        for (var key in rowData) {\n            if (rowData.hasOwnProperty(key)) {\n                if (!(rowData[key] === null || rowData[key] === undefined || rowData[key] === 0 || rowData[key] === '')) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        return flag\n    }\n\n    const saveApiData = (quarter_name = null) => {\n        let apiData = [];\n        apiGridApi.stopEditing();\n        apiGridApi.selectAll();\n        let selectedApiNodes = apiGridApi.getSelectedNodes().filter(\n            value => value.data && !isEmpty(value.data)\n        ).filter(val => !checkNullRow(val.data))\n        if (checkApiRowNodes(selectedApiNodes.map(value => value.data))) {\n            selectedApiNodes.forEach(value => {\n                let nodeData = { ...value.data };\n                const { country_name, product_name } = nodeData;\n                if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\n                    nodeData['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\n                }\n                if (product_name && apiProductDropdown.includes(product_name)) {\n                    nodeData['product_id'] = apiProductOrder[findIndex(apiProductOrder, { 'product_name': product_name })].product_id;\n                }\n                apiData.push(nodeData)\n            })\n            let finalApiData = apiData.filter(val => !isEmpty(val)).filter(val => !checkNullRow(val))\n            if (isUserAdmin) {\n                dispatch(postAdminApiSalesData(partnerId, [...deleteApiIds, ...finalApiData], () => {\n                    var apiUpdatedRows = finalApiData.length-apiSalesList.rows.length\n                    var apiSuccessMessage = `Data successfully recorded. Total Rows: `+finalApiData.length+(apiUpdatedRows === 0 ? '' :(apiUpdatedRows < 0 ? ', Deleted Rows: '+Math.abs(apiUpdatedRows) : `, Newly Added Rows: `+apiUpdatedRows))\n                    showMessage('success', apiSuccessMessage);\n                    setDeleteApiIds([])\n                    setSalesReport(quarter_name)\n                }, quarter_name))\n            } else {\n                dispatch(postApiSalesReportData([...deleteApiIds, ...finalApiData], () => {\n                    var apiUpdatedRows = finalApiData.length-apiSalesList.rows.length\n                    var apiSuccessMessage = `Data successfully recorded. Total Rows: `+finalApiData.length+(apiUpdatedRows === 0 ? '' :(apiUpdatedRows < 0 ? ', Deleted Rows: '+Math.abs(apiUpdatedRows) : `, Newly Added Rows: `+apiUpdatedRows))\n                    showMessage('success', apiSuccessMessage);\n                    setDeleteApiIds([])\n                    setSalesReport()\n                }))\n            }\n            apiGridApi.deselectAll()\n        } else {\n            apiGridApi.deselectAll()\n        }\n    }\n\n    const saveFdfData = (quarter_name = null) => {\n        let fdfData = [];\n        fdfGridApi.stopEditing();\n        fdfGridApi.selectAll();\n        let selectedFdfNodes = fdfGridApi.getSelectedNodes().filter(\n            value => value.data && !isEmpty(value.data)\n        ).filter(val => !checkNullRow(val.data))\n        if (checkFdfRowNodes(selectedFdfNodes.map(value => value.data))) {\n            selectedFdfNodes.forEach(value => {\n                let nodeData = { ...value.data };\n                const { country_name, product_name } = nodeData;\n                if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\n                    nodeData['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\n                }\n                if (product_name && fdfProductDropdown.includes(product_name)) {\n                    nodeData['product_id'] = fdfProductOrder[findIndex(fdfProductOrder, { 'product_name': product_name })].product_id;\n                }\n                fdfData.push(nodeData)\n            })\n            let finalFdfData = fdfData.filter(val => !isEmpty(val)).filter(value => !checkNullRow(value))\n            if (isUserAdmin) {\n                dispatch(postAdminFdfSalesData(partnerId, [...deleteFdfIds, ...finalFdfData], () => {\n                    var fdfUpdatedRows = finalFdfData.length-fdfSalesList.rows.length\n                    var fdfSuccessMessage = `Data successfully recorded. Total Rows: `+finalFdfData.length+(fdfUpdatedRows === 0 ? '' :(fdfUpdatedRows < 0 ? ', Deleted Rows: '+Math.abs(fdfUpdatedRows) : `, Newly Added Rows: `+fdfUpdatedRows))\n                    showMessage('success', fdfSuccessMessage);\n                    setDeleteFdfIds([])\n                    setSalesReport(quarter_name)\n                }, quarter_name))\n            } else {\n                dispatch(postFdfSalesReportData([...deleteFdfIds, ...finalFdfData], () => {\n                    var fdfUpdatedRows = finalFdfData.length-fdfSalesList.rows.length\n                    var fdfSuccessMessage = `Data successfully recorded. Total Rows: `+finalFdfData.length+(fdfUpdatedRows === 0 ? '' :(fdfUpdatedRows < 0 ? ', Deleted Rows: '+Math.abs(fdfUpdatedRows) : `, Newly Added Rows: `+fdfUpdatedRows))\n                    showMessage('success', fdfSuccessMessage);\n                    setDeleteFdfIds([])\n                    setSalesReport()\n                }))\n            }\n            fdfGridApi.deselectAll()\n        } else {\n            fdfGridApi.deselectAll()\n        }\n    }\n\n    const saveData = () => {\n        if (tabKey === 'api') {\n            if (isUserAdmin && isHistoricQuarter){\n                saveApiData(quarterDropdownCurrent)\n            }else{\n                saveApiData()\n            }\n        } else {\n            if (isUserAdmin && isHistoricQuarter){\n                saveFdfData(quarterDropdownCurrent)\n            }else{\n                saveFdfData()\n            }\n        }\n    }\n\n    const saveReportBeforeAction = (callback) => {\n        if (apiGridApi) apiGridApi.stopEditing();\n        if (isFdfInitialized) fdfGridApi.stopEditing();\n        let apiData = ApiRowData && ApiRowData.length > 0 ? ApiRowData.filter(value => !isEmpty(value)).map(value => {\n            const { country_name, product_name } = value\n            if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\n                value['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\n            }\n            if (product_name && apiProductDropdown.includes(product_name)) {\n                value['active_product_id'] = apiProductOrder[findIndex(apiProductOrder, { 'product_name': product_name })].active_product_id;\n            }\n            return value\n        }) : [];\n        let fdfData = FdfRowData && FdfRowData.length > 0 ? FdfRowData.filter(value => !isEmpty(value)).map(value => {\n            const { country_name, product_name } = value\n            if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\n                value['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\n            }\n            if (product_name && fdfProductDropdown.includes(product_name)) {\n                value['active_product_id'] = fdfProductOrder[findIndex(fdfProductOrder, { 'product_name': product_name })].active_product_id;\n            }\n            return value\n        }) : [];\n        if (checkFdfRowNodes(fdfData) && checkApiRowNodes(apiData)) {\n            let finalApiData = apiData.filter(value => !checkNullRow(value))\n            let finalFdfData = fdfData.filter(value => !checkNullRow(value))\n            if (isUserAdmin) {\n                dispatch(postAdminApiSalesData(partnerId, [...deleteApiIds, ...finalApiData], () => {\n                    setDeleteApiIds([])\n                    dispatch(postAdminFdfSalesData(partnerId, [...deleteFdfIds, ...finalFdfData], () => {\n                        setDeleteFdfIds([])\n                        callback()\n                    }))\n                }))\n            } else {\n                dispatch(postApiSalesReportData([...deleteApiIds, ...finalApiData], () => {\n                    setDeleteApiIds([])\n                    dispatch(postFdfSalesReportData([...deleteFdfIds, ...finalFdfData], () => {\n                        setDeleteFdfIds([])\n                        callback()\n                    }))\n                }))\n            }\n        }\n    }\n\n    const showSubmitConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                confirm({\n                    title: 'Do you want to submit the report?',\n                    content: showCommentsForm(),\n                    className: 'btn-confirm-green',\n                    okText: 'Submit',\n                    cancelText: 'Cancel',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData;\n                                dispatch(submitSalesReportData({ message: msg }, () => {\n                                    setSalesReport()\n                                    form.resetFields(['commentData'])\n                                }))\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                })\n            }\n        )\n    }\n\n    const approver = (msg, isApproved) => {\n        let data = {\n            'partner_id': partnerId,\n            'message': msg,\n            'is_approved': isApproved\n        }\n        dispatch(approveSalesReportData(data, () => {\n            if (isApproved) {\n                showMessage('success', 'Report Approved!');\n            } else {\n                showMessage('success', 'Report Rejected!');\n            }\n            form.resetFields(['commentData']);\n            setSalesReport()\n        }))\n    }\n\n    const showCommentsForm = () => {\n        return (\n            <Form\n                form={form}\n                layout='vertical'\n                className='mt-20'\n            >\n                <div className='mb-10'>\n                    <span>\n                        {isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'}\n                    </span>\n                </div>\n                <Form.Item\n                    name='commentData'\n                    className='mb-0'\n                    rules={[\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\n                    ]}\n                >\n                    <Input.TextArea placeholder='Enter comments here' />\n                </Form.Item>\n            </Form>\n        )\n    }\n\n    const showRejectConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                setSalesReport()\n                confirm({\n                    title: 'Do you want to reject the report?',\n                    className: 'btn-confirm-red',\n                    content: showCommentsForm(),\n                    okText: 'Reject',\n                    cancelText: 'Cancel',\n                    icon: (<CloseCircleOutlined />),\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData;\n                                approver(msg, false);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n\n            }\n        )\n    }\n\n    const showApproveConfirm = () => {\n        saveReportBeforeAction(\n            () => {\n                setSalesReport();\n                confirm({\n                    title: 'Do you want to approve the report?',\n                    className: 'btn-confirm-green',\n                    content: showCommentsForm(),\n                    icon: (<CheckCircleOutlined />),\n                    okText: 'Approve',\n                    cancelText: 'Cancel',\n                    onOk(close) {\n                        form.validateFields().then(\n                            values => {\n                                let msg = values.commentData;\n                                approver(msg, true);\n                                close()\n                            }\n                        )\n                    },\n                    onCancel() {\n                        form.resetFields(['commentData'])\n                    },\n                });\n            }\n        )\n    }\n\n    const displayGridCta = () => {\n        const { report_status } = reportDetails;\n        if ((tabKey === 'api' && apiProductDropdown && apiProductDropdown.length) || (tabKey === 'fdf' && fdfProductDropdown && fdfProductDropdown.length))\n            return (\n                <div>\n                    <Tooltip title={tabKey === 'api' ? 'Save API report' : 'Save FDF report'}>\n                        <Button\n                            type='primary'\n                            onClick={() => { saveData(false) }}\n                            className='mb-0 sales-report-btn-save'\n                            disabled={(isUserAdmin ? false : isUserStaff ? true: isHistoricQuarter ? true : report_status === 'Approved')}\n                            id='sales-save'\n                        >\n                            Save\n                        </Button>\n                    </Tooltip>\n                    <Tooltip title={<IntlMessages id='report.download' />}>\n                        <Button id='sales-download-excel' className='mb-0' onClick={() => downloadExcel()} >\n                            <DownloadOutlined />\n                        </Button>\n                    </Tooltip>\n                </div>\n            )\n    }\n\n    const displayHeader = () => {\n        const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\n        if (apiProductOrder.length > 0 || fdfProductOrder.length > 0) {\n            return (\n                <div className={pendingProducts > 0 ? 'gx-mb-2' : 'gx-mb-4'}>\n                    <h1 className='title '>{isUserAdmin || isUserStaff ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Sales Report {isUserAdmin || isUserStaff ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\n                        <span className='text-capitalize'>({quarter_name})</span>\n                    </h1>\n                    <h4 className={isUserAdmin || isUserStaff ? 'ml-30' : ''}>Report Status:&nbsp;\n                        <span className='text-capitalize'> {report_status}</span>\n                        <span>\n                            {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\n                        </span>\n                    </h4>\n                </div>\n            )\n        } else {\n            return (\n                <div className='gx-mb-4'>\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null}Sales Report {isUserAdmin && partner_name ? <span>for <span className='text-capitalize'>{partner_name}</span></span> : null}\n                    </h1>\n                </div>\n            )\n        }\n    }\n\n    const displayProductVerification = () => {\n        if (isUserAdmin && pendingProducts > 0) {\n            return (\n                <Alert\n                    className='ml-30 min-width-600'\n                    message=\"Product verification pending!\"\n                    description={\n                        <div>\n                            <span>\n                                There are\n                                            <span className='text-capitalize color-red ml-5 mr-5'> {pendingProducts}</span>\n                                            products to be verified\n                                            <Button id='view-product-verification' type='link' className='mb-0' onClick={() => viewVerificationModal()}>View Details</Button>\n                            </span>\n                        </div>\n                    }\n                    type=\"warning\"\n                    showIcon\n                />\n            )\n        }\n    }\n\n    const displayCTA = () => {\n        if ((apiProductOrder.length > 0 || fdfProductOrder.length > 0)) {\n            const { report_status } = reportDetails\n            if (isUserAdmin || isUserStaff) {\n                return (\n                    <div className='gx-flex-row gx-justify-content-end'>\n                        <Button\n                            className='gx-btn-success mb-0'\n                            onClick={() => showApproveConfirm()}\n                            disabled={pendingProducts > 0 || isHistoricQuarter || isUserStaff}\n                            id='sales-approve'\n                        >\n                            Approve\n                        </Button>\n                        <Button\n                            className='gx-btn-danger mb-0'\n                            onClick={() => showRejectConfirm()}\n                            disabled={pendingProducts > 0 || isHistoricQuarter || isUserStaff}\n                            id='sales-reject'\n                        >\n                            Reject\n                        </Button>\n                        <Badge count={messageCount}>\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={apiSalesList && apiSalesList.messages ? apiSalesList.messages : fdfSalesList && fdfSalesList.messages ? fdfSalesList.messages : []} />} trigger='click'>\n                                <Button\n                                    id='sales-msg-box'\n                                    className='mr-0 mb-0'\n                                    onClick={() => dispatch(partnerMarkSalesReportMessageRead(\n                                        isUserAdmin ? 'admin' : 'partner',\n                                        () => setMessageCount(0)\n                                    ))}\n                                >\n                                    <MailOutlined />\n                                </Button>\n                            </Popover>\n                        </Badge>\n                        <div className=\"quarter-dropdown-container-admin-sales\">\n                            <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                {\n                                    quarterDropdown.map((quarter) => (\n                                        <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                    ))\n                                }\n                            </select>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className='gx-flex-row gx-justify-content-end'>\n                        <Button\n                            onClick={() => showSubmitConfirm()}\n                            className='gx-btn-success mb-0'\n                            disabled={(isHistoricQuarter ? true : report_status === 'Approved')}\n                            id='sales-submit'\n                        >\n                            Submit Report\n                        </Button>\n                        <Badge count={messageCount}>\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={apiSalesList && apiSalesList.messages ? apiSalesList.messages : fdfSalesList && fdfSalesList.messages ? fdfSalesList.messages : []} />} trigger='click'>\n                                <Button\n                                    id='sales-msg-box'\n                                    className='mr-0 mb-0'\n                                    onClick={() => dispatch(partnerMarkSalesReportMessageRead(\n                                        isUserAdmin ? 'admin' : 'partner',\n                                        () => setMessageCount(0)\n                                    ))}\n                                >\n                                    <MailOutlined />\n                                </Button>\n                            </Popover>\n                        </Badge>\n                        <div className=\"quarter-dropdown-container-user-sales\">\n                            <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                {\n                                    quarterDropdown.map((quarter) => (\n                                        <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                    ))\n                                }\n                            </select>\n                        </div>\n                    </div>\n                )\n            }\n        } else {\n            return null\n        }\n    }\n\n    const downloadExcel = () => {\n        if (tabKey === 'api') {\n            apiGridApi.selectAll();\n            apiGridApi.exportDataAsExcel({\n                sheetName: 'API',\n                fileName: 'sales-report',\n                columnKeys: ['year', 'month', 'country_name', 'purchaser', 'product_name', 'quantity', 'total_value']\n            })\n            apiGridApi.deselectAll();\n        } else if (tabKey === 'fdf') {\n            fdfGridApi.selectAll();\n            fdfGridApi.exportDataAsExcel({\n                sheetName: 'FDF',\n                fileName: 'sales-report',\n                columnKeys: ['year', 'month', 'country_name', 'purchaser', 'product_name',  'strength', 'formulation_md', 'pack_size', 'quantity', 'currency', 'gross_sale_price_currency', 'usd_exchange_rate', 'gross_sale_price_usd', 'total_gross_value', 'deductable_expenses', 'total_value', 'royalty_percent', 'royalty_due', 'procurement_end_country', 'comments']\n            })\n            fdfGridApi.deselectAll();\n        }\n    }\n\n    const handleApiCellValueChange = (params) => {\n        const { colDef, node, newValue, oldValue } = params;\n        let rowNode = apiGridApi.getRowNode(node.id);\n        if (newValue !== oldValue) {\n            switch (colDef.field) {\n                case 'year':\n                    if (!isNaN(newValue) && yearDropdown.includes(Number(newValue))) {\n                        rowNode.setDataValue(colDef.field, Number(newValue));\n                    } else {\n                        if (newValue === ' ') {\n                            rowNode.setDataValue(colDef.field, null);\n                        }\n                    }\n                    break;\n                case 'month':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'country':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'quantity':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'total_value':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    const handleFdfCellValueChange = (params) => {\n        const { colDef, node, newValue, oldValue } = params;\n        let rowNode = fdfGridApi.getRowNode(node.id);\n        if (newValue !== oldValue) {\n            \n            switch (colDef.field) {\n                case 'year':\n                    if (!isNaN(newValue) && yearDropdown.includes(Number(newValue))) {\n                        rowNode.setDataValue(colDef.field, Number(newValue));\n                    } else {\n                        if (newValue === ' ') {\n                            rowNode.setDataValue(colDef.field, null);\n                        }\n                    }\n                    break;\n                case 'month':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'country':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'formulation_md':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'currency':\n                    if (newValue === ' ') {\n                        rowNode.setDataValue(colDef.field, null);\n                    }\n                    break;\n                case 'quantity':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'pack_size':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'gross_sale_price_currency':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'usd_exchange_rate':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'gross_sale_price_usd':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'total_gross_value':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'deductable_expenses':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'total_value':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'royalty_percent':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                case 'royalty_due':\n                    if (!isNaN(newValue)) {\n                        if (newValue === null) {\n                            rowNode.setDataValue(colDef.field, 0)\n                        } else {\n                            rowNode.setDataValue(colDef.field, Number(newValue))\n                        }\n                    } else {\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    const handleApiRowSelection = () => {\n        setAreApiRowsSelected(apiGridApi.getSelectedNodes().length > 0)\n    }\n\n    const handleFdfRowSelection = () => {\n        setAreFdfRowsSelected(fdfGridApi.getSelectedNodes().length > 0)\n    }\n\n    const deleteSelectedApiRows = () => {\n        let rowIndexList = apiGridApi.getSelectedNodes().map(value => Number(value.id));\n        let tempDeleteIds = [...deleteApiIds];\n        let rowData = [...ApiRowData]\n        rowIndexList.forEach((value) => {\n            let nodeData = apiGridApi.getRowNode(value)\n            if (nodeData.data.hasOwnProperty('sales_report_id') && !has(tempDeleteIds, { sales_report_id: nodeData.data.sales_report_id })) {\n                tempDeleteIds.push({ sales_report_id: nodeData.data.sales_report_id })\n            }\n        })\n\n        let finalData = rowData.filter((value, index) => {\n            return !rowIndexList.includes(index)\n        })\n        setApiRowData(finalData)\n        setDeleteApiIds(tempDeleteIds)\n        apiGridApi.deselectAll()\n    }\n\n    const deleteSelectedFdfRows = () => {\n        let rowIndexList = fdfGridApi.getSelectedNodes().map(value => value.rowIndex);\n        let tempDeleteIds = [...deleteApiIds];\n        let rowData = [...FdfRowData]\n        rowIndexList.forEach((value) => {\n            let nodeData = fdfGridApi.getRowNode(value)\n            if (nodeData.data.hasOwnProperty('sales_report_id') && !has(tempDeleteIds, { sales_report_id: nodeData.data.sales_report_id })) {\n                tempDeleteIds.push({ sales_report_id: nodeData.data.sales_report_id })\n            }\n        })\n\n        let finalData = rowData.filter((value, index) => {\n            return !rowIndexList.includes(index)\n        })\n        setFdfRowData(finalData)\n        setDeleteFdfIds(tempDeleteIds)\n        fdfGridApi.deselectAll()\n    }\n\n    const setReportHeight = () => {\n        return window.innerHeight - 230\n    }\n\n    const viewVerificationModal = () => {\n        dispatch(getAdminProductsToBeVerified(partnerId, () => {\n            setShowVerificationModal(true)\n        }))\n    }\n    return (\n        <div>\n            <div className='gx-flex-row gx-justify-content-between'>\n                {displayHeader()}\n                {displayCTA()}\n            </div>\n            <div className='gx-flex-row gx-justify-content-between'>\n                {displayProductVerification()}\n            </div>\n            <Tabs\n                tabPosition='top'\n                type='card'\n                className='sales-report-tabs'\n                tabBarExtraContent={displayGridCta()}\n                onChange={(currentTabKey) => { setTabKey(currentTabKey) }}\n            >\n                <TabPane tab='API' key='api'>\n                    {\n                        apiProductDropdown && apiProductDropdown.length ?\n                            <div>\n                                <div\n                                    className='ag-theme-balham ag-scroll-bar-fix'\n                                    style={{ height: setReportHeight(), paddingBottom: 20 }}\n                                >\n                                    <AgGridReact\n                                        onGridReady={onApiGridReady}\n                                        columnDefs={ApiColumnDefs}\n                                        rowData={ApiRowData}\n                                        defaultColGroupDef={{ marryChildren: true }}\n                                        defaultColDef={{\n                                            filter: true,\n                                            sortable: true,\n                                            width: 300,\n                                            resizable: true,\n                                            editable: (params) => {\n                                                if(isUserAdmin){\n                                                    return true\n                                                }else if(!isUserStaff && apiSalesList.sales_meta.report_status !== 'Approved' && params.api.isHistoricQuarter !== true){\n                                                    return true\n                                                }\n                                                else{\n                                                    return false\n                                                }\n                                            },\n                                            cellClassRules: {\n                                                'non-editable-cell': (params) => {\n                                                    const { isHistoricQuarter } = params.api\n                                                    if(!isUserAdmin && apiSalesList.sales_meta.report_status === 'Approved'){\n                                                        return true\n                                                    }\n                                                    else if(!isUserAdmin && isHistoricQuarter){\n                                                        return true\n                                                    }\n                                                    else if(isUserStaff){\n                                                        return true\n                                                    }\n                                                    else{\n                                                        return false\n                                                    }\n                                                },\n                                            },\n                                        }}\n                                        \n                                        enableRangeSelection={true}\n                                        enableCellChangeFlash={true}\n                                        animateRows={true}\n                                        rowSelection={'multiple'}\n                                        suppressRowClickSelection={true}\n                                        onSelectionChanged={handleApiRowSelection}\n                                        onCellValueChanged={handleApiCellValueChange}\n                                        frameworkComponents={{\n                                            searchSelector: SearchSelect,\n                                            countrySelector: CountrySelect\n                                        }}\n\n                                    />\n                                </div>\n                                <div className='gx-flex-row'>\n                                    <InputNumber disabled={(isUserAdmin ? false : isHistoricQuarter ? true : reportDetails.report_status === 'Approved')} min={0} defaultValue={0} max={10000} onChange={(value) => { setAddApiRowNumber(value) }} />\n                                    <Button type='primary' onClick={addApiRow} disabled={(isUserAdmin ? false : isUserStaff ? true : isHistoricQuarter ? true : reportDetails.report_status === 'Approved')} > Add Row</Button>\n                                    <Button onClick={deleteSelectedApiRows} disabled={(isUserAdmin ? false : isUserStaff ? true : isHistoricQuarter ? true : reportDetails.report_status === 'Approved') || !areApiRowsSelected} > Delete Selected Rows</Button>\n                                </div>\n                            </div>\n                            :\n                            null\n                    }\n                </TabPane>\n                <TabPane tab='FDF' key='fdf'>\n                    {\n                        fdfProductDropdown && fdfProductDropdown.length ?\n                            <div>\n                                <div className='ag-theme-balham ag-scroll-bar-fix' style={{ height: setReportHeight(), paddingBottom: 20 }}>\n                                    <AgGridReact\n                                        onGridReady={onFdfGridReady}\n                                        columnDefs={FdfColumnDefs}\n                                        rowData={FdfRowData}\n                                        defaultColGroupDef={{ marryChildren: true }}\n                                        defaultColDef={{\n                                            filter: true,\n                                            sortable: true,\n                                            width: 300,\n                                            resizable: true,\n                                            editable: (params) => {\n                                                if(isUserAdmin){\n                                                    return true\n                                                }else if(!isUserStaff && apiSalesList.sales_meta.report_status !== 'Approved' && params.api.isHistoricQuarter !== true){\n                                                    return true\n                                                }\n                                                else{\n                                                    return false\n                                                }\n                                            },\n                                            cellClassRules: {\n                                                'non-editable-cell': (params) => {\n                                                    const { isHistoricQuarter } = params.api\n                                                    if(!isUserAdmin && apiSalesList.sales_meta.report_status === 'Approved'){\n                                                        return true\n                                                    }\n                                                    else if(!isUserAdmin && isHistoricQuarter){\n                                                        return true\n                                                    }\n                                                    else if(isUserStaff){\n                                                        return true\n                                                    }\n                                                    else{\n                                                        return false\n                                                    }\n                                                },\n                                            },\n                                        }}\n                                        enableRangeSelection={true}\n                                        suppressAggFuncInHeader={true}\n                                        enableCellChangeFlash={true}\n                                        animateRows={true}\n                                        rowSelection={'multiple'}\n                                        suppressRowClickSelection={true}\n                                        onSelectionChanged={handleFdfRowSelection}\n                                        onCellValueChanged={handleFdfCellValueChange}\n                                        frameworkComponents={{\n                                            searchSelector: SearchSelect,\n                                            countrySelector: CountrySelect\n                                        }}\n                                    />\n                                </div>\n                                <div className='gx-flex-row'>\n                                    <InputNumber disabled={(isUserAdmin ? false : isHistoricQuarter ? true : reportDetails.report_status === 'Approved')} min={0} defaultValue={0} max={10000} onChange={(value) => { setAddFdfRowNumber(value) }} />\n                                    <Button type='primary' onClick={addFdfRow} disabled={(isUserAdmin ? false : isUserStaff ? true : isHistoricQuarter ? true : reportDetails.report_status === 'Approved')} > Add Row</Button>\n                                    <Button onClick={deleteSelectedFdfRows} disabled={(isUserAdmin ? false : isUserStaff ? true : isHistoricQuarter ? true : reportDetails.report_status === 'Approved') || !areFdfRowsSelected} > Delete Selected Rows</Button>\n                                </div>\n\n                            </div>\n                            :\n                            null\n                    }\n\n                </TabPane>\n            </Tabs>\n            {\n                showVerificationModal ?\n                    <ProductVerificationModal\n                        visible={showVerificationModal}\n                        displayVerificationModal={() => { setShowVerificationModal(true) }}\n                        hideVerificationModal={() => { setShowVerificationModal(false) }}\n                        partnerId={partnerId}\n                        setSalesReport={setSalesReport}\n                        statusArray={statusArray}\n                        quarter_name={quarterDropdownCurrent}\n                    />\n                    : null\n            }\n        </div>\n    )\n}\n\nexport default SalesReport\n","import React, { useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport IntlMessages from 'util/IntlMessages';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { resetChangePassword, userChangePassword } from '../../../appRedux/actions'\n\nconst FormItem = Form.Item;\n\n\nconst ChangePassword = (props) => {\n\n    const { changePasswordSuccess } = useSelector(({ authentication }) => authentication);\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if (changePasswordSuccess) {\n            props.history.push('/logout')\n            dispatch(resetChangePassword())\n        }\n    }, [changePasswordSuccess])\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const onFinish = values => {\n        dispatch(userChangePassword(values))\n    };\n\n    return (\n        <div className='gx-login-container'>\n            <div className='gx-login-content'>\n\n                <div className='gx-login-header'>\n                    <img src={require('assets/images/logo-white.png')} alt='wieldy' title='wieldy' />\n                </div>\n                <div className='gx-mb-4'>\n                    <h2>Change Password</h2>\n                    <p><IntlMessages id='appModule.enterPasswordReset' /></p>\n                </div>\n\n                <Form\n                    initialValues={{ remember: true }}\n                    name='reset-password'\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    className='gx-signin-form gx-form-row0'>\n\n                    <FormItem\n                        rules={[\n                            { required: true, message: 'Please input your Password!' },\n                            { min: 8, message: <IntlMessages id='error.password_min' /> },\n                            { pattern: /^(?=.*\\d)(?=.*[a-z]).{8,100}$/, message: <IntlMessages id='error.password_valid' /> }\n                        ]}\n                        name='password'\n                    >\n                        <Input.Password id='cp-password' placeholder='Password' />\n                    </FormItem>\n\n                    <FormItem\n                        name='confirm'\n                        dependencies={['password']}\n                        hasFeedback\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            ({ getFieldValue }) => ({\n                                validator(rule, value) {\n                                    if (!value || getFieldValue('password') === value) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('The two passwords that you entered do not match!');\n                                },\n                            }),\n                        ]}\n                    >\n                        <Input.Password id='cp-confirm-password' placeholder='Retype New Password' />\n                    </FormItem>\n\n                    <FormItem>\n                        <Button id='cp-submit' type='primary' htmlType='submit'>\n                            <IntlMessages id='app.userAuth.resetPassword' />\n                        </Button>\n                    </FormItem>\n                </Form>\n            </div>\n        </div>\n    );\n};\n\nexport default ChangePassword;\n","import React, { useEffect, useState } from 'react';\nimport {\n    Form,\n    Input,\n    Select,\n    Row,\n    Col,\n    Button,\n    Card,\n} from 'antd';\nimport { LeftOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport FormItem from 'antd/lib/form/FormItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdminProductList, adminAddPartner, getAdminSinglePartner, adminEditPartner, resetEditPartner, getAdminCountryList } from '../../../appRedux/actions';\nimport IntlMessages from 'util/IntlMessages';\nimport './add-partner.css'\nimport { countryCodeList, statusArray } from '../../../helpers';\nimport { sortBy } from 'lodash';\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nconst AddPartner = (props) => {\n\n    const { isPartnerAdded, isPartnerEdited, partnerDetails, countryList, isLoaded } = useSelector(({ adminPartner }) => adminPartner);\n    const { productList } = useSelector(({ adminProducts }) => adminProducts);\n    const [editFlag, setEditFlag] = useState(false);\n    const [partnerEmployeeData, setPartnerEmployeeData] = useState([]);\n    const dispatch = useDispatch();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        const { path, params } = props.match;\n        if (params.id && (path.split('/')[2] === 'edit-partner')) {\n            dispatch(getAdminSinglePartner(params.id))\n            dispatch(getAdminCountryList())\n            dispatch(getAdminProductList(false))\n            setEditFlag(true)\n        } else {\n            dispatch(getAdminCountryList())\n            dispatch(getAdminProductList(false))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (isPartnerEdited || isPartnerAdded) {\n            form.resetFields();\n            props.history.push('/admin/partner-list')\n        }\n        if (isLoaded) {\n            if (editFlag) {\n                const { partner } = partnerDetails;\n                setPartnerEmployeeData(partner && partner.employee ? partner.employee : [])\n                form.setFieldsValue({\n                    company_name: partner.company_name,\n                    email: partnerDetails.email,\n                    contact: partner.contact_number.slice(partner.contact_number.length - 10),\n                    prefix: partner.contact_number.substring(0, partner.contact_number.length - 10),\n                    address: partner.address,\n                    region: partner.region,\n                    active_products: partner.active_products\n                })\n                if (partner.employee && partner.employee.length > 0) {\n                    form.setFieldsValue({\n                        employee: partner.employee,\n                    })\n                }\n            }\n        }\n    })\n\n    const onFinish = values => {\n        const { params } = props.match;\n        let data = {\n            'email': values.email ? values.email.toLowerCase() : '',\n            'partner': {\n                'company_name': values.company_name,\n                'contact_number': values.prefix + values.contact,\n                'address': values.address ? values.address : null,\n                'region': values.region,\n                'active_products': values.active_products ? values.active_products : [],\n                'employee': setEmployeeData(values.employee)\n            }\n        }\n        if (editFlag) {\n            let editData = data;\n            dispatch(adminEditPartner(params.id, editData, () => {\n                dispatch(resetEditPartner())\n            }))\n        } else {\n            dispatch(adminAddPartner(data, () => {\n                dispatch(resetEditPartner())\n            }))\n        }\n    };\n\n    const setEmployeeData = (data) => {\n        if (data.length > 0) {\n            if (editFlag) {\n                return data.map((value, index) => {\n                    if (partnerEmployeeData[index]) {\n                        return { ...value, 'employee_id': partnerEmployeeData[index].employee_id }\n                    } else {\n                        return { ...value, 'employee_id': 0 }\n                    }\n                })\n            } else {\n                return data.map(value => ({ ...value, 'employee_id': 0 }))\n            }\n        }\n        return []\n    }\n\n    const setCountryCodeListOptions = () => {\n        let sortedCountryCodeList = sortBy(countryCodeList, ['code']);\n        return sortedCountryCodeList.map(\n            value => <Option key={value.code} value={value.code}>{value.code}</Option>\n        )\n    }\n\n    const prefixSelector = (\n        <Form.Item name='prefix' noStyle>\n            <Select\n                style={{ width: 100 }}\n                showSearch\n                optionFilterProp='children'\n                filterOption={true}\n                id='partner-countrylist'\n            >\n                {\n                    setCountryCodeListOptions()\n                }\n            </Select>\n        </Form.Item>\n    );\n\n    const navigateBack = () => {\n        const { history } = props;\n        history.goBack();\n    }\n\n    const navigateToPartnerList = () => {\n        const { history } = props;\n        history.push('/admin/partner-list');\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <h1 className='title gx-mb-4'>\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\n                        {editFlag ? 'Edit Partner' : 'Add Partner'}\n                    </h1>\n                </Col>\n                <Col span={24}>\n                    <Card className='gx-card'>\n                        <Row>\n                            <Col span={22}>\n                                <Form\n                                    {...formItemLayout}\n                                    form={form}\n                                    name='add-partner'\n                                    onFinish={onFinish}\n                                    initialValues={{\n                                        prefix: '+91',\n                                        active_products: [{ product_id: null, status: \"\", product_name: \"\" }],\n                                        employee: [{ first_name: '', last_name: '', contact_number: '' }]\n                                    }}\n                                    scrollToFirstError\n                                >\n                                    <Form.Item name='company_name' label='Company Name' rules={[{ required: true, message: <IntlMessages id='error.company_required' /> }]}>\n                                        <Input />\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        name='email'\n                                        label='E-mail'\n                                        rules={[\n                                            {\n                                                type: 'email',\n                                                message: <IntlMessages id='error.email_valid' />,\n                                            },\n                                            {\n                                                required: true,\n                                                message: <IntlMessages id='error.email_required' />,\n                                            },\n                                        ]}\n                                    >\n                                        <Input />\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        name='contact'\n                                        label='Contact Number'\n                                        rules={[\n                                            { required: true, message: <IntlMessages id='error.contact_required' /> },\n                                            { len: 10, message: <IntlMessages id='error.contact_length' /> },\n                                            { pattern: /^[0-9]+$/, message: <IntlMessages id='error.contact_valid' /> },\n                                        ]}\n                                    >\n                                        <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n                                    </Form.Item>\n\n                                    <Form.Item name='address' label='Address' rules={[{ required: false, message: <IntlMessages id='error.address_required' /> }]}>\n                                        <Input.TextArea />\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        name='region'\n                                        label='Region'\n                                        hasFeedback\n                                        rules={[{ required: true, message: <IntlMessages id='error.region_required' /> }]}\n                                    >\n                                        <Select\n                                            placeholder='Please select a region'\n                                            showSearch\n                                            optionFilterProp='children'\n                                            filterOption={true}\n                                            id='partner-region'\n                                        >\n                                            {\n                                                countryList.map(\n                                                    value => <Option key={value} value={value}>{value}</Option>\n                                                )\n                                            }\n                                        </Select>\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        label='Active Products'\n                                        className='mb-0'\n                                    >\n                                        <Form.List\n                                            name='active_products'\n                                        >\n                                            {(fields, { add, remove }) => {\n                                                return (\n                                                    <div>\n                                                        {fields.map((field, index) => (\n                                                            <Form.Item\n                                                                wrapperCol={{ sm: 24 }}\n                                                                key={field.key}\n                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                rules={[\n                                                                    {\n                                                                        required: false,\n                                                                        message: 'Please enter details',\n                                                                    },\n                                                                ]}\n                                                            >\n                                                                <div className='flex-d-row'>\n                                                                    <Col span={22}>\n                                                                        <Row>\n                                                                            <Col span={12}>\n                                                                                <FormItem\n                                                                                    {...field}\n                                                                                    className='mb-0'\n                                                                                    validateTrigger={['onChange', 'onBlur']}\n                                                                                    name={[field.name, 'product_id']}\n                                                                                    fieldKey={[field.fieldKey, 'product_id']}\n                                                                                    rules={[\n                                                                                        {\n                                                                                            required: true,\n                                                                                            message: 'Please select product.',\n                                                                                        },\n                                                                                    ]}\n                                                                                >\n                                                                                    <Select\n                                                                                        placeholder='Please select product'\n                                                                                        className='product-select'\n                                                                                        id={'partner-product-' + field.fieldKey}\n                                                                                        showSearch\n                                                                                        optionFilterProp='children'\n                                                                                        filterOption={true}\n                                                                                    >\n                                                                                        {\n                                                                                            productList && productList.length ? productList.map(\n                                                                                                value => (<Option key={productList.indexOf(value)} value={value.product_id}>{value.product_name}</Option>)\n                                                                                            ) : []\n                                                                                        }\n                                                                                    </Select>\n                                                                                </FormItem>\n                                                                            </Col>\n                                                                            <Col span={12}>\n                                                                                <FormItem\n                                                                                    {...field}\n                                                                                    className='mb-0'\n                                                                                    validateTrigger={['onChange', 'onBlur']}\n                                                                                    name={[field.name, 'status']}\n                                                                                    fieldKey={[field.fieldKey, 'status']}\n                                                                                    rules={[\n                                                                                        {\n                                                                                            required: true,\n                                                                                            message: 'Please enter status.',\n                                                                                        },\n                                                                                    ]}\n                                                                                >\n                                                                                    <Select\n                                                                                        placeholder='Please select product status'\n                                                                                        className='product-select'\n                                                                                        id={'partner-product-status-' + field.fieldKey}\n                                                                                    >\n                                                                                        {\n                                                                                            statusArray && statusArray.length ? statusArray.map(\n                                                                                                value => (<Option key={statusArray.indexOf(value)} id={value.id} value={value.id}>{value.name}</Option>)\n                                                                                            ) : []\n                                                                                        }\n                                                                                    </Select>\n                                                                                </FormItem>\n                                                                            </Col>\n                                                                        </Row>\n                                                                    </Col>\n                                                                    <Col span={2} className='flex-d-row align-items-center'>\n                                                                        <MinusCircleOutlined\n                                                                            className='dynamic-delete-button'\n                                                                            style={{ margin: '0 8px' }}\n                                                                            onClick={() => {\n                                                                                remove(field.name);\n                                                                            }}\n                                                                        />\n                                                                    </Col>\n                                                                </div>\n                                                            </Form.Item>\n                                                        ))}\n\n                                                        <Form.Item className='flex-d-row-reverse'>\n                                                            <Button\n                                                                type='dashed'\n                                                                onClick={() => {\n                                                                    add();\n                                                                }}\n                                                                className='ml-20 width-60'\n                                                                id='partner-add-product'\n                                                            >\n                                                                <PlusOutlined /> Add Product\n                                                            </Button>\n                                                        </Form.Item>\n                                                    </div>\n                                                );\n                                            }}\n                                        </Form.List>\n                                    </Form.Item>\n\n                                    <Form.List name='employee'>\n                                        {(fields, { add, remove }) => {\n                                            return (\n                                                <div>\n                                                    {fields.map((field, index) => (\n                                                        <Form.Item\n                                                            label={'Person ' + (index + 1)}\n                                                            key={field.key}\n                                                            validateTrigger={['onChange', 'onBlur']}\n                                                            rules={[\n                                                                {\n                                                                    required: false,\n                                                                    message: 'Please enter details',\n                                                                },\n                                                            ]}\n                                                        >\n                                                            <div className='flex-d-row'>\n                                                                <Col span={22}>\n                                                                    <Row>\n                                                                        <Col span={8}>\n                                                                            <FormItem\n                                                                                {...field}\n                                                                                className='mb-0'\n                                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                                name={[field.name, 'first_name']}\n                                                                                fieldKey={[field.fieldKey, 'first_name']}\n                                                                                rules={[\n                                                                                    {\n                                                                                        required: true,\n                                                                                        message: 'Please enter first name.',\n                                                                                    },\n                                                                                ]}\n\n                                                                            >\n                                                                                <Input className='people-info' placeholder='first name' />\n                                                                            </FormItem>\n                                                                        </Col>\n                                                                        <Col span={8}>\n                                                                            <FormItem\n                                                                                {...field}\n                                                                                className='mb-0'\n                                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                                name={[field.name, 'last_name']}\n                                                                                fieldKey={[field.fieldKey, 'last_name']}\n                                                                                rules={[\n                                                                                    {\n                                                                                        required: true,\n                                                                                        message: 'Please enter last name.',\n                                                                                    },\n                                                                                ]}\n                                                                            >\n                                                                                <Input className='people-info' placeholder='last name' />\n                                                                            </FormItem>\n                                                                        </Col>\n                                                                        <Col span={8}>\n                                                                            <FormItem\n                                                                                {...field}\n                                                                                className='mb-0'\n                                                                                validateTrigger={['onChange', 'onBlur']}\n                                                                                name={[field.name, 'contact_number']}\n                                                                                fieldKey={[field.fieldKey, 'contact_number']}\n                                                                                rules={[\n                                                                                    { required: true, message: <IntlMessages id='error.contact_required' /> },\n                                                                                    { len: 10, message: <IntlMessages id='error.contact_length' /> },\n                                                                                    { pattern: /^[0-9]+$/, message: <IntlMessages id='error.contact_valid' /> },\n                                                                                ]}\n                                                                            >\n                                                                                <Input className='people-info' placeholder='phone number' />\n                                                                            </FormItem>\n                                                                        </Col>\n                                                                    </Row>\n                                                                </Col>\n                                                                <Col span={2} className='flex-d-row align-items-center'>\n                                                                    <MinusCircleOutlined\n                                                                        className='dynamic-delete-button'\n                                                                        style={{ margin: '0 8px' }}\n                                                                        onClick={() => {\n                                                                            remove(field.name);\n                                                                        }}\n                                                                    />\n                                                                </Col>\n                                                            </div>\n                                                        </Form.Item>\n                                                    ))}\n                                                    <Form.Item className='flex-d-row-reverse'>\n                                                        <Button\n                                                            type='dashed'\n                                                            onClick={() => {\n                                                                add();\n                                                            }}\n                                                            id='partner-add-product'\n                                                            style={{ width: '60%' }}\n                                                        >\n                                                            <PlusOutlined /> Add people\n                                                        </Button>\n                                                    </Form.Item>\n                                                </div>\n                                            );\n                                        }}\n                                    </Form.List>\n\n                                    <Form.Item className='flex-d-row-reverse'>\n                                        <Button id='add-partner-save' type='primary' htmlType='submit'>\n                                            {editFlag ? 'Save' : 'Add Partner'}\n                                        </Button>\n                                        <Button id='add-partner-cancel' onClick={navigateToPartnerList} >\n                                            Cancel\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                            </Col>\n                            <Col span={2}></Col>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default AddPartner\n","import React, { useEffect, useState } from 'react';\nimport {\n    Form,\n    Input,\n    Select,\n    Row,\n    Col,\n    Button,\n    Card,\n    Radio\n} from 'antd';\nimport { LeftOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { adminAddProduct, adminEditProduct, getAdminProduct, resetProduct } from '../../../appRedux/actions';\nimport './add-product.css'\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nconst AddProduct = (props) => {\n\n    const { product_id } = props.match.params;\n    const { isProductAdded, isLoaded, productItem, isProductEdited } = useSelector(({ adminProducts }) => adminProducts);\n    const [editFlag, setEditFlag] = useState(false);\n    const dispatch = useDispatch();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        if (product_id) {\n            setEditFlag(true)\n            dispatch(getAdminProduct(product_id))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (isProductAdded || isProductEdited) {\n            form.resetFields();\n            props.history.push('/admin/product-list')\n        }\n        if (isLoaded && editFlag) {\n            form.setFieldsValue(productItem)\n        }\n    }, [isProductAdded, isProductEdited, isLoaded])\n\n\n    const navigateBack = () => {\n        const { history } = props;\n        history.goBack();\n    }\n\n    const navigateToProductList = () => {\n        const { history } = props;\n        history.push('/admin/product-list');\n    }\n\n    const onFinish = values => {\n        if (editFlag) {\n            dispatch(adminEditProduct(product_id, values, () => {\n                dispatch(resetProduct())\n            }))\n        } else {\n            dispatch(adminAddProduct(values, () => {\n                dispatch(resetProduct())\n            }));\n        }\n    };\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <h1 className='title gx-mb-4'>\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\n                        {editFlag ? 'Edit Product' : 'Add Product'}\n                    </h1>\n                </Col>\n                <Col span={24}>\n                    <Card className='gx-card'>\n                        <Row>\n                            <Col span={22}>\n                                <Form\n                                    {...formItemLayout}\n                                    form={form}\n                                    name='add-product'\n                                    onFinish={onFinish}\n                                    scrollToFirstError\n                                >\n                                    <Form.Item\n                                        name='product_name'\n                                        label='Product Name'\n                                        rules={[{ required: true, message: 'Please enter product name!' }]}\n                                    >\n                                        <Input id='add-product-name' />\n                                    </Form.Item>\n                                    <Form.Item\n                                        name='category'\n                                        label='Category'\n                                        rules={[{ required: true, message: 'Please select category!' }]}\n                                    >\n                                        <Radio.Group disabled={editFlag}>\n                                            <Radio id='add-product-fdf' value='FDF'>FDF</Radio>\n                                            <Radio id='add-product-api' value='API'>API</Radio>\n                                        </Radio.Group>\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        label='Stages'\n                                    >\n                                        <Row>\n                                            <Col span={12}>\n                                                <Row>\n                                                    <span className='stages-title'>FDF</span>\n                                                </Row>\n                                                <Row>\n                                                    <ol>\n                                                        <li> Development set-up</li>\n                                                        <li> Trial Batch</li>\n                                                        <li> Pilot BE</li>\n                                                        <li> Exhibit batches</li>\n                                                        <li> Pivotal BE</li>\n                                                        <li> Stability loading in different packs</li>\n                                                        <li> Stability data  6 months</li>\n                                                        <li> Dossier Compilation</li>\n                                                        <li> DF Dossier Filing USFDA</li>\n                                                        <li> DF Dossier Filing WHO</li>\n                                                        <li>USFDA Approval (FDF)</li>\n                                                        <li>WHO-PQ Approval (FDF)</li>\n                                                    </ol>\n                                                </Row>\n                                            </Col>\n                                            <Col span={12}>\n                                                <Row>\n                                                    <span className='stages-title'>API</span>\n                                                </Row>\n                                                <Row>\n                                                    <ol>\n                                                        <li>Investigation and route selection</li>\n                                                        <li>R&D Batch API</li>\n                                                        <li>Lab scale batch API</li>\n                                                        <li>RM Procurement</li>\n                                                        <li>API Trial Batch</li>\n                                                        <li>API Validation Batches</li>\n                                                        <li>API Stability loading</li>\n                                                        <li>API Stability Study</li>\n                                                        <li>DMF Compilation</li>\n                                                        <li>DMF Filing USFDA</li>\n                                                        <li>DMF Filing WHO-PQ</li>\n                                                        <li>USFDA Approval (API)</li>\n                                                        <li>WHO-PQ Approval (API)</li>\n                                                    </ol>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        name='therapy_area'\n                                        label='Therapy Area'\n                                        hasFeedback\n                                        rules={[{ required: true, message: 'Please select therapy area!' }]}\n                                    >\n                                        <Select id='add-product-status' placeholder='Please select therapy area'>\n                                            <Option id='add-product-hiv' value='HIV'>HIV</Option>\n                                            <Option id='add-product-hcv' value='HCV'>HCV</Option>\n                                            <Option id='add-product-hbv' value='HBV'>HBV</Option>\n                                        </Select>\n                                    </Form.Item>\n\n                                    <Form.Item className='flex-d-row-reverse'>\n                                        <Button id='add-product-submit' type='primary' htmlType='submit'>\n                                            {editFlag ? 'Edit Product' : 'Add Product'}\n                                        </Button>\n                                        <Button id='add-product-cancel' onClick={navigateToProductList}>\n                                            Cancel\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                            </Col>\n                            <Col span={2}></Col>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default AddProduct\n","import React, { useEffect, useState } from 'react';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdminPDTReport, downloadPDTReport } from '../../../appRedux/actions/ProductDevelopmentTimeline';\n\nconst PDTReport = (props) => {\n\n    const { isLoaded, pdtReportData } = useSelector(({ pdt }) => pdt)\n    const dispatch = useDispatch();\n    const [rows, setRows] = useState([]);\n    const [columns, setColumns] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [requestObj, setRequestObj] = useState({ page_number: 1, page_size: 50 });\n\n    const [quarterDropdown, setQuarterDropdown] = useState([])\n    const [quarterDropdownCurrent, setQuarterDropdownCurrent] = useState(\"Loading...\")\n\n    useEffect(() => {\n        if(quarterDropdownCurrent === \"Loading...\"){\n            dispatch(getAdminPDTReport(requestObj));   \n        }\n        else{\n            requestObj['quarter']=quarterDropdownCurrent\n            dispatch(getAdminPDTReport(requestObj));\n        }\n    }, [quarterDropdownCurrent])\n\n    useEffect(() => {\n        dispatch(getAdminPDTReport(requestObj));\n    }, [requestObj])\n\n    useEffect(() => {\n        if (isLoaded) {\n            const { quarter_order, rows, total_rows, quarter_dropdown, filter_options } = pdtReportData;\n            const { partner_filter, product_filter, stage_filter, status_filter } = filter_options;\n\n            let dataCols = [{\n                title: 'Company Name',\n                dataIndex: 'company',\n                key: 'company',\n                render: name => <span className='text-capitalize'>{name}</span>,\n                filters: partner_filter.map((partner) => {\n                    return {text : partner.company_name.replace(/(^\\w{1})|(\\s{1}\\w{1})/g, match => match.toUpperCase()), value : partner.partner_id}\n                })\n            }, {\n                title: 'Product',\n                dataIndex: 'product',\n                key: 'product',\n                filters: product_filter.map((product) => {\n                    return {text : product.product_name, value : product.product_id}\n                })\n            }, {\n                title: 'Stage',\n                dataIndex: 'stage',\n                key: 'stage',\n                filters: stage_filter.map((stage) => {\n                    return {text : stage, value : stage}\n                })\n            },{\n                title: 'Status',\n                dataIndex: 'product_status',\n                key: 'product_status',\n                filters: status_filter.map((status) => {\n                    return {text : status, value : status}\n                })\n            }]\n            if (quarter_order && quarter_order.length) {\n                quarter_order.forEach(\n                    (value, index) => {\n                        dataCols.push({\n                            title: value,\n                            key: index,\n                            children: [\n                                {\n                                    title: 'Start Date',\n                                    dataIndex: 'start_date_' + value,\n                                    key: 'start_date_' + value,\n                                    width: 120\n                                },\n                                {\n                                    title: 'End Date',\n                                    dataIndex: 'end_date_' + value,\n                                    key: 'end_date_' + value,\n                                    width: 120\n                                },\n                            ]\n                        })\n                    }\n                )\n            }\n            setColumns(dataCols);\n            setRows(rows);\n            setQuarterDropdown(quarter_dropdown)\n            setTotal(total_rows)\n        }\n    }, [isLoaded, pdtReportData])\n\n    const handleTableChange = (pagination, columns) => {\n        const { current, pageSize } = pagination\n        const { company, product, stage, product_status  } = columns\n        \n        setRequestObj({\n            page_size: pageSize,\n            page_number: current,\n            quarter:quarterDropdownCurrent,\n            partner_id: company,\n            product_id: product,\n            stages: stage,\n            status: product_status\n        })\n    }\n    const changeQuarter = (e) => {\n        setQuarterDropdownCurrent(e.target.value)\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.pdt' /></h1>\n                        <div className='gx-flex-row'>\n                            <div className=\"quarter-dropdown-container-admin-consolidated-pdt\">\n                            <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                {\n                                    quarterDropdown.map((quarter) => (\n                                        <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                    ))\n                                }\n                            </select>\n                            </div>\n                            <Tooltip title={<IntlMessages id='report.download' />}>\n                                <Button id='report-download' className='mr-0' onClick={() => dispatch(downloadPDTReport('pdt-report.csv',quarterDropdownCurrent, requestObj))} >\n                                    <DownloadOutlined className='font-20' />\n                                </Button>\n                            </Tooltip>\n                        </div>\n                        \n                    </div>\n                </Col>\n                <Col span={24}>\n                    <Card className='mb-0'>\n                        <Table\n                            className='gx-table-responsive mpp-list-table'\n                            columns={columns}\n                            dataSource={rows}\n                            pagination={{\n                                pageSize: requestObj.page_size,\n                                current: requestObj.page_number,\n                                total,\n                            }}\n                            size='small'\n                            loading={!isLoaded}\n                            onChange={handleTableChange}\n                            bordered\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PDTReport\n","import React, { useEffect, useState } from 'react';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { downloadFilingReport, getAdminFilingPlansReport } from '../../../appRedux/actions/FilingPlans';\n\nconst FilingPlansReport = (props) => {\n\n    const { isLoaded, plansReportData } = useSelector(({ filingPlans }) => filingPlans)\n    const dispatch = useDispatch();\n    const [rows, setRows] = useState([]);\n    const [columns, setColumns] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [requestObj, setRequestObj] = useState({ page_number: 1, page_size: 50 });\n\n    const [quarterDropdown, setQuarterDropdown] = useState([])\n    const [quarterDropdownCurrent, setQuarterDropdownCurrent] = useState(\"Loading...\")\n    \n    useEffect(() => {\n        if(quarterDropdownCurrent === \"Loading...\"){\n            dispatch(getAdminFilingPlansReport(requestObj));   \n        }\n        else{\n            requestObj['quarter']=quarterDropdownCurrent\n            dispatch(getAdminFilingPlansReport(requestObj));\n        }\n    }, [quarterDropdownCurrent])\n    \n    useEffect(() => {\n        dispatch(getAdminFilingPlansReport(requestObj));\n    }, [requestObj])\n\n    useEffect(() => {\n        if (isLoaded) {\n            const { product_order, rows, total_rows,quarter_dropdown, filter_options } = plansReportData;\n            const { partner_filter, country_filter, status_filter } = filter_options;\n\n\n            let dataCols = [{\n                title: 'Company Name',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                fixed: 'left',\n                render: name => <div className='text-capitalize'>{name}</div>,\n                width: 150,\n                filters: partner_filter.map((partner) => {\n                    return {text : partner.company_name.replace(/(^\\w{1})|(\\s{1}\\w{1})/g, match => match.toUpperCase()), value : partner.partner_id}\n                })\n            }, {\n                title: 'Country',\n                dataIndex: 'country',\n                key: 'country',\n                fixed: 'left',\n                render: name => <div className='text-capitalize'>{name}</div>,\n                width: 150,\n                filters: country_filter.map((country) => {\n                    return {text : country.country_name, value : country.country_id}\n                })\n            }]\n            if (product_order && product_order.length) {\n                product_order.forEach(\n                    (value, index) => {\n                        dataCols.push({\n                            title: value,\n                            dataIndex: value,\n                            key: value,\n                            width: 120,\n                            filters: status_filter.map((status) => {\n                                return {text : status, value : status}\n                            })\n                        })\n                    }\n                )\n            }\n            setColumns(dataCols);\n            setRows(rows);\n            setQuarterDropdown(quarter_dropdown)\n            setTotal(total_rows)\n        }\n    }, [isLoaded, plansReportData])\n\n    const handleTableChange = (pagination, columns) => {\n        const { current, pageSize } = pagination\n        const {company_name, country } = columns\n        delete columns['company_name']\n        delete columns['country']\n        setRequestObj({\n            page_size: pageSize,\n            page_number: current,\n            quarter:quarterDropdownCurrent,\n            partner_id: company_name,\n            country_id: country,\n            product_status_dict: columns\n        })\n    }\n    const changeQuarter = (e) => {\n        setQuarterDropdownCurrent(e.target.value)\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.filing-plans' /></h1>\n                        <div className='gx-flex-row'>\n                        <div className=\"quarter-dropdown-container-admin-consolidated-filing-plans\">\n                            <select onChange={changeQuarter} className=\"quarter-dropdown\">\n                                {\n                                    quarterDropdown.map((quarter) => (\n                                        <option value={quarter} className=\"quarter-dropdown-options\">{quarter}</option>\n                                    ))\n                                }\n                            </select>\n                        </div>\n                            <Tooltip title={<IntlMessages id='report.download' />}>\n                                <Button\n                                    id='report-download'\n                                    className='mr-0'\n                                    onClick={() => dispatch(downloadFilingReport('filing-plans.csv',quarterDropdownCurrent, requestObj))}\n                                >\n                                    <DownloadOutlined className='font-20' />\n                                </Button>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </Col>\n                <Col span={24}>\n                    <Card className='mb-0'>\n                        <Table\n                            className='gx-table-responsive mpp-list-table'\n                            columns={columns}\n                            dataSource={rows}\n                            pagination={{\n                                pageSize: requestObj.page_size,\n                                current: requestObj.page_number,\n                                total,\n                            }}\n                            scroll={{ x: 300 }}\n                            size='small'\n                            loading={!isLoaded}\n                            onChange={handleTableChange}\n                            bordered\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default FilingPlansReport\n","import React, { useEffect, useState } from 'react';\nimport IntlMessages from 'util/IntlMessages';\nimport { Card, Table, Row, Col, Button, Tooltip, Tabs } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { downloadApiSalesReport, downloadFdfSalesReport, getAdminConsolidatedApiReport, getAdminConsolidatedFdfReport } from '../../../appRedux/actions/SalesReport';\n\nconst TabPane = Tabs.TabPane;\n\n\nconst ConsolidatedSalesReport = (props) => {\n\n    const { isLoaded, apiSalesReportData, fdfSalesReportData } = useSelector(({ salesReport }) => salesReport);\n    const dispatch = useDispatch();\n    const [apiRows, setApiRows] = useState([]);\n    const [apiColumns, setApiColumns] = useState([]);\n    const [fdfRows, setFdfRows] = useState([]);\n    const [fdfColumns, setFdfColumn] = useState([]);\n    const [apitotal, setApiTotal] = useState(0);\n    const [fdftotal, setFdfTotal] = useState(0);\n    const [apiRequestObj, setApiRequestObj] = useState({ page_number: 1, page_size: 100 });\n    const [fdfRequestObj, setFdfRequestObj] = useState({ page_number: 1, page_size: 100 });\n    const [tabKey, setTabKey] = useState('api');\n\n    useEffect(() => {\n        if (tabKey === 'api') {\n            dispatch(getAdminConsolidatedApiReport(apiRequestObj));\n        } else {\n            dispatch(getAdminConsolidatedFdfReport(fdfRequestObj))\n        }\n    }, [apiRequestObj, tabKey, fdfRequestObj])\n\n    useEffect(() => {\n        if (isLoaded) {\n            if (tabKey === 'api') {\n                const { total_rows, rows, filter_options } = apiSalesReportData;\n                const { partner_filter, product_filter, country_filter, quarter_filter, year_filter, month_filter, purchaser_filter } = filter_options;\n\n                const apiColumns = [\n                    {\n                        title: 'Company Name',\n                        dataIndex: 'company_name',\n                        key: 'company_name',\n                        ellipsis: true,\n                        fixed: 'left',\n                        render: name => <span className='text-capitalize'>{name}</span>,\n                        width: 250,\n                        filters: partner_filter.map((partner) => {\n                            return {text : partner.company_name.replace(/(^\\w{1})|(\\s{1}\\w{1})/g, match => match.toUpperCase()), value : partner.partner_id}\n                        })\n                    },\n                    {\n                        title: 'Year',\n                        dataIndex: 'year',\n                        key: 'year',\n                        width: 150,\n                        filters: year_filter.map((year) => {\n                            return {text : year.year, value : year.year}\n                        })\n                    },\n                    {\n                        title: 'Month',\n                        dataIndex: 'month',\n                        key: 'month',\n                        width: 150,\n                        filters: month_filter.map((month) => {\n                            return {text : month.month, value : month.month}\n                        })\n                    },\n                    {\n                        title: 'Quarter',\n                        dataIndex: 'quarter_name',\n                        key: 'quarter_name',\n                        width: 150,\n                        filters: quarter_filter.map((quarter) => {\n                            return {text : quarter.quarter_name, value : quarter.quarter_id}\n                        })\n                    },\n                    {\n                        title: 'Country',\n                        dataIndex: 'country_name',\n                        key: 'country_name',\n                        width: 150,\n                        filters: country_filter.map((country) => {\n                            return {text : country.country_name, value : country.country_id}\n                        })\n                    },\n                    {\n                        title: 'Purchaser',\n                        dataIndex: 'purchaser',\n                        key: 'purchaser',\n                        render: name => <span className='text-capitalize'>{name}</span>,\n                        width: 200,\n                        filters: purchaser_filter.map((purchaser) => {\n                            return {text : purchaser.purchaser, value : purchaser.purchaser}\n                        })\n                    },\n                    {\n                        title: 'Api Name',\n                        dataIndex: 'product_name',\n                        key: 'product_name',\n                        width: 200,\n                        filters: product_filter.map((product) => {\n                            return {text : product.product_name, value : product.product_id}\n                        })\n                    },\n                    {\n                        title: 'Quantity (Kg)',\n                        dataIndex: 'quantity',\n                        key: 'quantity',\n                        width: 150,\n                        \n                    },\n                    {\n                        title: 'Total Value (USD)',\n                        dataIndex: 'total_value',\n                        key: 'total_value',\n                        width: 150,\n                        \n                    }\n                ]\n                setApiColumns(apiColumns);\n                setApiTotal(total_rows);\n                setApiRows(rows);\n            } else {\n                const { total_rows, rows } = fdfSalesReportData;\n                const { partner_filter, product_filter, country_filter, quarter_filter, year_filter, month_filter, purchaser_filter, strength_filter, formulation_md_filter, currency_filter, procurement_end_country_filter, comments_filter } = fdfSalesReportData.filter_options;\n                const fdfColumns = [\n                    {\n                        title: 'Company Name',\n                        dataIndex: 'company_name',\n                        key: 'company_name',\n                        ellipsis: true,\n                        fixed: 'left',\n                        render: name => <span className='text-capitalize'>{name}</span>,\n                        width: 250,\n                        filters: partner_filter.map((partner) => {\n                            return {text : partner.company_name.replace(/(^\\w{1})|(\\s{1}\\w{1})/g, match => match.toUpperCase()), value : partner.partner_id}\n                        })\n                    },\n                    {\n                        title: 'Year',\n                        dataIndex: 'year',\n                        key: 'year',\n                        width: 150,\n                        filters: year_filter.map((year) => {\n                            return {text : year.year, value : year.year}\n                        })\n                    },\n                    {\n                        title: 'Month',\n                        dataIndex: 'month',\n                        key: 'month',\n                        width: 150,\n                        filters: month_filter.map((month) => {\n                            return {text : month.month, value : month.month}\n                        })\n                    },\n                    {\n                        title: 'Quarter',\n                        dataIndex: 'quarter_name',\n                        key: 'quarter_name',\n                        width: 150,\n                        filters: quarter_filter.map((quarter) => {\n                            return {text : quarter.quarter_name, value : quarter.quarter_id}\n                        })\n                    },\n                    {\n                        title: 'Country',\n                        dataIndex: 'country_name',\n                        key: 'country_name',\n                        width: 150,\n                        filters: country_filter.map((country) => {\n                            return {text : country.country_name, value : country.country_id}\n                        })\n                    },\n                    {\n                        title: 'Product',\n                        dataIndex: 'product_name',\n                        key: 'product_name',\n                        width: 200,\n                        filters: product_filter.map((product) => {\n                            return {text : product.product_name, value : product.product_id}\n                        })\n                    },\n                    {\n                        title: 'Purchaser',\n                        dataIndex: 'purchaser',\n                        key: 'purchaser',\n                        render: name => <span className='text-capitalize'>{name}</span>,\n                        width: 200,\n                        filters: purchaser_filter.map((purchaser) => {\n                            return {text : purchaser.purchaser, value : purchaser.purchaser}\n                        })\n                    },\n                    {\n                        title: 'Strength',\n                        dataIndex: 'strength',\n                        key: 'strength',\n                        width: 150,\n                        filters: strength_filter.map((strength) => {\n                            return {text : strength.strength, value : strength.strength}\n                        })\n                    },\n                    {\n                        title: 'Formulation Type',\n                        dataIndex: 'formulation_md',\n                        key: 'formulation_md',\n                        width: 150,\n                        filters: formulation_md_filter.map((formulation_md) => {\n                            return {text : formulation_md.formulation_md, value : formulation_md.formulation_md}\n                        })\n                    },\n                    {\n                        title: 'Pack Size',\n                        dataIndex: 'pack_size',\n                        key: 'pack_size',\n                        width: 100\n                    },\n                    {\n                        title: 'Quantity',\n                        dataIndex: 'quantity',\n                        key: 'quantity',\n                        width: 100\n                    },\n                    {\n                        title: 'Currency',\n                        dataIndex: 'currency',\n                        key: 'currency',\n                        width: 100,\n                        filters: currency_filter.map((currency) => {\n                            return {text : currency.currency, value : currency.currency}\n                        })\n                    },\n                    {\n                        title: 'Gross Sale Price (per pack) (Local Currency)',\n                        dataIndex: 'gross_sale_price_currency',\n                        key: 'gross_sale_price_currency',\n                        width: 150\n                    },\n                    {\n                        title: 'Applicable Currency Exchange Rate to USD',\n                        dataIndex: 'usd_exchange_rate',\n                        key: 'usd_exchange_rate',\n                        width: 150\n                    },\n                    {\n                        title: 'Gross Sale Price (per pack) (USD)',\n                        dataIndex: 'gross_sale_price_usd',\n                        key: 'gross_sale_price_usd',\n                        width: 150\n                    },\n                    {\n                        title: 'Deductable Expenses (USD)',\n                        dataIndex: 'deductable_expenses',\n                        key: 'deductable_expenses',\n                        width: 150\n                    },\n                    {\n                        title: 'Total Net Sales Value',\n                        dataIndex: 'total_value',\n                        key: 'total_value',\n                        width: 150\n                    },\n                    {\n                        title: 'Royalty %',\n                        dataIndex: 'royalty_percent',\n                        key: 'royalty_percent',\n                        width: 100\n                    },\n                    {\n                        title: 'Royalty Due',\n                        dataIndex: 'royalty_due',\n                        key: 'royalty_due',\n                        width: 100\n                    },\n                    {\n                        title: 'Procurement Agency End-Country',\n                        dataIndex: 'procurement_end_country',\n                        key: 'procurement_end_country',\n                        width: 150,\n                        filters: procurement_end_country_filter.map((procurement_end_country) => {\n                            return {text : procurement_end_country.procurement_end_country, value : procurement_end_country.procurement_end_country}\n                        })\n                    },\n                    {\n                        title: 'Comments',\n                        dataIndex: 'comments',\n                        key: 'comments',\n                        width: 200,\n                        filters: comments_filter.map((comments) => {\n                            return {text : comments.comments, value : comments.comments}\n                        })\n                    },\n                ]\n                setFdfColumn(fdfColumns);\n                setFdfTotal(total_rows);\n                setFdfRows(rows);\n            }\n        }\n    }, [isLoaded, apiSalesReportData, fdfSalesReportData])\n\n    const handleApiTableChange = (pagination, columns) => {\n        const { current, pageSize } = pagination\n        const { company_name, product_name, country_name, quarter_name, year, month, purchaser } = columns\n        setApiRequestObj({\n            page_size: pageSize,\n            page_number: current,\n            partner_id: company_name,\n            product_id: product_name,\n            country_id: country_name,\n            quarter_id: quarter_name,\n            year: year,\n            month: month,\n            purchaser: purchaser\n        })\n    }\n\n    const handleFdfTableChange = (pagination, columns) => {\n        const { current, pageSize } = pagination\n        const { company_name, product_name, country_name, quarter_name, year, month, purchaser, strength, formulation_md, currency, procurement_end_country, comments } = columns\n        setFdfRequestObj({\n            page_size: pageSize,\n            page_number: current,\n            partner_id: company_name,\n            product_id: product_name,\n            country_id: country_name,\n            quarter_id: quarter_name,\n            year: year,\n            month: month,\n            purchaser: purchaser,\n            strength: strength,\n            formulation_md: formulation_md,\n            currency: currency,\n            procurement_end_country: procurement_end_country,\n            comments: comments\n        })\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.sales-report' /></h1>\n                    </div>\n                </Col>\n                <Col span={24}>\n                    <Card className='mb-0'>\n                        <Tabs\n                            tabPosition='top'\n                            type='card'\n                            className='sales-report-tabs'\n                            tabBarExtraContent={\n                                <div>\n                                    <Tooltip title={tabKey === 'api' ? 'download API report!' : 'download FDF report!'}>\n                                        <Button\n                                            className='mb-0'\n                                            id='report-download'\n                                            onClick={() => {\n                                                tabKey === 'api' ?\n                                                    dispatch(downloadApiSalesReport('api-sales-report.csv', apiRequestObj))\n                                                    : dispatch(downloadFdfSalesReport('fdf-sales-report.csv', fdfRequestObj))\n                                            }}\n                                        >\n                                            <DownloadOutlined className='font-20' />\n                                        </Button>\n                                    </Tooltip>\n                                </div>\n                            }\n                            onChange={(currentTabKey) => { setTabKey(currentTabKey) }}\n                        >\n                            <TabPane tab='API' key='api'>\n                                <Table\n                                    className='gx-table-responsive mpp-list-table'\n                                    columns={apiColumns}\n                                    dataSource={apiRows}\n                                    pagination={{\n                                        pageSize: apiRequestObj.page_size,\n                                        current: apiRequestObj.page_number,\n                                        total: apitotal,\n                                    }}\n                                    size='small'\n                                    loading={!isLoaded}\n                                    onChange={handleApiTableChange}\n                                    bordered\n                                />\n                            </TabPane>\n                            <TabPane tab='FDF' key='fdf'>\n                                <Table\n                                    className='gx-table-responsive mpp-list-table'\n                                    columns={fdfColumns}\n                                    dataSource={fdfRows}\n                                    pagination={{\n                                        pageSize: fdfRequestObj.page_size,\n                                        current: fdfRequestObj.page_number,\n                                        total: fdftotal,\n                                    }}\n                                    size='small'\n                                    loading={!isLoaded}\n                                    onChange={handleFdfTableChange}\n                                    bordered\n                                />\n                            </TabPane>\n                        </Tabs>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default ConsolidatedSalesReport\n","import React from 'react';\nimport Auxiliary from 'util/Auxiliary';\n\n\nconst AboutItem = ({ data }) => {\n  const { title, icon, desc, userList, descClass } = data;\n  return (\n    <Auxiliary>\n      <div className='gx-media gx-flex-nowrap gx-mt-3 gx-mt-lg-4 gx-mb-2'>\n        <div className='gx-mr-3'>\n          <i className={`icon icon-${icon} gx-fs-xlxl gx-text-secondary`} />\n        </div>\n        <div className='gx-media-body'>\n          <h6 className='gx-mb-1 gx-text-grey'>{title}</h6>\n          {userList === '' ? null : userList}\n          {desc === '' ? null : <p className={'gx-mb-0 ' + descClass}>{desc}</p>}\n        </div>\n      </div>\n    </Auxiliary>\n  );\n};\n\nexport default AboutItem;\n","import React from 'react';\nimport { Col, Row } from 'antd';\nimport Widget from 'components/Widget';\nimport AboutItem from './AboutItem';\n\nconst About = (props) => {\n\n  return (\n    <Widget title='Profile' styleName='gx-card-tabs gx-card-tabs-right gx-card-profile'>\n      <div className='gx-mb-2'>\n        <Row>\n          {props.aboutList.map((about, index) =>\n            <Col key={index} xl={8} lg={12} md={12} sm={12} xs={24}>\n              <AboutItem data={about} />\n            </Col>\n          )}\n        </Row>\n      </div>\n    </Widget>\n  );\n}\n\n\nexport default About;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'antd';\nimport About from 'components/profile-userInfo'\nimport { getRole, getUserInfo } from '../../../helpers';\n\n\nconst UserProfilePage = (props) => {\n\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\n    const [isUserStaff, setIsUserStaff] = useState(false);\n    const [userDetails, setUserDetails] = useState({});\n\n    useEffect(() => {\n        setIsUserAdmin(getRole() === 'ADMIN')\n        setIsUserStaff(getRole() === 'STAFF')\n        setUserDetails(getUserInfo())\n    }, [])\n\n    const setInfoList = () => {\n        if (isUserAdmin || isUserStaff) {\n            return [\n                {\n                    id: 1,\n                    title: 'User Name',\n                    icon: 'user-o',\n                    userList: '',\n                    descClass: 'gx-text-capitalize',\n                    desc: [userDetails.name]\n                },\n                {\n                    id: 2,\n                    title: 'email',\n                    icon: 'email',\n                    userList: '',\n                    descClass: '',\n                    desc: [userDetails.email]\n                }\n            ]\n        } else {\n            return [\n                {\n                    id: 1,\n                    title: 'Company Name',\n                    icon: 'company',\n                    userList: '',\n                    descClass: 'gx-text-capitalize',\n                    desc: [userDetails.company_name]\n                },\n                {\n                    id: 2,\n                    title: 'email',\n                    icon: 'email',\n                    userList: '',\n                    descClass: '',\n                    desc: [userDetails.email]\n                },\n                {\n                    id: 2,\n                    title: 'Contact Number',\n                    icon: 'phone',\n                    descClass: '',\n                    userList: '',\n                    desc: [userDetails.contact_number]\n                },\n                {\n                    id: 3,\n                    title: 'Region',\n                    icon: 'map-google',\n                    userList: '',\n                    descClass: 'gx-text-capitalize',\n                    desc: [userDetails.region]\n                },\n                {\n                    id: 4,\n                    title: 'Address',\n                    icon: 'home',\n                    userList: '',\n                    descClass: 'gx-text-capitalize',\n                    desc: [userDetails.address ? userDetails.address : '---']\n                }\n            ]\n        }\n\n    }\n\n    return (\n        <div className=\"gx-profile-content\">\n            <Row>\n                <Col span={24}>\n                    <About aboutList={setInfoList()} />\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default UserProfilePage\n","import React, { useEffect } from 'react';\nimport { Button, DatePicker, Form, Card, Col, Row } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { adminGetCutOffDate, adminSetCutOffDate } from '../../../appRedux/actions';\nimport { LeftOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport { getRole } from '../../../helpers';\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nconst AdminSettings = (props) => {\n\n    const dispatch = useDispatch();\n    const [form] = Form.useForm();\n\n    const { isLoaded, cutOffDate } = useSelector(({ adminPartner }) => adminPartner);\n\n    useEffect(() => {\n        dispatch(adminGetCutOffDate())\n    }, [])\n\n    useEffect(() => {\n        if (isLoaded) {\n            form.setFieldsValue({\n                date: cutOffDate && cutOffDate.cut_off_date ? moment(cutOffDate.cut_off_date) : ''\n            })\n        }\n    }, [isLoaded])\n\n    const config = {\n        rules: [{ type: 'object', required: true, message: 'Please select date!' }],\n    };\n\n    const navigateBack = () => {\n        props.history.goBack()\n    }\n\n    const navigateToDashboard = () => {\n        props.history.push('/')\n    }\n\n    const onFinish = values => {\n        dispatch(adminSetCutOffDate({ 'date': values.date.format('DD-MM-yyyy') }))\n    };\n\n    return (\n        <div>\n            <Row>\n                <Col span={24}>\n                    <h1 className='title gx-mb-4'>\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\n                        Admin Settings\n                    </h1>\n                </Col>\n                <Col span={24}>\n                    <Card className='gx-card'>\n                        <Row>\n                            <Col span={22}>\n                                <Form\n                                    name='time_related_controls'\n                                    onFinish={onFinish}\n                                    form={form}\n                                    className='gx-signin-form gx-form-row0'\n                                    {...formItemLayout}\n                                >\n                                    <Form.Item\n                                        name='date'\n                                        {...config}\n                                        label='Set Report submission date'\n                                    >\n                                        <DatePicker format='DD-MM-YYYY' disabled={getRole() === 'ADMIN' ? false : true}/>\n                                    </Form.Item>\n\n                                    <Form.Item className='flex-d-row-reverse'>\n                                        <Button type='primary' htmlType='submit' disabled={getRole() === 'ADMIN' ? false : true}>\n                                            Save\n                                        </Button>\n                                        <Button onClick={navigateToDashboard} disabled={getRole() === 'ADMIN' ? false : true}>\n                                            Cancel\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n\n                            </Col>\n                            <Col span={2}></Col>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default AdminSettings;\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { Auth } from '../helpers/auth'\nimport { roleConstants } from '../constants';\n\nimport AdminDashboard from './pages/dashboard/adminDashboard';\nimport PartnerDashboard from './pages/partner-dashboard';\nimport PartnerListNew from './pages/partner-list-new';\nimport PartnerPerformance from './pages/partner-peformance';\nimport ProductList from './pages/product-list';\nimport DevelopmentTimeline from './pages/development-timeline';\nimport FilingPlans from './pages/filing-plans';\nimport SalesReport from './pages/sales-report';\nimport ChangePassword from \"./pages/change-password\";\nimport AddPartner from \"./pages/add-partner\";\nimport AddProduct from \"./pages/add-product\";\nimport PDTReport from \"./pages/report-pdt\";\nimport FilingPlansReport from \"./pages/report-filing-plans\";\nimport ConsolidatedSalesReport from \"./pages/report-sales-report\";\nimport UserProfilePage from \"./pages/profile\";\nimport AdminSettings from \"./pages/admin-settings\";\n\nconst AdminDashboardPage = Auth(AdminDashboard, [roleConstants.ADMIN, roleConstants.STAFF,roleConstants.PARTNER]);\nconst PartnerDashboardPage = Auth(PartnerDashboard, [roleConstants.PARTNER]);\nconst ChangePasswordPage = Auth(ChangePassword, [roleConstants.ADMIN, roleConstants.STAFF, roleConstants.PARTNER]);\nconst AdminProfilePage = Auth(UserProfilePage, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst PartnerProfilePage = Auth(UserProfilePage, [roleConstants.PARTNER]);\nconst PartnerListNewPage = Auth(PartnerListNew, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst AddPartnerPage = Auth(AddPartner, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst PartnerPerformancePage = Auth(PartnerPerformance, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst ProductListPage = Auth(ProductList, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst AddProductPage = Auth(AddProduct, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst DevelopmentTimelinePage = Auth(DevelopmentTimeline, [roleConstants.PARTNER, roleConstants.ADMIN, roleConstants.STAFF]);\nconst FilingPlansPage = Auth(FilingPlans, [roleConstants.PARTNER, roleConstants.ADMIN, roleConstants.STAFF]);\nconst SalesReportPage = Auth(SalesReport, [roleConstants.PARTNER, roleConstants.ADMIN, roleConstants.STAFF]);\nconst PDTReportPage = Auth(PDTReport, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst FilingPlansReportPage = Auth(FilingPlansReport, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst ConsolidatedSalesReportPage = Auth(ConsolidatedSalesReport, [roleConstants.ADMIN, roleConstants.STAFF]);\nconst AdminSettingsPage = Auth(AdminSettings, [roleConstants.ADMIN, roleConstants.STAFF]);\n\n\n\nconst NotFoundRedirect = () => <Redirect to='/error-404' />\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"gx-main-content-wrapper\">\n        <Switch>\n          <Route exact path='/change-password' component={ChangePasswordPage} />\n          <Route exact path='/admin/dashboard' component={AdminDashboardPage} />\n          <Route exact path='/admin/partner-list' component={PartnerListNewPage} />\n          <Route exact path='/admin/edit-partner/:id' component={AddPartnerPage} />\n          <Route exact path='/admin/add-partner' component={AddPartnerPage} />\n          <Route exact path='/admin/partner-performance' component={PartnerPerformancePage} />\n          <Route exact path='/admin/product-list' component={ProductListPage} />\n          <Route exact path='/admin/add-product' component={AddProductPage} />\n          <Route exact path='/admin/edit-product/:product_id' component={AddProductPage} />\n          <Route exact path='/admin/development-timeline/:id' component={DevelopmentTimelinePage} />\n          <Route exact path='/admin/filing-plans/:id' component={FilingPlansPage} />\n          <Route exact path='/admin/sales-report/:id' component={SalesReportPage} />\n          <Route exact path='/admin/report/development-timeline' component={PDTReportPage} />\n          <Route exact path='/admin/report/filing-plans' component={FilingPlansReportPage} />\n          <Route exact path='/admin/report/sales-report' component={ConsolidatedSalesReportPage} />\n          <Route exact path='/admin/profile' component={AdminProfilePage} />\n          <Route exact path='/admin/settings' component={AdminSettingsPage} />\n\n\n          <Route exact path='/partner/dashboard' component={PartnerDashboardPage} />\n          <Route exact path='/partner/development-timeline' component={DevelopmentTimelinePage} />\n          <Route exact path='/partner/filing-plans' component={FilingPlansPage} />\n          <Route exact path='/partner/sales-report' component={SalesReportPage} />\n          <Route exact path='/partner/profile' component={PartnerProfilePage} />\n\n\n          <Route component={NotFoundRedirect} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","import React from \"react\";\nimport { Layout } from \"antd\";\n\nimport Sidebar from \"../Sidebar/index\";\nimport HorizontalDefault from \"../Topbar/HorizontalDefault/index\";\nimport HorizontalDark from \"../Topbar/HorizontalDark/index\";\nimport InsideHeader from \"../Topbar/InsideHeader/index\";\nimport AboveHeader from \"../Topbar/AboveHeader/index\";\nimport BelowHeader from \"../Topbar/BelowHeader/index\";\n\nimport Topbar from \"../Topbar/index\";\nimport { footerText } from \"util/config\";\nimport App from \"routes/index\";\nimport { useSelector } from \"react-redux\";\nimport {\n  NAV_STYLE_ABOVE_HEADER,\n  NAV_STYLE_BELOW_HEADER,\n  NAV_STYLE_DARK_HORIZONTAL,\n  NAV_STYLE_DEFAULT_HORIZONTAL,\n  NAV_STYLE_DRAWER,\n  NAV_STYLE_FIXED,\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\n  NAV_STYLE_MINI_SIDEBAR,\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n  TAB_SIZE\n} from \"../../constants/ThemeSetting\";\n// import NoHeaderNotification from \"../Topbar/NoHeaderNotification/index\";\n\nconst { Content, Footer } = Layout;\n\nconst MainApp = (props) => {\n\n  const navStyle = useSelector(({ settings }) => settings.navStyle);\n  const width = useSelector(({ settings }) => settings.width);\n\n  const getContainerClass = (navStyle) => {\n    switch (navStyle) {\n      case NAV_STYLE_DARK_HORIZONTAL:\n        return \"gx-container-wrap\";\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\n        return \"gx-container-wrap\";\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\n        return \"gx-container-wrap\";\n      case NAV_STYLE_BELOW_HEADER:\n        return \"gx-container-wrap\";\n      case NAV_STYLE_ABOVE_HEADER:\n        return \"gx-container-wrap\";\n      default:\n        return \"\"\n    }\n  };\n  const getNavStyles = (navStyle) => {\n    switch (navStyle) {\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\n        return <HorizontalDefault />;\n      case NAV_STYLE_DARK_HORIZONTAL:\n        return <HorizontalDark />;\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\n        return <InsideHeader />;\n      case NAV_STYLE_ABOVE_HEADER:\n        return <AboveHeader />;\n      case NAV_STYLE_BELOW_HEADER:\n        return <BelowHeader />;\n      case NAV_STYLE_FIXED:\n        // return <Topbar />;\n      case NAV_STYLE_DRAWER:\n        return <Topbar />;\n      case NAV_STYLE_MINI_SIDEBAR:\n        // return <Topbar />;\n        return null;\n      case NAV_STYLE_NO_HEADER_MINI_SIDEBAR:\n        // return <NoHeaderNotification/>;\n        return null;\n      case NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR:\n        // return <NoHeaderNotification />;\n        return null;\n      default:\n        return null;\n    }\n  };\n  const getSidebar = (navStyle, width) => {\n    if (width < TAB_SIZE) {\n      return <Sidebar />;\n    }\n    switch (navStyle) {\n      case NAV_STYLE_FIXED:\n        return <Sidebar history={props.history} />;\n      case NAV_STYLE_DRAWER:\n        return <Sidebar />;\n      case NAV_STYLE_MINI_SIDEBAR:\n        return <Sidebar history={props.history} />;\n      case NAV_STYLE_NO_HEADER_MINI_SIDEBAR:\n        return <Sidebar />;\n      case NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR:\n        return <Sidebar />;\n      default:\n        return null;\n    }\n  };\n\n\n  return (\n    <Layout className=\"gx-app-layout\">\n      {getSidebar(navStyle, width)}\n      <Layout>\n        {getNavStyles(navStyle)}\n        <Content className={`gx-layout-content ${getContainerClass(navStyle)}`}>\n          <App />\n          {false ?\n            <Footer>\n              <div className=\"gx-layout-footer-content\">\n                {footerText}\n              </div>\n            </Footer>\n            : null\n          }\n        </Content>\n      </Layout>\n    </Layout>\n  )\n};\n\n\nexport default MainApp;\n\n","import React, { useEffect } from 'react';\nimport { Button, Form, Input, Checkbox } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { userLogin } from '../appRedux/actions/Auth';\nimport { roleConstants } from '../constants'\n\nimport UserOutlined from '@ant-design/icons/lib/icons/UserOutlined';\nimport LockOutlined from '@ant-design/icons/lib/icons/LockOutlined';\nimport IntlMessages from 'util/IntlMessages';\n\nconst FormItem = Form.Item;\n\nconst Login = (props) => {\n\n  const isLoggedIn = useSelector(state => state.authentication.isUserLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    navigatePostLogin()\n  }, [isLoggedIn])\n\n  const navigatePostLogin = () => {\n    let user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      if (user.role === roleConstants.ADMIN || user.role === roleConstants.STAFF) {\n        props.history.push('/admin/dashboard');\n      } else {\n        props.history.push('/partner/dashboard');\n      }\n    } else {\n      props.history.push('/login');\n    }\n  }\n\n  const onFinish = values => {\n    dispatch(userLogin({\n      email: values.email.trim().toLowerCase(),\n      password: values.password.trim()\n    }, navigatePostLogin()))\n  };\n\n  return (\n    <div className='gx-login-container'>\n    <a href=\"http://ec2-3-15-49-26.us-east-2.compute.amazonaws.com:8000/api/swagger\"><button type='button' className='btn' style={{position: 'absolute', right:20, top:20, color: 'white', background: 'green'}}>Swagger Link</button></a>\n      <div className='gx-login-content'>\n        <div className='gx-login-header gx-text-center'>\n          <img className='mb-30' src={require('assets/images/logo-white.png')} alt='mpp' title='mpp' />\n          <p><IntlMessages id=\"app.userAuth.welcome\" /></p>\n          <h1 className='gx-login-title'>Login</h1>\n        </div>\n        <Form\n          name='login'\n          onFinish={onFinish}\n          className='gx-signin-form gx-form-row0'>\n          <FormItem\n            rules={[\n              { required: true, message: <IntlMessages id='error.email_required' /> },\n              { type: 'email', message: <IntlMessages id='error.email_valid' /> }\n            ]}\n            name='email'\n          >\n            <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='admin@mdp.com or partner@mdp.com' />\n          </FormItem>\n          <FormItem rules={[{ required: true, message: <IntlMessages id='error.password_required' /> }]} name='password'>\n            <Input.Password prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Demopass@123' />\n          </FormItem>\n          <div className='gx-flex-row align-items-baseline'>\n            <FormItem name='remember' valuePropName='checked'>\n              <Checkbox>Remember me</Checkbox>\n            </FormItem>\n            <Link className='gx-login-form-forgot gx-ml-auto float-right' to='/reset-password'><IntlMessages id='app.userAuth.forgotPassword' /></Link>\n          </div>\n          <FormItem className='gx-text-center'>\n            <Button id='app-btn-login' className='gx-img-fluid-full' type='primary' htmlType='submit'>\n              <IntlMessages id='app.userAuth.login' />\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { userLogout } from \"../appRedux/actions/Auth\";\n\nconst Logout = (props) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(userLogout());\n        props.history.push('/login')\n    })\n\n    return (\n        <></>\n    )\n\n}\n\nexport default Logout;\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport IntlMessages from \"util/IntlMessages\";\nimport { authConstants } from \"../constants\";\nimport { userForgetPassword } from \"../appRedux/actions/Auth\";\nimport { getUserDetails, showMessage } from '../helpers';\n\n\nconst FormItem = Form.Item;\n\nconst ResetPassword = (props) => {\n  const dispatch = useDispatch();\n  const { isMailSend } = useSelector(({ authentication }) => authentication);\n  const [isResetToken, setIsResetToken] = useState(false)\n\n  useEffect(() => {\n\n    if (getUserDetails() !== '') {\n      showMessage('info', 'Access Denied!');\n      props.history.push('/logout')\n    }\n\n    const urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.get('token') === 'true') {\n      setIsResetToken(true)\n    }\n\n    return () => {\n      dispatch({ type: authConstants.FORGOT_PASSWORD_REQUEST });\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isMailSend) {\n      props.history.push('/login')\n    }\n  }, [isMailSend])\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const onFinish = values => {\n    dispatch(userForgetPassword({\n      email: values.email.trim().toLowerCase()\n    }))\n  };\n\n  return (\n    <div className=\"gx-login-container\">\n      <div className=\"gx-login-content\">\n        <div className=\"gx-login-header\">\n          <img src={require(\"assets/images/logo-white.png\")} alt=\"mpp\" title=\"mpp\" />\n        </div>\n        <div className=\"gx-mb-4\">\n          <h2>{isResetToken ? 'Resend set password link' : 'Forgot Your Password ?'}</h2>\n          <p>{isResetToken ? 'Enter below the registered e-mail id' : <IntlMessages id=\"app.userAuth.forgot\" />}</p>\n        </div>\n\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          className=\"gx-signin-form gx-form-row0\">\n          <FormItem name=\"email\" rules={[{ required: true, message: 'Please input your E-mail!' }, { type: 'email', message: <IntlMessages id='error.email_valid' /> }]}>\n            <Input className='gx-input-lineheight' type=\"email\" placeholder=\"E-Mail Address\" />\n          </FormItem>\n\n          <FormItem>\n            <Button type=\"primary\" htmlType=\"submit\">\n              <IntlMessages id=\"app.userAuth.send\" />\n            </Button>\n          </FormItem>\n        </Form>\n\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import React from \"react\";\nimport loader from \"../../assets/images/loader.svg\"\n\nconst CircularProgress = ({className}) => <div className={`loader ${className}`}>\n  <img src={loader} alt=\"loader\"/>\n</div>;\nexport default CircularProgress;\n","import React, { useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { validateToken, setPassword } from '../appRedux/actions/Auth';\n\nimport IntlMessages from 'util/IntlMessages';\nimport { getUserDetails, showMessage } from '../helpers';\n\nconst FormItem = Form.Item;\n\nconst SetPassword = (props) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (getUserDetails() === '') {\n            const token = props.match.params.token\n            dispatch(validateToken({ 'token': token }))\n        } else {\n            showMessage('info', 'Access Denied!');\n            props.history.push('/logout')\n        }\n    }, []);\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const onFinish = values => {\n        const token = props.match.params.token\n        dispatch(setPassword({ 'password': values.password, 'token': token }, navigatePostSetPassword()))\n    };\n\n    const navigatePostSetPassword = () => {\n        props.history.push('/login');\n    }\n\n    return (\n        <div className='gx-login-container'>\n            <div className='gx-login-content'>\n\n                <div className='gx-login-header'>\n                    <img src={require('assets/images/logo-white.png')} alt='wieldy' title='wieldy' />\n                </div>\n                <div className='gx-mb-4'>\n                    <h2>Change Password</h2>\n                    <p><IntlMessages id='appModule.enterPasswordReset' /></p>\n                </div>\n\n                <Form\n                    initialValues={{ remember: true }}\n                    name='reset-password'\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    className='gx-signin-form gx-form-row0'>\n\n                    <FormItem\n                        rules={[\n                            { required: true, message: 'Please input your Password!' },\n                            { min: 8, message: <IntlMessages id='error.password_min' /> },\n                            { pattern: /^(?=.*\\d)(?=.*[a-z]).{8,100}$/, message: <IntlMessages id='error.password_valid' /> }\n                        ]}\n                        name='password'\n                    >\n                        <Input.Password placeholder='Password' />\n                    </FormItem>\n\n                    <FormItem\n                        name='confirm'\n                        dependencies={['password']}\n                        hasFeedback\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            ({ getFieldValue }) => ({\n                                validator(rule, value) {\n                                    if (!value || getFieldValue('password') === value) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('The two passwords that you entered do not match!');\n                                },\n                            }),\n                        ]}\n                    >\n                        <Input.Password placeholder='Retype New Password' />\n                    </FormItem>\n\n                    <FormItem>\n                        <Button type='primary' htmlType='submit'>\n                            <IntlMessages id='app.userAuth.setPassword' />\n                        </Button>\n                    </FormItem>\n                </Form>\n            </div>\n        </div>\n    );\n};\n\nexport default SetPassword;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport URLSearchParams from 'url-search-params'\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ConfigProvider } from 'antd';\nimport { IntlProvider } from \"react-intl\";\n\nimport AppLocale from \"lngProvider\";\nimport MainApp from \"./MainApp\";\nimport Login from \"../Login\";\nimport Logout from \"../Logout\";\nimport ResetPassword from \"../ResetPassword\";\nimport asyncComponent from \"util/asyncComponent\";\nimport { onLayoutTypeChange, onNavStyleChange, setThemeType } from \"../../appRedux/actions/Setting\";\n\nimport {\n  LAYOUT_TYPE_BOXED,\n  LAYOUT_TYPE_FRAMED,\n  LAYOUT_TYPE_FULL,\n  NAV_STYLE_ABOVE_HEADER,\n  NAV_STYLE_BELOW_HEADER,\n  NAV_STYLE_DARK_HORIZONTAL,\n  NAV_STYLE_DEFAULT_HORIZONTAL,\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\n  THEME_TYPE_DARK\n} from \"../../constants/ThemeSetting\";\n\nimport './custom-style.css'\nimport SetPassword from \"../SetPassword\";\n\nconst RestrictedRoute = ({ component: Component, location, authUser, ...rest }) =>\n  <Route\n    {...rest}\n    render={\n      props =>\n        authUser\n          ? <Component {...props} />\n          : <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: location }\n            }}\n          />\n    }\n  />;\n\nconst App = (props) => {\n\n  const { location } = props;\n\n  const dispatch = useDispatch();\n\n\n  const locale = useSelector(({ settings }) => settings.locale);\n  const navStyle = useSelector(({ settings }) => settings.navStyle);\n  const themeType = useSelector(({ settings }) => settings.themeType);\n  const layoutType = useSelector(({ settings }) => settings.layoutType);\n\n  useEffect(() => {\n\n    const params = new URLSearchParams(location.search);\n    if (params.has(\"theme\")) {\n      dispatch(setThemeType(params.get('theme')));\n    }\n    if (params.has(\"nav-style\")) {\n      dispatch(onNavStyleChange(params.get('nav-style')));\n    }\n    if (params.has(\"layout-type\")) {\n      dispatch(onLayoutTypeChange(params.get('layout-type')));\n    }\n  }, [dispatch, location.search]);\n\n\n  const setLayoutType = (layoutType) => {\n    if (layoutType === LAYOUT_TYPE_FULL) {\n      document.body.classList.remove('boxed-layout');\n      document.body.classList.remove('framed-layout');\n      document.body.classList.add('full-layout');\n    } else if (layoutType === LAYOUT_TYPE_BOXED) {\n      document.body.classList.remove('full-layout');\n      document.body.classList.remove('framed-layout');\n      document.body.classList.add('boxed-layout');\n    } else if (layoutType === LAYOUT_TYPE_FRAMED) {\n      document.body.classList.remove('boxed-layout');\n      document.body.classList.remove('full-layout');\n      document.body.classList.add('framed-layout');\n    }\n  };\n\n  const setNavStyle = (navStyle) => {\n    if (navStyle === NAV_STYLE_DEFAULT_HORIZONTAL ||\n      navStyle === NAV_STYLE_DARK_HORIZONTAL ||\n      navStyle === NAV_STYLE_INSIDE_HEADER_HORIZONTAL ||\n      navStyle === NAV_STYLE_ABOVE_HEADER ||\n      navStyle === NAV_STYLE_BELOW_HEADER) {\n      document.body.classList.add('full-scroll');\n      document.body.classList.add('horizontal-layout');\n    } else {\n      document.body.classList.remove('full-scroll');\n      document.body.classList.remove('horizontal-layout');\n    }\n  };\n\n  if (themeType === THEME_TYPE_DARK) {\n    document.body.classList.add('dark-theme');\n  }\n  if (location.pathname === '/') {\n    return (<Redirect to={'/login'} />);\n  }\n\n  const NotFoundRedirect = () => <Redirect to='/error-404' />\n\n  setLayoutType(layoutType);\n\n  setNavStyle(navStyle);\n\n  const currentAppLocale = AppLocale[locale.locale];\n\n  return (\n    <ConfigProvider locale={currentAppLocale.antd}>\n      <IntlProvider\n        locale={currentAppLocale.locale}\n        messages={currentAppLocale.messages}>\n        <Switch>\n          <Route exact path='/login' component={Login} />\n          <Route path={`/logout`} component={Logout} />\n          <Route path={`/set-password/:token`} component={SetPassword} />\n          <Route exact path='/reset-password' component={ResetPassword} />\n          <Route path={`/error-404`} component={asyncComponent(() => import('../error-pages/404'))} />\n          <RestrictedRoute authUser={true} component={MainApp} />\n          <Route component={NotFoundRedirect} />\n        </Switch>\n      </IntlProvider>\n    </ConfigProvider>\n  )\n};\n\nexport default App;\n","import React, {Component} from \"react\";\nimport Nprogress from \"nprogress\";\nimport ReactPlaceholder from \"react-placeholder\";\nimport \"nprogress/nprogress.css\";\n\nimport \"react-placeholder/lib/reactPlaceholder.css\";\nimport CircularProgress from \"components/CircularProgress\";\n\nexport default function asyncComponent(importComponent) {\n  class AsyncFunc extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        component: null\n      };\n    }\n\n    componentWillMount() {\n      Nprogress.start();\n    }\n\n    componentWillUnmount() {\n      this.mounted = false;\n    }\n\n    async componentDidMount() {\n      this.mounted = true;\n      const {default: Component} = await importComponent();\n      Nprogress.done();\n      if (this.mounted) {\n        this.setState({\n          component: <Component {...this.props} />\n        });\n      }\n    }\n\n    render() {\n      const Component = this.state.component || <CircularProgress/>;\n      return (\n        <ReactPlaceholder type=\"text\" rows={7} ready={Component !== null}>\n          {Component}\n        </ReactPlaceholder>\n      );\n    }\n  }\n\n  return AsyncFunc;\n}\n","import React from 'react';\nimport { Spin } from 'antd';\nimport { useSelector } from \"react-redux\";\nimport './loader.css';\n\nconst Loader = () => {\n\n    const showLoader = useSelector(state => state.loader.showLoader);\n    return (\n        <div>\n            { showLoader ? (\n                <div className=\"app-loader-wrapper\">\n                    <div className=\"app-loader\">\n                        <Spin size='large' />\n                    </div>\n                </div>\n            ) : null}\n        </div>\n    )\n}\n\n\nexport default Loader;\n","import React from \"react\";\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport {Route, Switch} from \"react-router-dom\";\nimport \"assets/vendors/style\";\nimport \"styles/wieldy.less\";\n\nimport configureStore, { history } from './appRedux/store';\nimport App from \"./containers/App/index\";\nimport Loader from \"./components/loader\";\n\n// const store = configureStore(/ provide initial state if any /);\nconst store = configureStore();\n\nconst NextApp = () =>\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Switch>\n        <Route path=\"/\" component={App}/>\n      </Switch>\n    </ConnectedRouter>\n    <Loader/>\n  </Provider>;\n\n\nexport default NextApp;\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from 'connected-react-router'\nimport Settings from \"./Settings\";\nimport Common from \"./Common\";\nimport Loader from \"./Loader\";\nimport AdminProducts from \"./AdminProducts\";\nimport AdminPartner from \"./AdminPartner\";\nimport PartnerDashboard from \"./PartnerDashboard\";\nimport ProductDevelopmentTimeline from \"./ProductDevelopmentTimeline\";\nimport FilingPlans from \"./FilingPlans\";\nimport SalesReport from \"./SalesReport\";\nimport UserAuthentication from \"./UserAuthentication\";\nimport AdminDashboard from \"./AdminDashboard\"\n\nexport default (history) => combineReducers({\n  router: connectRouter(history),\n  settings: Settings,\n  commonData: Common,\n  authentication: UserAuthentication,\n  loader: Loader,\n  adminProducts: AdminProducts,\n  adminPartner: AdminPartner,\n  partnerDashboard: PartnerDashboard,\n  pdt: ProductDevelopmentTimeline,\n  filingPlans: FilingPlans,\n  salesReport: SalesReport,\n  adminDashboard:AdminDashboard\n});\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport NextApp from './NextApp';\nimport registerServiceWorker from './registerServiceWorker';\n// Add this import:\nimport { AppContainer } from 'react-hot-loader';\nimport * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\nimport { sentryData } from './constants';\n\nSentry.init({\n  dsn: sentryData.SENTRY_DSN,\n  integrations: [\n    new Integrations.BrowserTracing(),\n  ],\n  tracesSampleRate: 1.0,\n});\n\n\n// Wrap the rendering in a function:\nconst render = Component => {\n  ReactDOM.render(\n    // Wrap App inside AppContainer\n    <AppContainer>\n      <Component />\n    </AppContainer>,\n    document.getElementById('root')\n  );\n};\n\n// Do this once\nregisterServiceWorker();\n\n// Render once\nrender(NextApp);\n\n// Webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./NextApp', () => {\n    render(NextApp);\n  });\n}\n"],"sourceRoot":""}
